egetting env vars
var[0] = USER=ahsalem
var[1] = MallocNanoZone=0
var[2] = PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/munki:/Applications/Visual Studio Code.app/Contents/Resources/app/bin:/Applications/Visual Studio Code.app/Contents/Resources/app/bin
var[3] = LOGNAME=ahsalem
var[4] = SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.1OZH8peqyC/Listeners
var[5] = HOME=/Users/ahsalem
var[6] = SHELL=/bin/zsh
var[7] = __CF_USER_TEXT_ENCODING=0x18D01:0x0:0x0
var[8] = TMPDIR=/var/folders/zz/zyxvpxvq6csfxvn_n000cd04003381/T/
var[9] = XPC_SERVICE_NAME=0
var[10] = XPC_FLAGS=0x0
var[11] = ORIGINAL_XDG_CURRENT_DESKTOP=undefined
var[12] = SHLVL=1
var[13] = PWD=/Users/ahsalem/projects/minishell/before_norm_version/minishell_code
var[14] = OLDPWD=/Users/ahsalem/projects/minishell/before_norm_version/minishell_code
var[15] = TERM_PROGRAM=vscode
var[16] = TERM_PROGRAM_VERSION=1.72.2
var[17] = LANG=en_US.UTF-8
var[18] = COLORTERM=truecolor
var[19] = GIT_ASKPASS=/goinfre/ahsalem/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass.sh
var[20] = VSCODE_GIT_ASKPASS_NODE=/goinfre/ahsalem/Visual Studio Code.app/Contents/Frameworks/Code Helper.app/Contents/MacOS/Code Helper
var[21] = VSCODE_GIT_ASKPASS_EXTRA_ARGS=--ms-enable-electron-run-as-node
var[22] = VSCODE_GIT_ASKPASS_MAIN=/goinfre/ahsalem/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass-main.js
var[23] = VSCODE_GIT_IPC_HANDLE=/var/folders/zz/zyxvpxvq6csfxvn_n000cd04003381/T/vscode-git-48beb9fdc6.sock
var[24] = VSCODE_INJECTION=1
var[25] = ZDOTDIR=/Users/ahsalem
var[26] = USER_ZDOTDIR=/Users/ahsalem
var[27] = TERM=xterm-256color
var[28] = _=/Users/ahsalem/projects/minishell/before_norm_version/minishell_code/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=h,flag=s, s.start = 0, s.end = 0
smasher loop 5=i,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echohi, start = 0, end = 5
~echohi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "
fetching end cmd[1 + 5] = < >, flag = "
fetching end cmd[1 + 6] = <h>, flag = "
fetching end cmd[1 + 7] = <i>, flag = "
end figur out end of quote <""echo hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "
end figur out end of quote <"echo" hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 2 no quote start,st = 0 en= 0


Case
s=0,e=0,i=5 
end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <ech"o" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <ech"o" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <ech"o" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <ech"o" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <ech"o" hi>, f=", st=0, en=0, i= 5
cas 2 no quote start,st = 0 en= 0


Case
s=0,e=0,i=5 
end figur out end of quote <ech"o" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=",flag=s, s.start = 0, s.end = 0
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <ec"ho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <ec"ho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <ec"ho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <ec"ho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <ec"ho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <ec"ho" hi>, f=", st=0, en=0, i= 5
cas 2 no quote start,st = 0 en= 0


Case
s=0,e=0,i=5 
end figur out end of quote <ec"ho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi>, f=", st=0, en=0, i= 5
cas 2 no quote start,st = 0 en= 0


Case
s=0,e=0,i=5 
end figur out end of quote <e"cho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "
end figur out end of quote <"echo" hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi>, f=", st=0, en=0, i= 5
cas 2 no quote start,st = 0 en= 0


Case
s=0,e=0,i=5 
end figur out end of quote <e"cho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
getting env vars
var[0] = USER=ahsalem
var[1] = MallocNanoZone=0
var[2] = PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/munki:/Applications/Visual Studio Code.app/Contents/Resources/app/bin:/Applications/Visual Studio Code.app/Contents/Resources/app/bin
var[3] = LOGNAME=ahsalem
var[4] = SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.1OZH8peqyC/Listeners
var[5] = HOME=/Users/ahsalem
var[6] = SHELL=/bin/zsh
var[7] = __CF_USER_TEXT_ENCODING=0x18D01:0x0:0x0
var[8] = TMPDIR=/var/folders/zz/zyxvpxvq6csfxvn_n000cd04003381/T/
var[9] = XPC_SERVICE_NAME=0
var[10] = XPC_FLAGS=0x0
var[11] = ORIGINAL_XDG_CURRENT_DESKTOP=undefined
var[12] = SHLVL=1
var[13] = PWD=/Users/ahsalem/projects/minishell/before_norm_version/minishell_code
var[14] = OLDPWD=/Users/ahsalem/projects/minishell/before_norm_version/minishell_code
var[15] = TERM_PROGRAM=vscode
var[16] = TERM_PROGRAM_VERSION=1.72.2
var[17] = LANG=en_US.UTF-8
var[18] = COLORTERM=truecolor
var[19] = GIT_ASKPASS=/goinfre/ahsalem/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass.sh
var[20] = VSCODE_GIT_ASKPASS_NODE=/goinfre/ahsalem/Visual Studio Code.app/Contents/Frameworks/Code Helper.app/Contents/MacOS/Code Helper
var[21] = VSCODE_GIT_ASKPASS_EXTRA_ARGS=--ms-enable-electron-run-as-node
var[22] = VSCODE_GIT_ASKPASS_MAIN=/goinfre/ahsalem/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass-main.js
var[23] = VSCODE_GIT_IPC_HANDLE=/var/folders/zz/zyxvpxvq6csfxvn_n000cd04003381/T/vscode-git-48beb9fdc6.sock
var[24] = VSCODE_INJECTION=1
var[25] = ZDOTDIR=/Users/ahsalem
var[26] = USER_ZDOTDIR=/Users/ahsalem
var[27] = TERM=xterm-256color
var[28] = _=/Users/ahsalem/projects/minishell/before_norm_version/minishell_code/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <ech"o" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <ech"o" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <ech"o" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <ech"o" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <ech"o" hi>, f=", st=0, en=0, i= 5
cas 2 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 
end figur out end of quote <ech"o" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"" >,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <"" >, start = 0 i = 1
Mul single and double quote
 cmd = <"" >, flag = ",strt=0,end=0,i=1
figur out end of quote <"" >, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] =   , start = 0, flag = "


Case 2
s=0,e=0,i=1 
fetching end cmd[1 + 1] = < >, flag = "
end figur out end of quote <"" >, f=", st=0, en=3, i= 2
filling node with ~ ~
~ ~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <"" hi>, start = 0 i = 1
Mul single and double quote
 cmd = <"" hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <"" hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] =   , start = 0, flag = "


Case 2
s=0,e=0,i=1 
fetching end cmd[1 + 1] = < >, flag = "
fetching end cmd[1 + 2] = <h>, flag = "
fetching end cmd[1 + 3] = <i>, flag = "
end figur out end of quote <"" hi>, f=", st=0, en=5, i= 4
filling node with ~ hi~
~ hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "
end figur out end of quote <"echo" hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "
fetching end cmd[1 + 5] = < >, flag = "
fetching end cmd[1 + 6] = <h>, flag = "
fetching end cmd[1 + 7] = <i>, flag = "
end figur out end of quote <""echo hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = no_proxy=*.local, 169.254/16
var[1] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[2] = HOSTNAME=a639ca32e83b
var[3] = SHLVL=1
var[4] = LD_LIBRARY_PATH=/usr/lib/debug
var[5] = HOME=/root
var[6] = OLDPWD=/home/vscode/src
var[7] = LESS=-R
var[8] = ZSH=/root/.oh-my-zsh
var[9] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[10] = PAGER=less
var[11] = LOGNAME=root
var[12] = _=/home/vscode/src/./mem_check.sh
var[13] = TERM=xterm
var[14] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[15] = GLIBCPP_FORCE_NEW=1
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = DEBIAN_FRONTEND=dialog
var[18] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[19] = PWD=/home/vscode/src
var[20] = GLIBCXX_FORCE_NEW=1
var[21] = LD_PRELOAD=/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so:/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "
fetching end cmd[1 + 5] = < >, flag = "
fetching end cmd[1 + 6] = <h>, flag = "
fetching end cmd[1 + 7] = <i>, flag = "
end figur out end of quote <""echo hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "
end figur out end of quote <"echo" hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=l,flag=s, s.start = 0, s.end = 0
smasher loop 2=e,flag=s, s.start = 0, s.end = 0
smasher loop 3=a,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = clear, start = 0, end = 4
~clear~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "
end figur out end of quote <"echo" hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi>, f=", st=0, en=0, i= 5
cas 2 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 
end figur out end of quote <e"cho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 2 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
end figur out end of quote <ech""o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <"ech"o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <"ech"o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <"ech"o hi>, f=", st=0, en=0, i= 4
calling case 2 Doesn't end with quote 
main cmd[4] = "  cmd[5] = o , start = 0, flag = "


Case 2
s=0,e=0,i=4 
fetching end cmd[4 + 1] = <o>, flag = "
fetching end cmd[4 + 2] = < >, flag = "
fetching end cmd[4 + 3] = <h>, flag = "
fetching end cmd[4 + 4] = <i>, flag = "
end figur out end of quote <"ech"o hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "
end figur out end of quote <"echo" hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "
fetching end cmd[1 + 5] = < >, flag = "
fetching end cmd[1 + 6] = <h>, flag = "
fetching end cmd[1 + 7] = <i>, flag = "
end figur out end of quote <""echo hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 2 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 
end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <ech"o" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <ech"o" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <ech"o" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <ech"o" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <ech"o" hi>, f=", st=0, en=0, i= 5
cas 2 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 
end figur out end of quote <ech"o" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"ch"o hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"ch"o hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <e"ch"o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <e"ch"o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <e"ch"o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <e"ch"o hi>, f=", st=0, en=0, i= 4
cas 2 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
end figur out end of quote <e"ch"o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 






smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"ch"o hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"ch"o hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <e"ch"o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <e"ch"o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <e"ch"o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <e"ch"o hi>, f=", st=0, en=0, i= 4
cas 2 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
end figur out end of quote <e"ch"o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 
reached end cmd[4 + 1] = <">, flag = " start = 0
end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0



Case 3
s=0,e=0,i=4 
reached end cmd[3 + 1] = <">, flag = " start = 0
end figur out end of quote <ech""o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 

reached end cmd[3 + 1] = <">, flag = " start = 0

end figur out end of quote <ech""o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 

reached end cmd[3 + 1] = <">, flag = " start = 0

end figur out end of quote <ech""o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 

reached end cmd[3 + 1] = <">, flag = " start = 0

end figur out end of quote <ech""o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 

reached end cmd[3 + 1] = <">, flag = " start = 0, quote_end = 1

end figur out end of quote <ech""o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 

reached end cmd[3 + 1] = <">, flag = " start = 0, quote_end = 1

end figur out end of quote <ech""o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 1] = <">, flag = "
fetching end cmd[3 + 2] = <o>, flag = "
fetching end cmd[3 + 3] = < >, flag = "
fetching end cmd[3 + 4] = <h>, flag = "
fetching end cmd[3 + 5] = <i>, flag = "

reached end cmd[3 + 6] = < >, flag = " start = 0, quote_end = 2

end figur out end of quote <ech""o hi>, f=", st=0, en=9, i= 9
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0, quote_end = 1

end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <ech"o" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <ech"o" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <ech"o" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <ech"o" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <ech"o" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0, quote_end = 0

end figur out end of quote <ech"o" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 1] = <">, flag = "
fetching end cmd[3 + 2] = <o>, flag = "
fetching end cmd[3 + 3] = < >, flag = "
fetching end cmd[3 + 4] = <h>, flag = "
fetching end cmd[3 + 5] = <i>, flag = "

reached end cmd[3 + 6] = < >, flag = " start = 0, quote_end = 2

end figur out end of quote <ech""o hi>, f=", st=0, en=9, i= 9
filling node with ~echo hi~
~echo hi~
joining env 





smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 1] = <">, flag = "
fetching end cmd[3 + 2] = <o>, flag = "
fetching end cmd[3 + 3] = < >, flag = "
fetching end cmd[3 + 4] = <h>, flag = "
fetching end cmd[3 + 5] = <i>, flag = "

reached end cmd[3 + 6] = < >, flag = " start = 0, quote_end = 2

end figur out end of quote <ech""o hi>, f=", st=0, en=9, i= 9
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <"" hi>, start = 0 i = 1
Mul single and double quote
 cmd = <"" hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <"" hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] =   , start = 0, flag = "


Case 2
s=0,e=0,i=1 
fetching end cmd[1 + 1] = < >, flag = "
fetching end cmd[1 + 2] = <h>, flag = "
fetching end cmd[1 + 3] = <i>, flag = "

reached end cmd[1 + 4] = < >, flag = " start = 0

end figur out end of quote <"" hi>, f=", st=0, en=5, i= 4
filling node with ~ hi~
~ hi~
joining env 
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 1] = <">, flag = "

reached end cmd[3 + 2] = <o>, flag = " start = 0, quote_end = 2

end figur out end of quote <ech""o hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=5
filling node with ~ech~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0, quote_end = 1

end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 1] = <">, flag = "
fetching end cmd[3 + 2] = <o>, flag = "
fetching end cmd[3 + 3] = < >, flag = "
fetching end cmd[3 + 4] = <h>, flag = "
fetching end cmd[3 + 5] = <i>, flag = "

reached end cmd[3 + 6] = < >, flag = " start = 0, quote_end = 2

end figur out end of quote <ech""o hi>, f=", st=0, en=9, i= 9
filling node with ~echo hi~
~echo hi~
joining env 
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 1] = <">, flag = "
fetching end cmd[3 + 2] = <o>, flag = "

reached end cmd[3 + 3] = < >, flag = " start = 0, quote_end = 2

end figur out end of quote <ech""o hi>, f=", st=0, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 7=h,flag=i, s.start = 0, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0, quote_end = 1

end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0, quote_end = 0

end figur out end of quote <e"cho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
~echo~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = no_proxy=*.local, 169.254/16
var[1] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[2] = HOSTNAME=a639ca32e83b
var[3] = SHLVL=1
var[4] = LD_LIBRARY_PATH=/usr/lib/debug
var[5] = HOME=/root
var[6] = OLDPWD=/home/vscode/src
var[7] = LESS=-R
var[8] = ZSH=/root/.oh-my-zsh
var[9] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[10] = PAGER=less
var[11] = LOGNAME=root
var[12] = _=/home/vscode/src/./mem_check.sh
var[13] = TERM=xterm
var[14] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[15] = GLIBCPP_FORCE_NEW=1
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = DEBIAN_FRONTEND=dialog
var[18] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[19] = PWD=/home/vscode/src
var[20] = GLIBCXX_FORCE_NEW=1
var[21] = LD_PRELOAD=/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so:/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0, quote_end = 0

end figur out end of quote <e"cho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0, quote_end = 1

end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 1] = <">, flag = "
fetching end cmd[3 + 2] = <o>, flag = "

reached end cmd[3 + 3] = < >, flag = " start = 0, quote_end = 2

end figur out end of quote <ech""o hi>, f=", st=0, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 7=h,flag=i, s.start = 0, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
getting env vars
var[0] = no_proxy=*.local, 169.254/16
var[1] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[2] = HOSTNAME=a639ca32e83b
var[3] = SHLVL=1
var[4] = LD_LIBRARY_PATH=/usr/lib/debug
var[5] = HOME=/root
var[6] = OLDPWD=/home/vscode/src
var[7] = LESS=-R
var[8] = ZSH=/root/.oh-my-zsh
var[9] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[10] = PAGER=less
var[11] = LOGNAME=root
var[12] = _=/home/vscode/src/./mem_check.sh
var[13] = TERM=xterm
var[14] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[15] = GLIBCPP_FORCE_NEW=1
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = DEBIAN_FRONTEND=dialog
var[18] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[19] = PWD=/home/vscode/src
var[20] = GLIBCXX_FORCE_NEW=1
var[21] = LD_PRELOAD=/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so:/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <e"cho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 1] = <">, flag = "
fetching end cmd[3 + 2] = <o>, flag = "

reached end cmd[3 + 3] = < >, flag = " start = 0

end figur out end of quote <ech""o hi>, f=", st=0, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 7=h,flag=i, s.start = 0, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=1,flag=s, s.start = 5, s.end = 0
smasher loop 6=",flag=s, s.start = 5, s.end = 0
smasher loop 7=2,flag=", s.start = 5, s.end = 0
" " arg = <echo 1"2"3>,cmd[7] = 2,  start = 5 i = 7, flag = "
smasher loop 8=",flag=", s.start = 5, s.end = 0
" " arg = <echo 1"2"3>,cmd[8] = ",  start = 5 i = 8, flag = "
before cleaning arg = <echo 1"2"3>, start = 5 i = 8
Mul single and double quote
 cmd = <echo 1"2"3>, flag = ",strt=5,end=0,i=8
figur out end of quote <echo 1"2"3>, f=", st=5, en=0, i= 8
cas 3 no quote start,st = 5 en= 0


Case 3
s=5,e=0,i=8 
fetching end cmd[8 + 1] = <3>, flag = "

reached end cmd[8 + 2] = < >, flag = " start = 5

end figur out end of quote <echo 1"2"3>, f=", st=5, en=10, i= 9
filling node with ~123~
~echo~
~123~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=1,flag=s, s.start = 5, s.end = 0
smasher loop 6=",flag=s, s.start = 5, s.end = 0
smasher loop 7=2,flag=", s.start = 5, s.end = 0
" " arg = <echo 1"2"3'4>,cmd[7] = 2,  start = 5 i = 7, flag = "
smasher loop 8=",flag=", s.start = 5, s.end = 0
" " arg = <echo 1"2"3'4>,cmd[8] = ",  start = 5 i = 8, flag = "
before cleaning arg = <echo 1"2"3'4>, start = 5 i = 8
Mul single and double quote
 cmd = <echo 1"2"3'4>, flag = ",strt=5,end=0,i=8
figur out end of quote <echo 1"2"3'4>, f=", st=5, en=0, i= 8
cas 3 no quote start,st = 5 en= 0


Case 3
s=5,e=0,i=8 
fetching end cmd[8 + 1] = <3>, flag = "

reached end cmd[8 + 2] = <'>, flag = " start = 5

end figur out end of quote <echo 1"2"3'4>, f=", st=5, en=10, i= 9
entering the source of all devil loop
Loop single and double quote gen
 cmd = <echo 1"2"3'4>, flag = " s 10 e 10 i 10
figur out end of quote <echo 1"2"3'4>, f=', st=10, en=10, i= 10
calling case 2 Doesn't end with quote 
main cmd[10] = '  cmd[11] = 4 , start = 10, flag = '


Case 2
s=10,e=10,i=10 
fetching end cmd[10 + 1] = <4>, flag = '

reached end cmd[10 + 2] = < >, flag = ' start = 10

splitted_arg = 4
end figur out end of quote <echo 1"2"3'4>, f=', st=10, en=12, i= 11
Exiting Multiple merged_str = <1234>, st=10, en=12
filling node with ~1234~
Will not visualize cmd this is an errored one
~echo~
~1234~
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
" " arg = <echo "2"3'4>,cmd[4] =  ,  start = 5 i = 4, flag = "
smasher loop 5=",flag=", s.start = 5, s.end = 0
" " arg = <echo "2"3'4>,cmd[5] = ",  start = 5 i = 5, flag = "
smasher loop 7=",flag=", s.start = 5, s.end = 0
" " arg = <echo "2"3'4>,cmd[7] = ",  start = 5 i = 7, flag = "
before cleaning arg = <echo "2"3'4>, start = 5 i = 7
Mul single and double quote
 cmd = <echo "2"3'4>, flag = ",strt=5,end=0,i=7
figur out end of quote <echo "2"3'4>, f=", st=5, en=0, i= 7
calling case 2 Doesn't end with quote 
main cmd[7] = "  cmd[8] = 3 , start = 5, flag = "


Case 2
s=5,e=0,i=7 
fetching end cmd[7 + 1] = <3>, flag = "

reached end cmd[7 + 2] = <'>, flag = " start = 5

end figur out end of quote <echo "2"3'4>, f=", st=5, en=9, i= 8
entering the source of all devil loop
Loop single and double quote gen
 cmd = <echo "2"3'4>, flag = " s 9 e 9 i 9
figur out end of quote <echo "2"3'4>, f=', st=9, en=9, i= 9
calling case 2 Doesn't end with quote 
main cmd[9] = '  cmd[10] = 4 , start = 9, flag = '


Case 2
s=9,e=9,i=9 
fetching end cmd[9 + 1] = <4>, flag = '

reached end cmd[9 + 2] = < >, flag = ' start = 9

splitted_arg = 4
end figur out end of quote <echo "2"3'4>, f=', st=9, en=11, i= 10
Exiting Multiple merged_str = <234>, st=9, en=11
filling node with ~234~
Will not visualize cmd this is an errored one
~echo~
~234~
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
" " arg = <echo "2"3'4'>,cmd[4] =  ,  start = 5 i = 4, flag = "
smasher loop 5=",flag=", s.start = 5, s.end = 0
" " arg = <echo "2"3'4'>,cmd[5] = ",  start = 5 i = 5, flag = "
smasher loop 7=",flag=", s.start = 5, s.end = 0
" " arg = <echo "2"3'4'>,cmd[7] = ",  start = 5 i = 7, flag = "
before cleaning arg = <echo "2"3'4'>, start = 5 i = 7
Mul single and double quote
 cmd = <echo "2"3'4'>, flag = ",strt=5,end=0,i=7
figur out end of quote <echo "2"3'4'>, f=", st=5, en=0, i= 7
calling case 2 Doesn't end with quote 
main cmd[7] = "  cmd[8] = 3 , start = 5, flag = "


Case 2
s=5,e=0,i=7 
fetching end cmd[7 + 1] = <3>, flag = "

reached end cmd[7 + 2] = <'>, flag = " start = 5

end figur out end of quote <echo "2"3'4'>, f=", st=5, en=9, i= 8
entering the source of all devil loop
Loop single and double quote gen
 cmd = <echo "2"3'4'>, flag = " s 9 e 9 i 9
figur out end of quote <echo "2"3'4'>, f=', st=9, en=9, i= 9
calling case 2 Doesn't end with quote 
main cmd[9] = '  cmd[10] = 4 , start = 9, flag = '


Case 2
s=9,e=9,i=9 
fetching end cmd[9 + 1] = <4>, flag = '

reached end cmd[9 + 2] = <'>, flag = ' start = 9

splitted_arg = 4
end figur out end of quote <echo "2"3'4'>, f=', st=9, en=11, i= 10
Loop single and double quote gen
 cmd = <echo "2"3'4'>, flag = " s 11 e 11 i 11
figur out end of quote <echo "2"3'4'>, f=', st=11, en=11, i= 11
calling case 1 filling normal quote  main cmd[11] = '  cmd[12] =   , start = 11, flag = '
Case 1 Filling normal quote, cmd = echo "2"3'4', start = 11, end = 11
final_arg before expand = , start = 11, end = 12
final_arg after filling normal case = , start = 11, end = 12
end figur out end of quote <echo "2"3'4'>, f=', st=11, en=12, i= 11
Exiting Multiple merged_str = <234>, st=11, en=12
filling node with ~234~
~echo~
~234~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=",flag=s, s.start = 5, s.end = 0
smasher loop 7=i,flag=", s.start = 5, s.end = 0
" " arg = <echo h"i">,cmd[7] = i,  start = 5 i = 7, flag = "
smasher loop 8=",flag=", s.start = 5, s.end = 0
" " arg = <echo h"i">,cmd[8] = ",  start = 5 i = 8, flag = "
before cleaning arg = <echo h"i">, start = 5 i = 8
Mul single and double quote
 cmd = <echo h"i">, flag = ",strt=5,end=0,i=8
figur out end of quote <echo h"i">, f=", st=5, en=0, i= 8
cas 3 no quote start,st = 5 en= 0


Case 3
s=5,e=0,i=8 

reached end cmd[8 + 1] = < >, flag = " start = 5

end figur out end of quote <echo h"i">, f=", st=5, en=9, i= 8
filling node with ~hi~
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=",flag=s, s.start = 5, s.end = 0
smasher loop 7=",flag=", s.start = 5, s.end = 0
" " arg = <echo h"">,cmd[7] = ",  start = 5 i = 7, flag = "
before cleaning arg = <echo h"">, start = 5 i = 7
Mul single and double quote
 cmd = <echo h"">, flag = ",strt=5,end=0,i=7
figur out end of quote <echo h"">, f=", st=5, en=0, i= 7
cas 3 no quote start,st = 5 en= 0


Case 3
s=5,e=0,i=7 

reached end cmd[7 + 1] = < >, flag = " start = 5

end figur out end of quote <echo h"">, f=", st=5, en=8, i= 7
filling node with ~h~
~echo~
~h~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=",flag=s, s.start = 5, s.end = 0
smasher loop 7=",flag=", s.start = 5, s.end = 0
" " arg = <echo h""i>,cmd[7] = ",  start = 5 i = 7, flag = "
before cleaning arg = <echo h""i>, start = 5 i = 7
Mul single and double quote
 cmd = <echo h""i>, flag = ",strt=5,end=0,i=7
figur out end of quote <echo h""i>, f=", st=5, en=0, i= 7
cas 3 no quote start,st = 5 en= 0


Case 3
s=5,e=0,i=7 
fetching end cmd[7 + 1] = <i>, flag = "

reached end cmd[7 + 2] = < >, flag = " start = 5

end figur out end of quote <echo h""i>, f=", st=5, en=9, i= 8
filling node with ~hi~
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=",flag=s, s.start = 5, s.end = 0
smasher loop 7=",flag=", s.start = 5, s.end = 0
" " arg = <echo h""i''>,cmd[7] = ",  start = 5 i = 7, flag = "
before cleaning arg = <echo h""i''>, start = 5 i = 7
Mul single and double quote
 cmd = <echo h""i''>, flag = ",strt=5,end=0,i=7
figur out end of quote <echo h""i''>, f=", st=5, en=0, i= 7
cas 3 no quote start,st = 5 en= 0


Case 3
s=5,e=0,i=7 
fetching end cmd[7 + 1] = <i>, flag = "

reached end cmd[7 + 2] = <'>, flag = " start = 5

end figur out end of quote <echo h""i''>, f=", st=5, en=9, i= 8
entering the source of all devil loop
Loop single and double quote gen
 cmd = <echo h""i''>, flag = " s 9 e 9 i 9
figur out end of quote <echo h""i''>, f=', st=9, en=9, i= 9
calling case 1 filling normal quote  main cmd[9] = '  cmd[10] = ' , start = 9, flag = '
Case 1 Filling normal quote, cmd = echo h""i'', start = 9, end = 9
final_arg before expand = , start = 9, end = 10
final_arg after filling normal case = , start = 9, end = 10
end figur out end of quote <echo h""i''>, f=', st=9, en=10, i= 9
Loop single and double quote gen
 cmd = <echo h""i''>, flag = " s 10 e 10 i 10
figur out end of quote <echo h""i''>, f=', st=10, en=10, i= 10
calling case 1 filling normal quote  main cmd[10] = '  cmd[11] =   , start = 10, flag = '
Case 1 Filling normal quote, cmd = echo h""i'', start = 10, end = 10
final_arg before expand = , start = 10, end = 11
final_arg after filling normal case = , start = 10, end = 11
end figur out end of quote <echo h""i''>, f=', st=10, en=11, i= 10
Exiting Multiple merged_str = <hi>, st=10, en=11
filling node with ~hi~
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=",flag=s, s.start = 5, s.end = 0
smasher loop 7=",flag=", s.start = 5, s.end = 0
" " arg = <echo h""i'd'>,cmd[7] = ",  start = 5 i = 7, flag = "
before cleaning arg = <echo h""i'd'>, start = 5 i = 7
Mul single and double quote
 cmd = <echo h""i'd'>, flag = ",strt=5,end=0,i=7
figur out end of quote <echo h""i'd'>, f=", st=5, en=0, i= 7
cas 3 no quote start,st = 5 en= 0


Case 3
s=5,e=0,i=7 
fetching end cmd[7 + 1] = <i>, flag = "

reached end cmd[7 + 2] = <'>, flag = " start = 5

end figur out end of quote <echo h""i'd'>, f=", st=5, en=9, i= 8
entering the source of all devil loop
Loop single and double quote gen
 cmd = <echo h""i'd'>, flag = " s 9 e 9 i 9
figur out end of quote <echo h""i'd'>, f=', st=9, en=9, i= 9
calling case 2 Doesn't end with quote 
main cmd[9] = '  cmd[10] = d , start = 9, flag = '


Case 2
s=9,e=9,i=9 
fetching end cmd[9 + 1] = <d>, flag = '

reached end cmd[9 + 2] = <'>, flag = ' start = 9

splitted_arg = d
end figur out end of quote <echo h""i'd'>, f=', st=9, en=11, i= 10
Loop single and double quote gen
 cmd = <echo h""i'd'>, flag = " s 11 e 11 i 11
figur out end of quote <echo h""i'd'>, f=', st=11, en=11, i= 11
calling case 1 filling normal quote  main cmd[11] = '  cmd[12] =   , start = 11, flag = '
Case 1 Filling normal quote, cmd = echo h""i'd', start = 11, end = 11
final_arg before expand = , start = 11, end = 12
final_arg after filling normal case = , start = 11, end = 12
end figur out end of quote <echo h""i'd'>, f=', st=11, en=12, i= 11
Exiting Multiple merged_str = <hid>, st=11, en=12
filling node with ~hid~
~echo~
~hid~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=1a1901a3db3e
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = no_proxy=*.local, 169.254/16
var[1] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[2] = HOSTNAME=1a1901a3db3e
var[3] = SHLVL=1
var[4] = LD_LIBRARY_PATH=/usr/lib/debug
var[5] = HOME=/root
var[6] = OLDPWD=/home/vscode/src/pro_parsing
var[7] = LESS=-R
var[8] = ZSH=/root/.oh-my-zsh
var[9] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[10] = PAGER=less
var[11] = LOGNAME=root
var[12] = _=/home/vscode/src/./mem_check.sh
var[13] = TERM=xterm
var[14] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[15] = GLIBCPP_FORCE_NEW=1
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = DEBIAN_FRONTEND=dialog
var[18] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[19] = PWD=/home/vscode/src
var[20] = GLIBCXX_FORCE_NEW=1
var[21] = LD_PRELOAD=/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so:/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <e"cho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 2] = <o>, flag = "

reached end cmd[3 + 3] = < >, flag = " start = 0

end figur out end of quote <ech""o hi>, f=", st=0, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 7=h,flag=i, s.start = 0, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=1a1901a3db3e
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src/pro_parsing
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 2] = <o>, flag = "

reached end cmd[3 + 3] = < >, flag = " start = 0

end figur out end of quote <ech""o hi>, f=", st=0, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 7=h,flag=i, s.start = 0, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <e"cho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = USER=ahsalem
var[1] = MallocNanoZone=0
var[2] = PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/munki:/Applications/Visual Studio Code.app/Contents/Resources/app/bin:/Applications/Visual Studio Code.app/Contents/Resources/app/bin
var[3] = LOGNAME=ahsalem
var[4] = SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.1OZH8peqyC/Listeners
var[5] = HOME=/Users/ahsalem
var[6] = SHELL=/bin/zsh
var[7] = __CF_USER_TEXT_ENCODING=0x18D01:0x0:0x0
var[8] = TMPDIR=/var/folders/zz/zyxvpxvq6csfxvn_n000cd04003381/T/
var[9] = XPC_SERVICE_NAME=0
var[10] = XPC_FLAGS=0x0
var[11] = ORIGINAL_XDG_CURRENT_DESKTOP=undefined
var[12] = SHLVL=1
var[13] = PWD=/Users/ahsalem/projects/minishell/before_norm_version/minishell_code
var[14] = OLDPWD=/Users/ahsalem/projects/minishell/before_norm_version/minishell_code/pro_parsing
var[15] = TERM_PROGRAM=vscode
var[16] = TERM_PROGRAM_VERSION=1.72.2
var[17] = LANG=en_US.UTF-8
var[18] = COLORTERM=truecolor
var[19] = GIT_ASKPASS=/goinfre/ahsalem/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass.sh
var[20] = VSCODE_GIT_ASKPASS_NODE=/goinfre/ahsalem/Visual Studio Code.app/Contents/Frameworks/Code Helper.app/Contents/MacOS/Code Helper
var[21] = VSCODE_GIT_ASKPASS_EXTRA_ARGS=--ms-enable-electron-run-as-node
var[22] = VSCODE_GIT_ASKPASS_MAIN=/goinfre/ahsalem/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass-main.js
var[23] = VSCODE_GIT_IPC_HANDLE=/var/folders/zz/zyxvpxvq6csfxvn_n000cd04003381/T/vscode-git-48beb9fdc6.sock
var[24] = VSCODE_INJECTION=1
var[25] = ZDOTDIR=/Users/ahsalem
var[26] = USER_ZDOTDIR=/Users/ahsalem
var[27] = TERM=xterm-256color
var[28] = _=/Users/ahsalem/projects/minishell/before_norm_version/minishell_code/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=2e2d00576103
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "

reached end cmd[5 + 4] = < >, flag = " start = 0

end figur out end of quote <"echo" hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=2e2d00576103
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 4
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" hi>, flag = " s 5 e 5 i 5
figur out end of quote <"echo" hi>, f=", st=5, en=5, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 5, flag = "


Case 2
s=5,e=5,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "

reached end cmd[5 + 4] = < >, flag = " start = 5

end figur out end of quote <"echo" hi>, f=", st=5, en=9, i= 8
Exiting Multiple merged_str = <echo hi>, st=5, en=9
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 4
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" hi>, flag = " s 5 e 5 i 5
figur out end of quote <"echo" hi>, f=", st=5, en=5, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 5, flag = "


Case 2
s=5,e=5,i=5 
after decrement s=5,e=5,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "

reached end cmd[5 + 4] = < >, flag = " start = 5

end figur out end of quote <"echo" hi>, f=", st=5, en=9, i= 8
Exiting Multiple merged_str = <echo hi>, st=5, en=9
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 4
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" hi>, flag = " s 5 e 5 i 5
figur out end of quote <"echo" hi>, f=", st=5, en=5, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 5, flag = "


Case 2
s=5,e=5,i=5 
after decrement s=5,e=5,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "

reached end cmd[5 + 4] = < >, flag = " start = 5

end figur out end of quote <"echo" hi>, f=", st=5, en=9, i= 8
Exiting Multiple merged_str = <echo hi>, st=5, en=9
filling node with ~echo hi~
~echo hi~
joining env 



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0

Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 4
final_arg before expand = ech, start = 0, end = 4
final_arg after filling normal case = ech, start = 0, end = 4
end figur out end of quote <"echo" hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" hi>, flag = " s 5 e 4 i 5
figur out end of quote <"echo" hi>, f=", st=5, en=4, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 5, flag = "


Case 2
s=5,e=4,i=5 
after decrement s=5,e=4,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "

reached end cmd[5 + 4] = < >, flag = " start = 5

end figur out end of quote <"echo" hi>, f=", st=5, en=9, i= 8
Exiting Multiple merged_str = <ech hi>, st=5, en=9
filling node with ~ech hi~
~ech hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0

Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 4
final_arg before expand = ech, start = 0, end = 4
final_arg after filling normal case = ech, start = 0, end = 4
end figur out end of quote <"echo" hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" hi>, flag = " s 5 e 4 i 5
figur out end of quote <"echo" hi>, f=", st=5, en=4, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 5, flag = "


Case 2
s=5,e=4,i=5 
after decrement s=5,e=4,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "

reached end cmd[5 + 4] = < >, flag = " start = 5

end figur out end of quote <"echo" hi>, f=", st=5, en=9, i= 8
Exiting Multiple merged_str = <ech hi>, st=5, en=9
filling node with ~ech hi~
~ech hi~
joining env 



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 4
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" hi>, flag = " s 5 e 5 i 5
figur out end of quote <"echo" hi>, f=", st=5, en=5, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 5, flag = "


Case 2
s=5,e=5,i=5 
after decrement s=5,e=5,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "

reached end cmd[5 + 4] = < >, flag = " start = 5

end figur out end of quote <"echo" hi>, f=", st=5, en=9, i= 8
Exiting Multiple merged_str = <echo hi>, st=5, en=9
filling node with ~echo hi~
~echo hi~
joining env 









smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 4
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" hi>, flag = " s 5 e 5 i 5
figur out end of quote <"echo" hi>, f=", st=5, en=5, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 5, flag = "


Case 2
s=5,e=5,i=5 
after decrement s=5,e=5,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "

reached end cmd[5 + 4] = < >, flag = " start = 5

end figur out end of quote <"echo" hi>, f=", st=5, en=9, i= 8
Exiting Multiple merged_str = <echo hi>, st=5, en=9
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0

forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 4
final_arg before expand = ech, start = 0, end = 4
final_arg after filling normal case = ech, start = 0, end = 4
end figur out end of quote <"echo" hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" hi>, flag = " s 5 e 4 i 5
figur out end of quote <"echo" hi>, f=", st=5, en=4, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 5, flag = "


Case 2
s=5,e=4,i=5 
after decrement s=5,e=4,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "

reached end cmd[5 + 4] = < >, flag = " start = 5

end figur out end of quote <"echo" hi>, f=", st=5, en=9, i= 8
Exiting Multiple merged_str = <ech hi>, st=5, en=9
filling node with ~ech hi~
~ech hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0

forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"">,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <"">, start = 0 i = 1
Mul single and double quote
 cmd = <"">, flag = ",strt=0,end=0,i=1
figur out end of quote <"">, f=", st=0, en=0, i= 1
calling case 1 filling normal quote  main cmd[1] = "  cmd[2] =   , start = 0, flag = "
Case 1 Filling normal quote, cmd = "", start = 0, end = 1
final_arg before expand = , start = 0, end = 1
final_arg after filling normal case = , start = 0, end = 1
end figur out end of quote <"">, f=", st=0, en=1, i= 1
filling node with ~~
~~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <" ">,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=",flag=", s.start = 0, s.end = 0
" " arg = <" ">,cmd[2] = ",  start = 0 i = 2, flag = "
before cleaning arg = <" ">, start = 0 i = 2
Mul single and double quote
 cmd = <" ">, flag = ",strt=0,end=0,i=2
figur out end of quote <" ">, f=", st=0, en=0, i= 2
calling case 1 filling normal quote  main cmd[2] = "  cmd[3] =   , start = 0, flag = "
Case 1 Filling normal quote, cmd = " ", start = 0, end = 2
final_arg before expand =  , start = 0, end = 2
final_arg after filling normal case =  , start = 0, end = 2
end figur out end of quote <" ">, f=", st=0, en=2, i= 2
filling node with ~ ~
~ ~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <" " >,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=",flag=", s.start = 0, s.end = 0
" " arg = <" " >,cmd[2] = ",  start = 0 i = 2, flag = "
before cleaning arg = <" " >, start = 0 i = 2
Mul single and double quote
 cmd = <" " >, flag = ",strt=0,end=0,i=2
figur out end of quote <" " >, f=", st=0, en=0, i= 2
calling case 2 Doesn't end with quote 
main cmd[2] = "  cmd[3] =   , start = 0, flag = "


Case 2
s=0,e=0,i=2 
after decrement s=0,e=0,i=1 

reached end cmd[1 + 1] = <">, flag = " start = 0

forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = " " , start = 0, end = 2
final_arg before expand =  , start = 0, end = 2
final_arg after filling normal case =  , start = 0, end = 2
end figur out end of quote <" " >, f=", st=0, en=2, i= 2
entering the source of all devil loop
Exiting Multiple merged_str = < >, st=0, en=2
filling node with ~ ~
smasher loop 3= ,flag=i, s.start = 0, s.end = 0
~ ~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi >,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi >,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi >,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi >,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi >,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi >, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi >, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi >, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0

forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "echo" hi , start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi >, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 0
~echo~
~hi~
joining env 
smasher loop 0= ,flag=i, s.start = 0, s.end = 0
" " arg = < "">,cmd[0] =  ,  start = 1 i = 0, flag = "
smasher loop 1=",flag=", s.start = 1, s.end = 0
" " arg = < "">,cmd[1] = ",  start = 1 i = 1, flag = "
before cleaning arg = < "">, start = 1 i = 2
Mul single and double quote
 cmd = < "">, flag = ",strt=1,end=0,i=2
figur out end of quote < "">, f=", st=1, en=0, i= 2
calling case 1 filling normal quote  main cmd[2] = "  cmd[3] =   , start = 1, flag = "
Case 1 Filling normal quote, cmd =  "", start = 1, end = 2
final_arg before expand = , start = 1, end = 2
final_arg after filling normal case = , start = 1, end = 2
end figur out end of quote < "">, f=", st=1, en=2, i= 2
filling node with ~~
~~
joining env 
smasher loop 0= ,flag=i, s.start = 0, s.end = 0
" " arg = < " ">,cmd[0] =  ,  start = 1 i = 0, flag = "
smasher loop 1=",flag=", s.start = 1, s.end = 0
" " arg = < " ">,cmd[1] = ",  start = 1 i = 1, flag = "
smasher loop 3=",flag=", s.start = 1, s.end = 0
" " arg = < " ">,cmd[3] = ",  start = 1 i = 3, flag = "
before cleaning arg = < " ">, start = 1 i = 3
Mul single and double quote
 cmd = < " ">, flag = ",strt=1,end=0,i=3
figur out end of quote < " ">, f=", st=1, en=0, i= 3
calling case 1 filling normal quote  main cmd[3] = "  cmd[4] =   , start = 1, flag = "
Case 1 Filling normal quote, cmd =  " ", start = 1, end = 3
final_arg before expand =  , start = 1, end = 3
final_arg after filling normal case =  , start = 1, end = 3
end figur out end of quote < " ">, f=", st=1, en=3, i= 3
filling node with ~ ~
~ ~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ec"ho hi >,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi >,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=",flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi >,cmd[3] = ",  start = 0 i = 3, flag = "
before cleaning arg = <"ec"ho hi >, start = 0 i = 3
Mul single and double quote
 cmd = <"ec"ho hi >, flag = ",strt=0,end=0,i=3
figur out end of quote <"ec"ho hi >, f=", st=0, en=0, i= 3
calling case 2 Doesn't end with quote 
main cmd[3] = "  cmd[4] = h , start = 0, flag = "


Case 2
s=0,e=0,i=3 
after decrement s=0,e=0,i=2 

reached end cmd[2 + 1] = <">, flag = " start = 0

forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "ec"ho hi , start = 0, end = 3
final_arg before expand = ec, start = 0, end = 3
final_arg after filling normal case = ec, start = 0, end = 3
end figur out end of quote <"ec"ho hi >, f=", st=0, en=3, i= 3
entering the source of all devil loop
Exiting Multiple merged_str = <ec>, st=0, en=3
filling node with ~ec~
smasher loop 4=h,flag=i, s.start = 0, s.end = 0
smasher loop 5=o,flag=s, s.start = 4, s.end = 0
space_smash, smashed_arg = ho, start = 4, end = 5
smasher loop 6= ,flag=i, s.start = 4, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 0
~ec~
~ho~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
smasher loop 3=i,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exti, start = 0, end = 3
~exti~
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=.,flag=i, s.start = 0, s.end = 0
smasher loop 1=/,flag=s, s.start = 0, s.end = 0
smasher loop 2=m,flag=s, s.start = 0, s.end = 0
smasher loop 3=i,flag=s, s.start = 0, s.end = 0
smasher loop 4=n,flag=s, s.start = 0, s.end = 0
smasher loop 5=i,flag=s, s.start = 0, s.end = 0
smasher loop 6=s,flag=s, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 0, s.end = 0
smasher loop 8=e,flag=s, s.start = 0, s.end = 0
smasher loop 9=l,flag=s, s.start = 0, s.end = 0
smasher loop 10=l,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ./minishell, start = 0, end = 10
~./minishell~
joining env 



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <"ech"o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <"ech"o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <"ech"o hi>, f=", st=0, en=0, i= 4
calling case 2 Doesn't end with quote 
main cmd[4] = "  cmd[5] = o , start = 0, flag = "


Case 2
s=0,e=0,i=4 
after decrement s=0,e=0,i=3 

reached end cmd[3 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "ech"o hi, start = 0, end = 4
final_arg before expand = ech, start = 0, end = 4
final_arg after filling normal case = ech, start = 0, end = 4
end figur out end of quote <"ech"o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 







smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <"ech"o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <"ech"o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <"ech"o hi>, f=", st=0, en=0, i= 4
calling case 2 Doesn't end with quote 
main cmd[4] = "  cmd[5] = o , start = 0, flag = "


Case 2
s=0,e=0,i=4 
after decrement s=0,e=0,i=3 

reached end cmd[3 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "ech"o hi, start = 0, end = 4
final_arg before expand = ech, start = 0, end = 4
final_arg after filling normal case = ech, start = 0, end = 4
end figur out end of quote <"ech"o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=",flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[3] = ",  start = 0 i = 3, flag = "
before cleaning arg = <"ec"ho hi>, start = 0 i = 3
Mul single and double quote
 cmd = <"ec"ho hi>, flag = ",strt=0,end=0,i=3
figur out end of quote <"ec"ho hi>, f=", st=0, en=0, i= 3
calling case 2 Doesn't end with quote 
main cmd[3] = "  cmd[4] = h , start = 0, flag = "


Case 2
s=0,e=0,i=3 
after decrement s=0,e=0,i=2 

reached end cmd[2 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "ec"ho hi, start = 0, end = 3
final_arg before expand = ec, start = 0, end = 3
final_arg after filling normal case = ec, start = 0, end = 3
end figur out end of quote <"ec"ho hi>, f=", st=0, en=3, i= 3
entering the source of all devil loop
Exiting Multiple merged_str = <ec>, st=0, en=3
filling node with ~ec~
smasher loop 4=h,flag=i, s.start = 0, s.end = 0
smasher loop 5=o,flag=s, s.start = 4, s.end = 0
space_smash, smashed_arg = ho, start = 4, end = 5
smasher loop 6= ,flag=i, s.start = 4, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ec~
~ho~
~hi~
joining env 









smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=",flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[3] = ",  start = 0 i = 3, flag = "
before cleaning arg = <"ec"ho hi>, start = 0 i = 3
Mul single and double quote
 cmd = <"ec"ho hi>, flag = ",strt=0,end=0,i=3
figur out end of quote <"ec"ho hi>, f=", st=0, en=0, i= 3
calling case 2 Doesn't end with quote 
main cmd[3] = "  cmd[4] = h , start = 0, flag = "


Case 2
s=0,e=0,i=3 
after decrement s=0,e=0,i=2 

reached end cmd[2 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "ec"ho hi, start = 0, end = 3
final_arg before expand = ec, start = 0, end = 3
final_arg after filling normal case = ec, start = 0, end = 3
end figur out end of quote <"ec"ho hi>, f=", st=0, en=3, i= 3
entering the source of all devil loop
Exiting Multiple merged_str = <ec>, st=0, en=3
filling node with ~ec~
smasher loop 4=h,flag=i, s.start = 0, s.end = 0
smasher loop 5=o,flag=s, s.start = 4, s.end = 0
space_smash, smashed_arg = ho, start = 4, end = 5
smasher loop 6= ,flag=i, s.start = 4, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ec~
~ho~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~





smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=",flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[3] = ",  start = 0 i = 3, flag = "
before cleaning arg = <"ec"ho hi>, start = 0 i = 3
Mul single and double quote
 cmd = <"ec"ho hi>, flag = ",strt=0,end=0,i=3
figur out end of quote <"ec"ho hi>, f=", st=0, en=0, i= 3
calling case 2 Doesn't end with quote 
main cmd[3] = "  cmd[4] = h , start = 0, flag = "


Case 2
s=0,e=0,i=3 
after decrement s=0,e=0,i=2 

reached end cmd[2 + 1] = <">, flag = " start = 0

end figur out end of quote <"ec"ho hi>, f=", st=0, en=3, i= 2
entering the source of all devil loop
Loop single double quote gen
 cmd = <"ec"ho hi>, flag = " s 3 e 3 i 3
figur out end of quote <"ec"ho hi>, f=", st=3, en=3, i= 3
calling case 2 Doesn't end with quote 
main cmd[3] = "  cmd[4] = h , start = 3, flag = "


Case 2
s=3,e=3,i=3 
after decrement s=3,e=3,i=3 
fetching end cmd[3 + 1] = <h>, flag = "
fetching end cmd[3 + 2] = <o>, flag = "
fetching end cmd[3 + 3] = < >, flag = "
fetching end cmd[3 + 4] = <h>, flag = "
fetching end cmd[3 + 5] = <i>, flag = "

reached end cmd[3 + 6] = < >, flag = " start = 3

end figur out end of quote <"ec"ho hi>, f=", st=3, en=9, i= 8
Exiting Multiple merged_str = <echo hi>, st=3, en=9
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~





smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = ""echo, start = 0, end = 1
final_arg before expand = , start = 0, end = 1
final_arg after filling normal case = , start = 0, end = 1
end figur out end of quote <""echo>, f=", st=0, en=1, i= 1
entering the source of all devil loop
Exiting Multiple merged_str = <>, st=0, en=1
filling node with ~~
smasher loop 2=e,flag=i, s.start = 0, s.end = 0
smasher loop 3=c,flag=s, s.start = 2, s.end = 0
smasher loop 4=h,flag=s, s.start = 2, s.end = 0
smasher loop 5=o,flag=s, s.start = 2, s.end = 0
space_smash, smashed_arg = echo, start = 2, end = 5
~~
~echo~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=",flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[3] = ",  start = 0 i = 3, flag = "
before cleaning arg = <"ec"ho hi>, start = 0 i = 3
Mul single and double quote
 cmd = <"ec"ho hi>, flag = ",strt=0,end=0,i=3
figur out end of quote <"ec"ho hi>, f=", st=0, en=0, i= 3
calling case 2 Doesn't end with quote 
main cmd[3] = "  cmd[4] = h , start = 0, flag = "


Case 2
s=0,e=0,i=3 
after decrement s=0,e=0,i=2 

reached end cmd[2 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "ec"ho hi, start = 0, end = 3
final_arg before expand = ec, start = 0, end = 3
final_arg after filling normal case = ec, start = 0, end = 3
end figur out end of quote <"ec"ho hi>, f=", st=0, en=3, i= 3
entering the source of all devil loop
Exiting Multiple merged_str = <ec>, st=0, en=3
filling node with ~ec~
smasher loop 4=h,flag=i, s.start = 0, s.end = 0
smasher loop 5=o,flag=s, s.start = 4, s.end = 0
space_smash, smashed_arg = ho, start = 4, end = 5
smasher loop 6= ,flag=i, s.start = 4, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ec~
~ho~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = ""echo hi, start = 0, end = 1
final_arg before expand = , start = 0, end = 1
final_arg after filling normal case = , start = 0, end = 1
end figur out end of quote <""echo hi>, f=", st=0, en=1, i= 1
entering the source of all devil loop
Exiting Multiple merged_str = <>, st=0, en=1
filling node with ~~
smasher loop 2=e,flag=i, s.start = 0, s.end = 0
smasher loop 3=c,flag=s, s.start = 2, s.end = 0
smasher loop 4=h,flag=s, s.start = 2, s.end = 0
smasher loop 5=o,flag=s, s.start = 2, s.end = 0
space_smash, smashed_arg = echo, start = 2, end = 5
smasher loop 6= ,flag=i, s.start = 2, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~~
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <"ech"o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <"ech"o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <"ech"o hi>, f=", st=0, en=0, i= 4
calling case 2 Doesn't end with quote 
main cmd[4] = "  cmd[5] = o , start = 0, flag = "


Case 2
s=0,e=0,i=4 
after decrement s=0,e=0,i=3 

reached end cmd[3 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[4 + 1] = <o>, flag = "
fetching end cmd[4 + 2] = < >, flag = "
fetching end cmd[4 + 3] = <h>, flag = "
fetching end cmd[4 + 4] = <i>, flag = "

reached end cmd[4 + 5] = < >, flag = " start = 0


special_special_case 2
s=0,e=9,i=8 
end figur out end of quote <"ech"o hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "
fetching end cmd[1 + 5] = < >, flag = "
fetching end cmd[1 + 6] = <h>, flag = "
fetching end cmd[1 + 7] = <i>, flag = "

reached end cmd[1 + 8] = < >, flag = " start = 0


special_special_case 2
s=0,e=9,i=8 
end figur out end of quote <""echo hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "
fetching end cmd[1 + 5] = < >, flag = "
fetching end cmd[1 + 6] = <h>, flag = "
fetching end cmd[1 + 7] = <i>, flag = "

reached end cmd[1 + 8] = < >, flag = " start = 0


special_special_case 2
s=0,e=9,i=8 
end figur out end of quote <""echo hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "
fetching end cmd[1 + 5] = < >, flag = "
fetching end cmd[1 + 6] = <h>, flag = "
fetching end cmd[1 + 7] = <i>, flag = "

reached end cmd[1 + 8] = < >, flag = " start = 0


special_special_case 2
s=0,e=9,i=8 
end figur out end of quote <""echo hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "
fetching end cmd[1 + 5] = < >, flag = "
fetching end cmd[1 + 6] = <h>, flag = "
fetching end cmd[1 + 7] = <i>, flag = "

reached end cmd[1 + 8] = < >, flag = " start = 0


special_special_case 2
s=0,e=9,i=8 
end figur out end of quote <""echo hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=E,flag=i, s.start = 0, s.end = 0
smasher loop 1=C,flag=s, s.start = 0, s.end = 0
smasher loop 2=H,flag=s, s.start = 0, s.end = 0
smasher loop 3=O,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ECHO, start = 0, end = 3
~ECHO~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"">,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <"">, start = 0 i = 1
Mul single and double quote
 cmd = <"">, flag = ",strt=0,end=0,i=1
figur out end of quote <"">, f=", st=0, en=0, i= 1
calling case 1 filling normal quote  main cmd[1] = "  cmd[2] =   , start = 0, flag = "
Case 1 Filling normal quote, cmd = "", start = 0, end = 1
final_arg before expand = , start = 0, end = 1
final_arg after filling normal case = , start = 0, end = 1
end figur out end of quote <"">, f=", st=0, en=1, i= 1
filling node with ~~
~~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"" >,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <"" >, start = 0 i = 1
Mul single and double quote
 cmd = <"" >, flag = ",strt=0,end=0,i=1
figur out end of quote <"" >, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] =   , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "" , start = 0, end = 1
final_arg before expand = , start = 0, end = 1
final_arg after filling normal case = , start = 0, end = 1
end figur out end of quote <"" >, f=", st=0, en=1, i= 1
entering the source of all devil loop
Exiting Multiple merged_str = <>, st=0, en=1
filling node with ~~
smasher loop 2= ,flag=i, s.start = 0, s.end = 0
~~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <"" hi>, start = 0 i = 1
Mul single and double quote
 cmd = <"" hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <"" hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] =   , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "" hi, start = 0, end = 1
final_arg before expand = , start = 0, end = 1
final_arg after filling normal case = , start = 0, end = 1
end figur out end of quote <"" hi>, f=", st=0, en=1, i= 1
entering the source of all devil loop
Exiting Multiple merged_str = <>, st=0, en=1
filling node with ~~
smasher loop 2= ,flag=i, s.start = 0, s.end = 0
smasher loop 3=h,flag=s, s.start = 3, s.end = 0
smasher loop 4=i,flag=s, s.start = 3, s.end = 0
space_smash, smashed_arg = hi, start = 3, end = 4
~~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "
fetching end cmd[1 + 5] = < >, flag = "
fetching end cmd[1 + 6] = <h>, flag = "
fetching end cmd[1 + 7] = <i>, flag = "

reached end cmd[1 + 8] = < >, flag = " start = 0


special_special_case 2
s=0,e=9,i=8 
end figur out end of quote <""echo hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <"ech"o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <"ech"o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <"ech"o hi>, f=", st=0, en=0, i= 4
calling case 2 Doesn't end with quote 
main cmd[4] = "  cmd[5] = o , start = 0, flag = "


Case 2
s=0,e=0,i=4 
after decrement s=0,e=0,i=3 

reached end cmd[3 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[4 + 1] = <o>, flag = "
fetching end cmd[4 + 2] = < >, flag = "
fetching end cmd[4 + 3] = <h>, flag = "
fetching end cmd[4 + 4] = <i>, flag = "

reached end cmd[4 + 5] = < >, flag = " start = 0


special_special_case 2
s=0,e=9,i=8 
end figur out end of quote <"ech"o hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 







""smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 




smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <"ech"o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <"ech"o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <"ech"o hi>, f=", st=0, en=0, i= 4
calling case 2 Doesn't end with quote 
main cmd[4] = "  cmd[5] = o , start = 0, flag = "


Case 2
s=0,e=0,i=4 
after decrement s=0,e=0,i=3 

reached end cmd[3 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[4 + 1] = <o>, flag = "
fetching end cmd[4 + 2] = < >, flag = "
fetching end cmd[4 + 3] = <h>, flag = "
fetching end cmd[4 + 4] = <i>, flag = "

reached end cmd[4 + 5] = < >, flag = " start = 0


special_special_case 2
s=0,e=9,i=8 
end figur out end of quote <"ech"o hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 




smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"12"4 hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=2,flag=", s.start = 0, s.end = 0
" " arg = <"12"4 hi>,cmd[2] = 2,  start = 0 i = 2, flag = "
smasher loop 3=",flag=", s.start = 0, s.end = 0
" " arg = <"12"4 hi>,cmd[3] = ",  start = 0 i = 3, flag = "
before cleaning arg = <"12"4 hi>, start = 0 i = 3
Mul single and double quote
 cmd = <"12"4 hi>, flag = ",strt=0,end=0,i=3
figur out end of quote <"12"4 hi>, f=", st=0, en=0, i= 3
calling case 2 Doesn't end with quote 
main cmd[3] = "  cmd[4] = 4 , start = 0, flag = "


Case 2
s=0,e=0,i=3 
after decrement s=0,e=0,i=2 

reached end cmd[2 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[3 + 1] = <4>, flag = "
fetching end cmd[3 + 2] = < >, flag = "
fetching end cmd[3 + 3] = <h>, flag = "
fetching end cmd[3 + 4] = <i>, flag = "

reached end cmd[3 + 5] = < >, flag = " start = 0


special_special_case 2
s=0,e=8,i=7 
end figur out end of quote <"12"4 hi>, f=", st=0, en=8, i= 7
filling node with ~124 hi~
~124 hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 


smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "

reached end cmd[1 + 5] = < >, flag = " start = 0


special_special_case 2
s=0,e=6,i=5 
end figur out end of quote <""echo hi>, f=", st=0, en=6, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=",flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[3] = ",  start = 0 i = 3, flag = "
before cleaning arg = <"ec"ho hi>, start = 0 i = 3
Mul single and double quote
 cmd = <"ec"ho hi>, flag = ",strt=0,end=0,i=3
figur out end of quote <"ec"ho hi>, f=", st=0, en=0, i= 3
calling case 2 Doesn't end with quote 
main cmd[3] = "  cmd[4] = h , start = 0, flag = "


Case 2
s=0,e=0,i=3 
after decrement s=0,e=0,i=2 

reached end cmd[2 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[3 + 1] = <h>, flag = "
fetching end cmd[3 + 2] = <o>, flag = "

reached end cmd[3 + 3] = < >, flag = " start = 0


special_special_case 2
s=0,e=6,i=5 
end figur out end of quote <"ec"ho hi>, f=", st=0, en=6, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <"ech"o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <"ech"o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <"ech"o hi>, f=", st=0, en=0, i= 4
calling case 2 Doesn't end with quote 
main cmd[4] = "  cmd[5] = o , start = 0, flag = "


Case 2
s=0,e=0,i=4 
after decrement s=0,e=0,i=3 

reached end cmd[3 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[4 + 1] = <o>, flag = "

reached end cmd[4 + 2] = < >, flag = " start = 0


special_special_case 2
s=0,e=6,i=5 
end figur out end of quote <"ech"o hi>, f=", st=0, en=6, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "

reached end cmd[1 + 5] = < >, flag = " start = 0


special_special_case 2
s=0,e=6,i=5 
end figur out end of quote <""echo hi>, f=", st=0, en=6, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=e,flag=", s.start = 0, s.end = 0
" " arg = <e"echo" hi>,cmd[2] = e,  start = 0 i = 2, flag = "
smasher loop 3=c,flag=", s.start = 0, s.end = 0
" " arg = <e"echo" hi>,cmd[3] = c,  start = 0 i = 3, flag = "
smasher loop 4=h,flag=", s.start = 0, s.end = 0
" " arg = <e"echo" hi>,cmd[4] = h,  start = 0 i = 4, flag = "
smasher loop 5=o,flag=", s.start = 0, s.end = 0
" " arg = <e"echo" hi>,cmd[5] = o,  start = 0 i = 5, flag = "
smasher loop 6=",flag=", s.start = 0, s.end = 0
" " arg = <e"echo" hi>,cmd[6] = ",  start = 0 i = 6, flag = "
before cleaning arg = <e"echo" hi>, start = 0 i = 6
Mul single and double quote
 cmd = <e"echo" hi>, flag = ",strt=0,end=0,i=6
figur out end of quote <e"echo" hi>, f=", st=0, en=0, i= 6
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=6 

reached end cmd[5 + 1] = <">, flag = " start = 0

end figur out end of quote <e"echo" hi>, f=", st=0, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <eecho>, st=0, en=6
filling node with ~eecho~
smasher loop 7= ,flag=i, s.start = 0, s.end = 0
smasher loop 8=h,flag=s, s.start = 8, s.end = 0
smasher loop 9=i,flag=s, s.start = 8, s.end = 0
space_smash, smashed_arg = hi, start = 8, end = 9
~eecho~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <e"cho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 2] = <o>, flag = "

reached end cmd[3 + 3] = < >, flag = " start = 0

end figur out end of quote <ech""o hi>, f=", st=0, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 7=h,flag=i, s.start = 0, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=<,flag=i, s.start = 0, s.end = 0
smasher loop 4=l,flag=i, s.start = 2, s.end = 0
space_smash, smashed_arg = l, start = 4, end = 4
smasher loop 5=|,flag=i, s.start = 4, s.end = 0
smasher loop 6=<,flag=i, s.start = 5, s.end = 0
smasher loop 8=k,flag=i, s.start = 6, s.end = 0
space_smash, smashed_arg = k, start = 8, end = 8
smasher loop 9= ,flag=i, s.start = 8, s.end = 0
smasher loop 10=p,flag=s, s.start = 10, s.end = 0
smasher loop 11=w,flag=s, s.start = 10, s.end = 0
smasher loop 12=d,flag=s, s.start = 10, s.end = 0
space_smash, smashed_arg = pwd, start = 10, end = 12
~ls~
~<<~
~l~
~|~
~<<~
~k~
~pwd~
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
smasher loop 7= ,flag=i, s.start = 5, s.end = 0
smasher loop 8=|,flag=i, s.start = 8, s.end = 0
smasher loop 9=>,flag=i, s.start = 8, s.end = 0
smasher loop 11= ,flag=i, s.start = 9, s.end = 0
smasher loop 12=f,flag=s, s.start = 12, s.end = 0
space_smash, smashed_arg = f, start = 12, end = 12
~echo~
~hi~
~|~
~>>~
~f~
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
smasher loop 7= ,flag=i, s.start = 5, s.end = 0
smasher loop 8=|,flag=i, s.start = 8, s.end = 0
smasher loop 9=>,flag=i, s.start = 8, s.end = 0
smasher loop 10= ,flag=i, s.start = 9, s.end = 0
smasher loop 11=f,flag=s, s.start = 11, s.end = 0
space_smash, smashed_arg = f, start = 11, end = 11
smasher loop 12= ,flag=i, s.start = 11, s.end = 0
~echo~
~hi~
~|~
~>~
~f~
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
smasher loop 3=i,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exti, start = 0, end = 3
~exti~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi | "grep" "h">,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | "grep" "h">,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | "grep" "h">,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | "grep" "h">,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | "grep" "h">,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi | "grep" "h">, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi | "grep" "h">, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi | "grep" "h">, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi | "grep" "h", start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi | "grep" "h">, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 0
smasher loop 10=|,flag=i, s.start = 10, s.end = 0
smasher loop 11= ,flag=i, s.start = 10, s.end = 0
" " arg = <"echo" hi | "grep" "h">,cmd[11] =  ,  start = 12 i = 11, flag = "
smasher loop 12=",flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "grep" "h">,cmd[12] = ",  start = 12 i = 12, flag = "
smasher loop 14=r,flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "grep" "h">,cmd[14] = r,  start = 12 i = 14, flag = "
smasher loop 15=e,flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "grep" "h">,cmd[15] = e,  start = 12 i = 15, flag = "
smasher loop 16=p,flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "grep" "h">,cmd[16] = p,  start = 12 i = 16, flag = "
smasher loop 17=",flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "grep" "h">,cmd[17] = ",  start = 12 i = 17, flag = "
before cleaning arg = <"echo" hi | "grep" "h">, start = 12 i = 17
Mul single and double quote
 cmd = <"echo" hi | "grep" "h">, flag = ",strt=12,end=0,i=17
figur out end of quote <"echo" hi | "grep" "h">, f=", st=12, en=0, i= 17
calling case 2 Doesn't end with quote 
main cmd[17] = "  cmd[18] =   , start = 12, flag = "


Case 2
s=12,e=0,i=17 
after decrement s=12,e=0,i=17 
fetching end cmd[17 + 1] = < >, flag = "

reached end cmd[17 + 2] = <">, flag = " start = 12

end figur out end of quote <"echo" hi | "grep" "h">, f=", st=12, en=19, i= 18
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" hi | "grep" "h">, flag = " s 19 e 19 i 19
figur out end of quote <"echo" hi | "grep" "h">, f=", st=19, en=19, i= 19
calling case 2 Doesn't end with quote 
main cmd[19] = "  cmd[20] = h , start = 19, flag = "


Case 2
s=19,e=19,i=19 
after decrement s=19,e=19,i=19 
fetching end cmd[19 + 1] = <h>, flag = "

reached end cmd[19 + 2] = <">, flag = " start = 19

end figur out end of quote <"echo" hi | "grep" "h">, f=", st=19, en=21, i= 20
Loop single double quote gen
 cmd = <"echo" hi | "grep" "h">, flag = " s 21 e 21 i 21
figur out end of quote <"echo" hi | "grep" "h">, f=", st=21, en=21, i= 21
calling case 1 filling normal quote  main cmd[21] = "  cmd[22] =   , start = 21, flag = "
Case 1 Filling normal quote, cmd = "echo" hi | "grep" "h", start = 21, end = 21
final_arg before expand = , start = 21, end = 22
final_arg after filling normal case = , start = 21, end = 22
end figur out end of quote <"echo" hi | "grep" "h">, f=", st=21, en=22, i= 21
Exiting Multiple merged_str = <grep h>, st=21, en=22
filling node with ~grep h~
~echo~
~hi~
~|~
~grep h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi | "grep" h>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi | "grep" h>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi | "grep" h>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi | "grep" h, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi | "grep" h>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 0
smasher loop 10=|,flag=i, s.start = 10, s.end = 0
smasher loop 11= ,flag=i, s.start = 10, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[11] =  ,  start = 12 i = 11, flag = "
smasher loop 12=",flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[12] = ",  start = 12 i = 12, flag = "
smasher loop 14=r,flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[14] = r,  start = 12 i = 14, flag = "
smasher loop 15=e,flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[15] = e,  start = 12 i = 15, flag = "
smasher loop 16=p,flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[16] = p,  start = 12 i = 16, flag = "
smasher loop 17=",flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[17] = ",  start = 12 i = 17, flag = "
before cleaning arg = <"echo" hi | "grep" h>, start = 12 i = 17
Mul single and double quote
 cmd = <"echo" hi | "grep" h>, flag = ",strt=12,end=0,i=17
figur out end of quote <"echo" hi | "grep" h>, f=", st=12, en=0, i= 17
calling case 2 Doesn't end with quote 
main cmd[17] = "  cmd[18] =   , start = 12, flag = "


Case 2
s=12,e=0,i=17 
after decrement s=12,e=0,i=17 
fetching end cmd[17 + 1] = < >, flag = "
fetching end cmd[17 + 2] = <h>, flag = "

reached end cmd[17 + 3] = < >, flag = " start = 12

end figur out end of quote <"echo" hi | "grep" h>, f=", st=12, en=20, i= 19
filling node with ~grep h~
~echo~
~hi~
~|~
~grep h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi | grep h>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | grep h>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | grep h>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | grep h>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | grep h>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi | grep h>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi | grep h>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi | grep h>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi | grep h, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi | grep h>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 0
smasher loop 10=|,flag=i, s.start = 10, s.end = 0
smasher loop 11= ,flag=i, s.start = 10, s.end = 0
smasher loop 12=g,flag=s, s.start = 12, s.end = 0
smasher loop 13=r,flag=s, s.start = 12, s.end = 0
smasher loop 14=e,flag=s, s.start = 12, s.end = 0
smasher loop 15=p,flag=s, s.start = 12, s.end = 0
space_smash, smashed_arg = grep, start = 12, end = 15
smasher loop 16= ,flag=i, s.start = 12, s.end = 0
smasher loop 17=h,flag=s, s.start = 17, s.end = 0
space_smash, smashed_arg = h, start = 17, end = 17
~echo~
~hi~
~|~
~grep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi | grep "h">,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | grep "h">,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | grep "h">,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | grep "h">,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | grep "h">,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi | grep "h">, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi | grep "h">, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi | grep "h">, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi | grep "h", start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi | grep "h">, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 0
smasher loop 10=|,flag=i, s.start = 10, s.end = 0
smasher loop 11= ,flag=i, s.start = 10, s.end = 0
smasher loop 12=g,flag=s, s.start = 12, s.end = 0
smasher loop 13=r,flag=s, s.start = 12, s.end = 0
smasher loop 14=e,flag=s, s.start = 12, s.end = 0
smasher loop 15=p,flag=s, s.start = 12, s.end = 0
space_smash, smashed_arg = grep, start = 12, end = 15
smasher loop 16= ,flag=i, s.start = 12, s.end = 0
" " arg = <"echo" hi | grep "h">,cmd[16] =  ,  start = 17 i = 16, flag = "
smasher loop 17=",flag=", s.start = 17, s.end = 0
" " arg = <"echo" hi | grep "h">,cmd[17] = ",  start = 17 i = 17, flag = "
smasher loop 19=",flag=", s.start = 17, s.end = 0
" " arg = <"echo" hi | grep "h">,cmd[19] = ",  start = 17 i = 19, flag = "
before cleaning arg = <"echo" hi | grep "h">, start = 17 i = 19
Mul single and double quote
 cmd = <"echo" hi | grep "h">, flag = ",strt=17,end=0,i=19
figur out end of quote <"echo" hi | grep "h">, f=", st=17, en=0, i= 19
calling case 1 filling normal quote  main cmd[19] = "  cmd[20] =   , start = 17, flag = "
Case 1 Filling normal quote, cmd = "echo" hi | grep "h", start = 17, end = 19
final_arg before expand = h, start = 17, end = 19
final_arg after filling normal case = h, start = 17, end = 19
end figur out end of quote <"echo" hi | grep "h">, f=", st=17, en=19, i= 19
filling node with ~h~
~echo~
~hi~
~|~
~grep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi | ""grep h>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | ""grep h>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | ""grep h>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | ""grep h>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | ""grep h>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi | ""grep h>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi | ""grep h>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi | ""grep h>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi | ""grep h, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi | ""grep h>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 0
smasher loop 10=|,flag=i, s.start = 10, s.end = 0
smasher loop 11= ,flag=i, s.start = 10, s.end = 0
" " arg = <"echo" hi | ""grep h>,cmd[11] =  ,  start = 12 i = 11, flag = "
smasher loop 12=",flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | ""grep h>,cmd[12] = ",  start = 12 i = 12, flag = "
before cleaning arg = <"echo" hi | ""grep h>, start = 12 i = 13
Mul single and double quote
 cmd = <"echo" hi | ""grep h>, flag = ",strt=12,end=0,i=13
figur out end of quote <"echo" hi | ""grep h>, f=", st=12, en=0, i= 13
calling case 2 Doesn't end with quote 
main cmd[13] = "  cmd[14] = g , start = 12, flag = "


Case 2
s=12,e=0,i=13 
after decrement s=12,e=0,i=13 
fetching end cmd[13 + 1] = <g>, flag = "
fetching end cmd[13 + 2] = <r>, flag = "
fetching end cmd[13 + 3] = <e>, flag = "
fetching end cmd[13 + 4] = <p>, flag = "
fetching end cmd[13 + 5] = < >, flag = "
fetching end cmd[13 + 6] = <h>, flag = "

reached end cmd[13 + 7] = < >, flag = " start = 12

end figur out end of quote <"echo" hi | ""grep h>, f=", st=12, en=20, i= 19
filling node with ~grep h~
~echo~
~hi~
~|~
~grep h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi | "gr"ep h>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | "gr"ep h>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | "gr"ep h>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | "gr"ep h>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | "gr"ep h>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi | "gr"ep h>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi | "gr"ep h>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi | "gr"ep h>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi | "gr"ep h, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi | "gr"ep h>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 0
smasher loop 10=|,flag=i, s.start = 10, s.end = 0
smasher loop 11= ,flag=i, s.start = 10, s.end = 0
" " arg = <"echo" hi | "gr"ep h>,cmd[11] =  ,  start = 12 i = 11, flag = "
smasher loop 12=",flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "gr"ep h>,cmd[12] = ",  start = 12 i = 12, flag = "
smasher loop 14=r,flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "gr"ep h>,cmd[14] = r,  start = 12 i = 14, flag = "
smasher loop 15=",flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "gr"ep h>,cmd[15] = ",  start = 12 i = 15, flag = "
before cleaning arg = <"echo" hi | "gr"ep h>, start = 12 i = 15
Mul single and double quote
 cmd = <"echo" hi | "gr"ep h>, flag = ",strt=12,end=0,i=15
figur out end of quote <"echo" hi | "gr"ep h>, f=", st=12, en=0, i= 15
calling case 2 Doesn't end with quote 
main cmd[15] = "  cmd[16] = e , start = 12, flag = "


Case 2
s=12,e=0,i=15 
after decrement s=12,e=0,i=15 
fetching end cmd[15 + 1] = <e>, flag = "
fetching end cmd[15 + 2] = <p>, flag = "
fetching end cmd[15 + 3] = < >, flag = "
fetching end cmd[15 + 4] = <h>, flag = "

reached end cmd[15 + 5] = < >, flag = " start = 12

end figur out end of quote <"echo" hi | "gr"ep h>, f=", st=12, en=20, i= 19
filling node with ~grep h~
~echo~
~hi~
~|~
~grep h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=c,flag=s, s.start = 5, s.end = 0
smasher loop 6=l,flag=s, s.start = 5, s.end = 0
smasher loop 7=e,flag=s, s.start = 5, s.end = 0
smasher loop 8=a,flag=s, s.start = 5, s.end = 0
smasher loop 9=n,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = clean, start = 5, end = 9
~make~
~clean~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi | "grep" h>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi | "grep" h>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi | "grep" h>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi | "grep" h, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi | "grep" h>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 0
smasher loop 10=|,flag=i, s.start = 10, s.end = 0
smasher loop 11= ,flag=i, s.start = 10, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[11] =  ,  start = 12 i = 11, flag = "
smasher loop 12=",flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[12] = ",  start = 12 i = 12, flag = "
smasher loop 14=r,flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[14] = r,  start = 12 i = 14, flag = "
smasher loop 15=e,flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[15] = e,  start = 12 i = 15, flag = "
smasher loop 16=p,flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[16] = p,  start = 12 i = 16, flag = "
smasher loop 17=",flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "grep" h>,cmd[17] = ",  start = 12 i = 17, flag = "
before cleaning arg = <"echo" hi | "grep" h>, start = 12 i = 17
Mul single and double quote
 cmd = <"echo" hi | "grep" h>, flag = ",strt=12,end=0,i=17
figur out end of quote <"echo" hi | "grep" h>, f=", st=12, en=0, i= 17
calling case 2 Doesn't end with quote 
main cmd[17] = "  cmd[18] =   , start = 12, flag = "


Case 2
s=12,e=0,i=17 
after decrement s=12,e=0,i=17 
fetching end cmd[17 + 1] = < >, flag = "
fetching end cmd[17 + 2] = <h>, flag = "

reached end cmd[17 + 3] = < >, flag = " start = 12

end figur out end of quote <"echo" hi | "grep" h>, f=", st=12, en=20, i= 19
filling node with ~grep h~
~echo~
~hi~
~|~
~grep h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <e"cho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi | g"rep" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi | g"rep" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi | g"rep" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi | g"rep" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi | g"rep" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi | g"rep" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi | g"rep" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <e"cho" hi | g"rep" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 0
smasher loop 10=|,flag=i, s.start = 10, s.end = 0
smasher loop 11= ,flag=i, s.start = 10, s.end = 0
smasher loop 12=g,flag=s, s.start = 12, s.end = 0
smasher loop 13=",flag=s, s.start = 12, s.end = 0
smasher loop 14=r,flag=", s.start = 12, s.end = 0
" " arg = <e"cho" hi | g"rep" hi>,cmd[14] = r,  start = 12 i = 14, flag = "
smasher loop 15=e,flag=", s.start = 12, s.end = 0
" " arg = <e"cho" hi | g"rep" hi>,cmd[15] = e,  start = 12 i = 15, flag = "
smasher loop 16=p,flag=", s.start = 12, s.end = 0
" " arg = <e"cho" hi | g"rep" hi>,cmd[16] = p,  start = 12 i = 16, flag = "
smasher loop 17=",flag=", s.start = 12, s.end = 0
" " arg = <e"cho" hi | g"rep" hi>,cmd[17] = ",  start = 12 i = 17, flag = "
before cleaning arg = <e"cho" hi | g"rep" hi>, start = 12 i = 17
Mul single and double quote
 cmd = <e"cho" hi | g"rep" hi>, flag = ",strt=12,end=0,i=17
figur out end of quote <e"cho" hi | g"rep" hi>, f=", st=12, en=0, i= 17
cas 3 no quote start,st = 12 en= 0


Case 3
s=12,e=0,i=17 

reached end cmd[16 + 1] = <">, flag = " start = 12

end figur out end of quote <e"cho" hi | g"rep" hi>, f=", st=12, en=17, i= 17
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=12, en=17
filling node with ~grep~
smasher loop 18= ,flag=i, s.start = 12, s.end = 0
smasher loop 19=h,flag=s, s.start = 19, s.end = 0
smasher loop 20=i,flag=s, s.start = 19, s.end = 0
space_smash, smashed_arg = hi, start = 19, end = 20
~echo~
~hi~
~|~
~grep~
~hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi | g"rep" "hi">,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi | g"rep" "hi">,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi | g"rep" "hi">,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi | g"rep" "hi">,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi | g"rep" "hi">, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi | g"rep" "hi">, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi | g"rep" "hi">, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <e"cho" hi | g"rep" "hi">, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 0
smasher loop 10=|,flag=i, s.start = 10, s.end = 0
smasher loop 11= ,flag=i, s.start = 10, s.end = 0
smasher loop 12=g,flag=s, s.start = 12, s.end = 0
smasher loop 13=",flag=s, s.start = 12, s.end = 0
smasher loop 14=r,flag=", s.start = 12, s.end = 0
" " arg = <e"cho" hi | g"rep" "hi">,cmd[14] = r,  start = 12 i = 14, flag = "
smasher loop 15=e,flag=", s.start = 12, s.end = 0
" " arg = <e"cho" hi | g"rep" "hi">,cmd[15] = e,  start = 12 i = 15, flag = "
smasher loop 16=p,flag=", s.start = 12, s.end = 0
" " arg = <e"cho" hi | g"rep" "hi">,cmd[16] = p,  start = 12 i = 16, flag = "
smasher loop 17=",flag=", s.start = 12, s.end = 0
" " arg = <e"cho" hi | g"rep" "hi">,cmd[17] = ",  start = 12 i = 17, flag = "
before cleaning arg = <e"cho" hi | g"rep" "hi">, start = 12 i = 17
Mul single and double quote
 cmd = <e"cho" hi | g"rep" "hi">, flag = ",strt=12,end=0,i=17
figur out end of quote <e"cho" hi | g"rep" "hi">, f=", st=12, en=0, i= 17
cas 3 no quote start,st = 12 en= 0


Case 3
s=12,e=0,i=17 

reached end cmd[16 + 1] = <">, flag = " start = 12

end figur out end of quote <e"cho" hi | g"rep" "hi">, f=", st=12, en=17, i= 17
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=12, en=17
filling node with ~grep~
smasher loop 18= ,flag=i, s.start = 12, s.end = 0
" " arg = <e"cho" hi | g"rep" "hi">,cmd[18] =  ,  start = 19 i = 18, flag = "
smasher loop 19=",flag=", s.start = 19, s.end = 0
" " arg = <e"cho" hi | g"rep" "hi">,cmd[19] = ",  start = 19 i = 19, flag = "
smasher loop 21=i,flag=", s.start = 19, s.end = 0
" " arg = <e"cho" hi | g"rep" "hi">,cmd[21] = i,  start = 19 i = 21, flag = "
smasher loop 22=",flag=", s.start = 19, s.end = 0
" " arg = <e"cho" hi | g"rep" "hi">,cmd[22] = ",  start = 19 i = 22, flag = "
before cleaning arg = <e"cho" hi | g"rep" "hi">, start = 19 i = 22
Mul single and double quote
 cmd = <e"cho" hi | g"rep" "hi">, flag = ",strt=19,end=0,i=22
figur out end of quote <e"cho" hi | g"rep" "hi">, f=", st=19, en=0, i= 22
calling case 1 filling normal quote  main cmd[22] = "  cmd[23] =   , start = 19, flag = "
Case 1 Filling normal quote, cmd = e"cho" hi | g"rep" "hi", start = 19, end = 22
final_arg before expand = hi, start = 19, end = 22
final_arg after filling normal case = hi, start = 19, end = 22
end figur out end of quote <e"cho" hi | g"rep" "hi">, f=", st=19, en=22, i= 22
filling node with ~hi~
~echo~
~hi~
~|~
~grep~
~hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" "hi' | g"rep" "hi">,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" "hi' | g"rep" "hi">,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" "hi' | g"rep" "hi">,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" "hi' | g"rep" "hi">,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" "hi' | g"rep" "hi">, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" "hi' | g"rep" "hi">, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" "hi' | g"rep" "hi">, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <e"cho" "hi' | g"rep" "hi">, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
" " arg = <e"cho" "hi' | g"rep" "hi">,cmd[6] =  ,  start = 7 i = 6, flag = "
smasher loop 7=",flag=", s.start = 7, s.end = 0
" " arg = <e"cho" "hi' | g"rep" "hi">,cmd[7] = ",  start = 7 i = 7, flag = "
smasher loop 9=i,flag=", s.start = 7, s.end = 0
" " arg = <e"cho" "hi' | g"rep" "hi">,cmd[9] = i,  start = 7 i = 9, flag = "
smasher loop 10=',flag=", s.start = 7, s.end = 0
" " arg = <e"cho" "hi' | g"rep" "hi">,cmd[10] = ',  start = 7 i = 10, flag = "
smasher loop 11= ,flag=", s.start = 7, s.end = 0
" " arg = <e"cho" "hi' | g"rep" "hi">,cmd[11] =  ,  start = 7 i = 11, flag = "
smasher loop 12=|,flag=", s.start = 7, s.end = 0
" " arg = <e"cho" "hi' | g"rep" "hi">,cmd[12] = |,  start = 7 i = 12, flag = "
smasher loop 13= ,flag=", s.start = 7, s.end = 0
" " arg = <e"cho" "hi' | g"rep" "hi">,cmd[13] =  ,  start = 7 i = 13, flag = "
smasher loop 14=g,flag=", s.start = 7, s.end = 0
" " arg = <e"cho" "hi' | g"rep" "hi">,cmd[14] = g,  start = 7 i = 14, flag = "
smasher loop 15=",flag=", s.start = 7, s.end = 0
" " arg = <e"cho" "hi' | g"rep" "hi">,cmd[15] = ",  start = 7 i = 15, flag = "
before cleaning arg = <e"cho" "hi' | g"rep" "hi">, start = 7 i = 15
Mul single and double quote
 cmd = <e"cho" "hi' | g"rep" "hi">, flag = ",strt=7,end=0,i=15
figur out end of quote <e"cho" "hi' | g"rep" "hi">, f=", st=7, en=0, i= 15
calling case 2 Doesn't end with quote 
main cmd[15] = "  cmd[16] = r , start = 7, flag = "


Case 2
s=7,e=0,i=15 
after decrement s=7,e=0,i=15 
fetching end cmd[15 + 1] = <r>, flag = "
fetching end cmd[15 + 2] = <e>, flag = "
fetching end cmd[15 + 3] = <p>, flag = "

reached end cmd[15 + 4] = <">, flag = " start = 7

end figur out end of quote <e"cho" "hi' | g"rep" "hi">, f=", st=7, en=19, i= 18
entering the source of all devil loop
Loop single double quote gen
 cmd = <e"cho" "hi' | g"rep" "hi">, flag = " s 19 e 19 i 19
figur out end of quote <e"cho" "hi' | g"rep" "hi">, f=", st=19, en=19, i= 19
calling case 2 Doesn't end with quote 
main cmd[19] = "  cmd[20] =   , start = 19, flag = "


Case 2
s=19,e=19,i=19 
after decrement s=19,e=19,i=19 
fetching end cmd[19 + 1] = < >, flag = "

reached end cmd[19 + 2] = <">, flag = " start = 19

end figur out end of quote <e"cho" "hi' | g"rep" "hi">, f=", st=19, en=21, i= 20
Loop single double quote gen
 cmd = <e"cho" "hi' | g"rep" "hi">, flag = " s 21 e 21 i 21
figur out end of quote <e"cho" "hi' | g"rep" "hi">, f=", st=21, en=21, i= 21
calling case 2 Doesn't end with quote 
main cmd[21] = "  cmd[22] = h , start = 21, flag = "


Case 2
s=21,e=21,i=21 
after decrement s=21,e=21,i=21 
fetching end cmd[21 + 1] = <h>, flag = "
fetching end cmd[21 + 2] = <i>, flag = "

reached end cmd[21 + 3] = <">, flag = " start = 21

end figur out end of quote <e"cho" "hi' | g"rep" "hi">, f=", st=21, en=24, i= 23
Loop single double quote gen
 cmd = <e"cho" "hi' | g"rep" "hi">, flag = " s 24 e 24 i 24
figur out end of quote <e"cho" "hi' | g"rep" "hi">, f=", st=24, en=24, i= 24
calling case 1 filling normal quote  main cmd[24] = "  cmd[25] =   , start = 24, flag = "
Case 1 Filling normal quote, cmd = e"cho" "hi' | g"rep" "hi", start = 24, end = 24
final_arg before expand = , start = 24, end = 25
final_arg after filling normal case = , start = 24, end = 25
end figur out end of quote <e"cho" "hi' | g"rep" "hi">, f=", st=24, en=25, i= 24
Exiting Multiple merged_str = <hi' | grep hi>, st=24, en=25
filling node with ~hi' | grep hi~
Will not visualize cmd this is an errored one
~echo~
~hi' | grep hi~
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" 'hi' | g"rep" "hi">,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" 'hi' | g"rep" "hi">,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" 'hi' | g"rep" "hi">,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" 'hi' | g"rep" "hi">,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" 'hi' | g"rep" "hi">, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" 'hi' | g"rep" "hi">, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" 'hi' | g"rep" "hi">, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <e"cho" 'hi' | g"rep" "hi">, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
check for single quote < >
smasher loop 7=',flag=', s.start = 7, s.end = 0
check for single quote <'>
smasher loop 9=i,flag=', s.start = 7, s.end = 0
check for single quote <i>
smasher loop 10=',flag=', s.start = 7, s.end = 0
check for single quote <'>
before clean <e"cho" 'hi' | g"rep" "hi">,start=7,i=10
Mul single and double quote
 cmd = <e"cho" 'hi' | g"rep" "hi">, flag = ',strt=7,end=0,i=10
figur out end of quote <e"cho" 'hi' | g"rep" "hi">, f=', st=7, en=0, i= 10
calling case 2 Doesn't end with quote 
main cmd[10] = '  cmd[11] =   , start = 7, flag = '


Case 2
s=7,e=0,i=10 
after decrement s=7,e=0,i=10 
fetching end cmd[10 + 1] = < >, flag = '

reached end cmd[10 + 2] = <|>, flag = ' start = 7

splitted_arg = hi
splitted_arg =  
end figur out end of quote <e"cho" 'hi' | g"rep" "hi">, f=', st=7, en=12, i= 11
entering the source of all devil loop
Exiting Multiple merged_str = <hi >, st=7, en=12
filling node with ~hi ~
smasher loop 12=|,flag=i, s.start = 7, s.end = 0
smasher loop 13= ,flag=i, s.start = 12, s.end = 0
smasher loop 14=g,flag=s, s.start = 14, s.end = 0
smasher loop 15=",flag=s, s.start = 14, s.end = 0
smasher loop 16=r,flag=", s.start = 14, s.end = 0
" " arg = <e"cho" 'hi' | g"rep" "hi">,cmd[16] = r,  start = 14 i = 16, flag = "
smasher loop 17=e,flag=", s.start = 14, s.end = 0
" " arg = <e"cho" 'hi' | g"rep" "hi">,cmd[17] = e,  start = 14 i = 17, flag = "
smasher loop 18=p,flag=", s.start = 14, s.end = 0
" " arg = <e"cho" 'hi' | g"rep" "hi">,cmd[18] = p,  start = 14 i = 18, flag = "
smasher loop 19=",flag=", s.start = 14, s.end = 0
" " arg = <e"cho" 'hi' | g"rep" "hi">,cmd[19] = ",  start = 14 i = 19, flag = "
before cleaning arg = <e"cho" 'hi' | g"rep" "hi">, start = 14 i = 19
Mul single and double quote
 cmd = <e"cho" 'hi' | g"rep" "hi">, flag = ",strt=14,end=0,i=19
figur out end of quote <e"cho" 'hi' | g"rep" "hi">, f=", st=14, en=0, i= 19
cas 3 no quote start,st = 14 en= 0


Case 3
s=14,e=0,i=19 

reached end cmd[18 + 1] = <">, flag = " start = 14

end figur out end of quote <e"cho" 'hi' | g"rep" "hi">, f=", st=14, en=19, i= 19
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=14, en=19
filling node with ~grep~
smasher loop 20= ,flag=i, s.start = 14, s.end = 0
" " arg = <e"cho" 'hi' | g"rep" "hi">,cmd[20] =  ,  start = 21 i = 20, flag = "
smasher loop 21=",flag=", s.start = 21, s.end = 0
" " arg = <e"cho" 'hi' | g"rep" "hi">,cmd[21] = ",  start = 21 i = 21, flag = "
smasher loop 23=i,flag=", s.start = 21, s.end = 0
" " arg = <e"cho" 'hi' | g"rep" "hi">,cmd[23] = i,  start = 21 i = 23, flag = "
smasher loop 24=",flag=", s.start = 21, s.end = 0
" " arg = <e"cho" 'hi' | g"rep" "hi">,cmd[24] = ",  start = 21 i = 24, flag = "
before cleaning arg = <e"cho" 'hi' | g"rep" "hi">, start = 21 i = 24
Mul single and double quote
 cmd = <e"cho" 'hi' | g"rep" "hi">, flag = ",strt=21,end=0,i=24
figur out end of quote <e"cho" 'hi' | g"rep" "hi">, f=", st=21, en=0, i= 24
calling case 1 filling normal quote  main cmd[24] = "  cmd[25] =   , start = 21, flag = "
Case 1 Filling normal quote, cmd = e"cho" 'hi' | g"rep" "hi", start = 21, end = 24
final_arg before expand = hi, start = 21, end = 24
final_arg after filling normal case = hi, start = 21, end = 24
end figur out end of quote <e"cho" 'hi' | g"rep" "hi">, f=", st=21, en=24, i= 24
filling node with ~hi~
~echo~
~hi ~
~|~
~grep~
~hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" 3'hi'1 | g"rep" "hi">,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" 3'hi'1 | g"rep" "hi">,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" 3'hi'1 | g"rep" "hi">,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" 3'hi'1 | g"rep" "hi">,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" 3'hi'1 | g"rep" "hi">, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" 3'hi'1 | g"rep" "hi">, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" 3'hi'1 | g"rep" "hi">, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <e"cho" 3'hi'1 | g"rep" "hi">, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=3,flag=s, s.start = 7, s.end = 0
smasher loop 8=',flag=s, s.start = 7, s.end = 0
smasher loop 9=h,flag=', s.start = 7, s.end = 0
check for single quote <h>
smasher loop 10=i,flag=', s.start = 7, s.end = 0
check for single quote <i>
smasher loop 11=',flag=', s.start = 7, s.end = 0
check for single quote <'>
before clean <e"cho" 3'hi'1 | g"rep" "hi">,start=7,i=11
Mul single and double quote
 cmd = <e"cho" 3'hi'1 | g"rep" "hi">, flag = ',strt=7,end=0,i=11
figur out end of quote <e"cho" 3'hi'1 | g"rep" "hi">, f=', st=7, en=0, i= 11
cas 3 no quote start,st = 7 en= 0


Case 3
s=7,e=0,i=11 
fetching end cmd[10 + 2] = <1>, flag = '

reached end cmd[10 + 3] = < >, flag = ' start = 7

splitted_arg = 3
splitted_arg = hi
splitted_arg = 1
end figur out end of quote <e"cho" 3'hi'1 | g"rep" "hi">, f=', st=7, en=13, i= 13
entering the source of all devil loop
Exiting Multiple merged_str = <3hi1>, st=7, en=13
filling node with ~3hi1~
smasher loop 14=|,flag=i, s.start = 7, s.end = 0
smasher loop 15= ,flag=i, s.start = 14, s.end = 0
smasher loop 16=g,flag=s, s.start = 16, s.end = 0
smasher loop 17=",flag=s, s.start = 16, s.end = 0
smasher loop 18=r,flag=", s.start = 16, s.end = 0
" " arg = <e"cho" 3'hi'1 | g"rep" "hi">,cmd[18] = r,  start = 16 i = 18, flag = "
smasher loop 19=e,flag=", s.start = 16, s.end = 0
" " arg = <e"cho" 3'hi'1 | g"rep" "hi">,cmd[19] = e,  start = 16 i = 19, flag = "
smasher loop 20=p,flag=", s.start = 16, s.end = 0
" " arg = <e"cho" 3'hi'1 | g"rep" "hi">,cmd[20] = p,  start = 16 i = 20, flag = "
smasher loop 21=",flag=", s.start = 16, s.end = 0
" " arg = <e"cho" 3'hi'1 | g"rep" "hi">,cmd[21] = ",  start = 16 i = 21, flag = "
before cleaning arg = <e"cho" 3'hi'1 | g"rep" "hi">, start = 16 i = 21
Mul single and double quote
 cmd = <e"cho" 3'hi'1 | g"rep" "hi">, flag = ",strt=16,end=0,i=21
figur out end of quote <e"cho" 3'hi'1 | g"rep" "hi">, f=", st=16, en=0, i= 21
cas 3 no quote start,st = 16 en= 0


Case 3
s=16,e=0,i=21 

reached end cmd[20 + 1] = <">, flag = " start = 16

end figur out end of quote <e"cho" 3'hi'1 | g"rep" "hi">, f=", st=16, en=21, i= 21
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=16, en=21
filling node with ~grep~
smasher loop 22= ,flag=i, s.start = 16, s.end = 0
" " arg = <e"cho" 3'hi'1 | g"rep" "hi">,cmd[22] =  ,  start = 23 i = 22, flag = "
smasher loop 23=",flag=", s.start = 23, s.end = 0
" " arg = <e"cho" 3'hi'1 | g"rep" "hi">,cmd[23] = ",  start = 23 i = 23, flag = "
smasher loop 25=i,flag=", s.start = 23, s.end = 0
" " arg = <e"cho" 3'hi'1 | g"rep" "hi">,cmd[25] = i,  start = 23 i = 25, flag = "
smasher loop 26=",flag=", s.start = 23, s.end = 0
" " arg = <e"cho" 3'hi'1 | g"rep" "hi">,cmd[26] = ",  start = 23 i = 26, flag = "
before cleaning arg = <e"cho" 3'hi'1 | g"rep" "hi">, start = 23 i = 26
Mul single and double quote
 cmd = <e"cho" 3'hi'1 | g"rep" "hi">, flag = ",strt=23,end=0,i=26
figur out end of quote <e"cho" 3'hi'1 | g"rep" "hi">, f=", st=23, en=0, i= 26
calling case 1 filling normal quote  main cmd[26] = "  cmd[27] =   , start = 23, flag = "
Case 1 Filling normal quote, cmd = e"cho" 3'hi'1 | g"rep" "hi", start = 23, end = 26
final_arg before expand = hi, start = 23, end = 26
final_arg after filling normal case = hi, start = 23, end = 26
end figur out end of quote <e"cho" 3'hi'1 | g"rep" "hi">, f=", st=23, en=26, i= 26
filling node with ~hi~
~echo~
~3hi1~
~|~
~grep~
~hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" 3'hi'1"4"5 | g"rep" "hi">,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" 3'hi'1"4"5 | g"rep" "hi">,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" 3'hi'1"4"5 | g"rep" "hi">,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" 3'hi'1"4"5 | g"rep" "hi">,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" 3'hi'1"4"5 | g"rep" "hi">, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" 3'hi'1"4"5 | g"rep" "hi">, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" 3'hi'1"4"5 | g"rep" "hi">, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <e"cho" 3'hi'1"4"5 | g"rep" "hi">, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=3,flag=s, s.start = 7, s.end = 0
smasher loop 8=',flag=s, s.start = 7, s.end = 0
smasher loop 9=h,flag=', s.start = 7, s.end = 0
check for single quote <h>
smasher loop 10=i,flag=', s.start = 7, s.end = 0
check for single quote <i>
smasher loop 11=',flag=', s.start = 7, s.end = 0
check for single quote <'>
before clean <e"cho" 3'hi'1"4"5 | g"rep" "hi">,start=7,i=11
Mul single and double quote
 cmd = <e"cho" 3'hi'1"4"5 | g"rep" "hi">, flag = ',strt=7,end=0,i=11
figur out end of quote <e"cho" 3'hi'1"4"5 | g"rep" "hi">, f=', st=7, en=0, i= 11
cas 3 no quote start,st = 7 en= 0


Case 3
s=7,e=0,i=11 
fetching end cmd[10 + 2] = <1>, flag = '
fetching end cmd[10 + 4] = <4>, flag = '
fetching end cmd[10 + 6] = <5>, flag = '

reached end cmd[10 + 7] = < >, flag = ' start = 7

splitted_arg = 3
splitted_arg = hi
splitted_arg = 1"4"5
end figur out end of quote <e"cho" 3'hi'1"4"5 | g"rep" "hi">, f=', st=7, en=17, i= 17
entering the source of all devil loop
Exiting Multiple merged_str = <3hi1"4"5>, st=7, en=17
filling node with ~3hi1"4"5~
smasher loop 18=|,flag=i, s.start = 7, s.end = 0
smasher loop 19= ,flag=i, s.start = 18, s.end = 0
smasher loop 20=g,flag=s, s.start = 20, s.end = 0
smasher loop 21=",flag=s, s.start = 20, s.end = 0
smasher loop 22=r,flag=", s.start = 20, s.end = 0
" " arg = <e"cho" 3'hi'1"4"5 | g"rep" "hi">,cmd[22] = r,  start = 20 i = 22, flag = "
smasher loop 23=e,flag=", s.start = 20, s.end = 0
" " arg = <e"cho" 3'hi'1"4"5 | g"rep" "hi">,cmd[23] = e,  start = 20 i = 23, flag = "
smasher loop 24=p,flag=", s.start = 20, s.end = 0
" " arg = <e"cho" 3'hi'1"4"5 | g"rep" "hi">,cmd[24] = p,  start = 20 i = 24, flag = "
smasher loop 25=",flag=", s.start = 20, s.end = 0
" " arg = <e"cho" 3'hi'1"4"5 | g"rep" "hi">,cmd[25] = ",  start = 20 i = 25, flag = "
before cleaning arg = <e"cho" 3'hi'1"4"5 | g"rep" "hi">, start = 20 i = 25
Mul single and double quote
 cmd = <e"cho" 3'hi'1"4"5 | g"rep" "hi">, flag = ",strt=20,end=0,i=25
figur out end of quote <e"cho" 3'hi'1"4"5 | g"rep" "hi">, f=", st=20, en=0, i= 25
cas 3 no quote start,st = 20 en= 0


Case 3
s=20,e=0,i=25 

reached end cmd[24 + 1] = <">, flag = " start = 20

end figur out end of quote <e"cho" 3'hi'1"4"5 | g"rep" "hi">, f=", st=20, en=25, i= 25
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=20, en=25
filling node with ~grep~
smasher loop 26= ,flag=i, s.start = 20, s.end = 0
" " arg = <e"cho" 3'hi'1"4"5 | g"rep" "hi">,cmd[26] =  ,  start = 27 i = 26, flag = "
smasher loop 27=",flag=", s.start = 27, s.end = 0
" " arg = <e"cho" 3'hi'1"4"5 | g"rep" "hi">,cmd[27] = ",  start = 27 i = 27, flag = "
smasher loop 29=i,flag=", s.start = 27, s.end = 0
" " arg = <e"cho" 3'hi'1"4"5 | g"rep" "hi">,cmd[29] = i,  start = 27 i = 29, flag = "
smasher loop 30=",flag=", s.start = 27, s.end = 0
" " arg = <e"cho" 3'hi'1"4"5 | g"rep" "hi">,cmd[30] = ",  start = 27 i = 30, flag = "
before cleaning arg = <e"cho" 3'hi'1"4"5 | g"rep" "hi">, start = 27 i = 30
Mul single and double quote
 cmd = <e"cho" 3'hi'1"4"5 | g"rep" "hi">, flag = ",strt=27,end=0,i=30
figur out end of quote <e"cho" 3'hi'1"4"5 | g"rep" "hi">, f=", st=27, en=0, i= 30
calling case 1 filling normal quote  main cmd[30] = "  cmd[31] =   , start = 27, flag = "
Case 1 Filling normal quote, cmd = e"cho" 3'hi'1"4"5 | g"rep" "hi", start = 27, end = 30
final_arg before expand = hi, start = 27, end = 30
final_arg after filling normal case = hi, start = 27, end = 30
end figur out end of quote <e"cho" 3'hi'1"4"5 | g"rep" "hi">, f=", st=27, en=30, i= 30
filling node with ~hi~
~echo~
~3hi1"4"5~
~|~
~grep~
~hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" 3'hi'1"4"5 | g"rep" "hi">,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" 3'hi'1"4"5 | g"rep" "hi">, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" 3'hi'1"4"5 | g"rep" "hi">, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" 3'hi'1"4"5 | g"rep" "hi">, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <echo"" 3'hi'1"4"5 | g"rep" "hi">, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=3,flag=s, s.start = 7, s.end = 0
smasher loop 8=',flag=s, s.start = 7, s.end = 0
smasher loop 9=h,flag=', s.start = 7, s.end = 0
check for single quote <h>
smasher loop 10=i,flag=', s.start = 7, s.end = 0
check for single quote <i>
smasher loop 11=',flag=', s.start = 7, s.end = 0
check for single quote <'>
before clean <echo"" 3'hi'1"4"5 | g"rep" "hi">,start=7,i=11
Mul single and double quote
 cmd = <echo"" 3'hi'1"4"5 | g"rep" "hi">, flag = ',strt=7,end=0,i=11
figur out end of quote <echo"" 3'hi'1"4"5 | g"rep" "hi">, f=', st=7, en=0, i= 11
cas 3 no quote start,st = 7 en= 0


Case 3
s=7,e=0,i=11 
fetching end cmd[10 + 2] = <1>, flag = '
fetching end cmd[10 + 4] = <4>, flag = '
fetching end cmd[10 + 6] = <5>, flag = '

reached end cmd[10 + 7] = < >, flag = ' start = 7

splitted_arg = 3
splitted_arg = hi
splitted_arg = 1"4"5
end figur out end of quote <echo"" 3'hi'1"4"5 | g"rep" "hi">, f=', st=7, en=17, i= 17
entering the source of all devil loop
Exiting Multiple merged_str = <3hi1"4"5>, st=7, en=17
filling node with ~3hi1"4"5~
smasher loop 18=|,flag=i, s.start = 7, s.end = 0
smasher loop 19= ,flag=i, s.start = 18, s.end = 0
smasher loop 20=g,flag=s, s.start = 20, s.end = 0
smasher loop 21=",flag=s, s.start = 20, s.end = 0
smasher loop 22=r,flag=", s.start = 20, s.end = 0
" " arg = <echo"" 3'hi'1"4"5 | g"rep" "hi">,cmd[22] = r,  start = 20 i = 22, flag = "
smasher loop 23=e,flag=", s.start = 20, s.end = 0
" " arg = <echo"" 3'hi'1"4"5 | g"rep" "hi">,cmd[23] = e,  start = 20 i = 23, flag = "
smasher loop 24=p,flag=", s.start = 20, s.end = 0
" " arg = <echo"" 3'hi'1"4"5 | g"rep" "hi">,cmd[24] = p,  start = 20 i = 24, flag = "
smasher loop 25=",flag=", s.start = 20, s.end = 0
" " arg = <echo"" 3'hi'1"4"5 | g"rep" "hi">,cmd[25] = ",  start = 20 i = 25, flag = "
before cleaning arg = <echo"" 3'hi'1"4"5 | g"rep" "hi">, start = 20 i = 25
Mul single and double quote
 cmd = <echo"" 3'hi'1"4"5 | g"rep" "hi">, flag = ",strt=20,end=0,i=25
figur out end of quote <echo"" 3'hi'1"4"5 | g"rep" "hi">, f=", st=20, en=0, i= 25
cas 3 no quote start,st = 20 en= 0


Case 3
s=20,e=0,i=25 

reached end cmd[24 + 1] = <">, flag = " start = 20

end figur out end of quote <echo"" 3'hi'1"4"5 | g"rep" "hi">, f=", st=20, en=25, i= 25
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=20, en=25
filling node with ~grep~
smasher loop 26= ,flag=i, s.start = 20, s.end = 0
" " arg = <echo"" 3'hi'1"4"5 | g"rep" "hi">,cmd[26] =  ,  start = 27 i = 26, flag = "
smasher loop 27=",flag=", s.start = 27, s.end = 0
" " arg = <echo"" 3'hi'1"4"5 | g"rep" "hi">,cmd[27] = ",  start = 27 i = 27, flag = "
smasher loop 29=i,flag=", s.start = 27, s.end = 0
" " arg = <echo"" 3'hi'1"4"5 | g"rep" "hi">,cmd[29] = i,  start = 27 i = 29, flag = "
smasher loop 30=",flag=", s.start = 27, s.end = 0
" " arg = <echo"" 3'hi'1"4"5 | g"rep" "hi">,cmd[30] = ",  start = 27 i = 30, flag = "
before cleaning arg = <echo"" 3'hi'1"4"5 | g"rep" "hi">, start = 27 i = 30
Mul single and double quote
 cmd = <echo"" 3'hi'1"4"5 | g"rep" "hi">, flag = ",strt=27,end=0,i=30
figur out end of quote <echo"" 3'hi'1"4"5 | g"rep" "hi">, f=", st=27, en=0, i= 30
calling case 1 filling normal quote  main cmd[30] = "  cmd[31] =   , start = 27, flag = "
Case 1 Filling normal quote, cmd = echo"" 3'hi'1"4"5 | g"rep" "hi", start = 27, end = 30
final_arg before expand = hi, start = 27, end = 30
final_arg after filling normal case = hi, start = 27, end = 30
end figur out end of quote <echo"" 3'hi'1"4"5 | g"rep" "hi">, f=", st=27, en=30, i= 30
filling node with ~hi~
~echo~
~3hi1"4"5~
~|~
~grep~
~hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" 3'hi'1"4"5 | grep"" "hi">,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" 3'hi'1"4"5 | grep"" "hi">, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" 3'hi'1"4"5 | grep"" "hi">, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" 3'hi'1"4"5 | grep"" "hi">, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <echo"" 3'hi'1"4"5 | grep"" "hi">, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=3,flag=s, s.start = 7, s.end = 0
smasher loop 8=',flag=s, s.start = 7, s.end = 0
smasher loop 9=h,flag=', s.start = 7, s.end = 0
check for single quote <h>
smasher loop 10=i,flag=', s.start = 7, s.end = 0
check for single quote <i>
smasher loop 11=',flag=', s.start = 7, s.end = 0
check for single quote <'>
before clean <echo"" 3'hi'1"4"5 | grep"" "hi">,start=7,i=11
Mul single and double quote
 cmd = <echo"" 3'hi'1"4"5 | grep"" "hi">, flag = ',strt=7,end=0,i=11
figur out end of quote <echo"" 3'hi'1"4"5 | grep"" "hi">, f=', st=7, en=0, i= 11
cas 3 no quote start,st = 7 en= 0


Case 3
s=7,e=0,i=11 
fetching end cmd[10 + 2] = <1>, flag = '
fetching end cmd[10 + 4] = <4>, flag = '
fetching end cmd[10 + 6] = <5>, flag = '

reached end cmd[10 + 7] = < >, flag = ' start = 7

splitted_arg = 3
splitted_arg = hi
splitted_arg = 1"4"5
end figur out end of quote <echo"" 3'hi'1"4"5 | grep"" "hi">, f=', st=7, en=17, i= 17
entering the source of all devil loop
Exiting Multiple merged_str = <3hi1"4"5>, st=7, en=17
filling node with ~3hi1"4"5~
smasher loop 18=|,flag=i, s.start = 7, s.end = 0
smasher loop 19= ,flag=i, s.start = 18, s.end = 0
smasher loop 20=g,flag=s, s.start = 20, s.end = 0
smasher loop 21=r,flag=s, s.start = 20, s.end = 0
smasher loop 22=e,flag=s, s.start = 20, s.end = 0
smasher loop 23=p,flag=s, s.start = 20, s.end = 0
smasher loop 24=",flag=s, s.start = 20, s.end = 0
smasher loop 25=",flag=", s.start = 20, s.end = 0
" " arg = <echo"" 3'hi'1"4"5 | grep"" "hi">,cmd[25] = ",  start = 20 i = 25, flag = "
before cleaning arg = <echo"" 3'hi'1"4"5 | grep"" "hi">, start = 20 i = 25
Mul single and double quote
 cmd = <echo"" 3'hi'1"4"5 | grep"" "hi">, flag = ",strt=20,end=0,i=25
figur out end of quote <echo"" 3'hi'1"4"5 | grep"" "hi">, f=", st=20, en=0, i= 25
cas 3 no quote start,st = 20 en= 0


Case 3
s=20,e=0,i=25 

reached end cmd[24 + 1] = <">, flag = " start = 20

end figur out end of quote <echo"" 3'hi'1"4"5 | grep"" "hi">, f=", st=20, en=25, i= 25
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=20, en=25
filling node with ~grep~
smasher loop 26= ,flag=i, s.start = 20, s.end = 0
" " arg = <echo"" 3'hi'1"4"5 | grep"" "hi">,cmd[26] =  ,  start = 27 i = 26, flag = "
smasher loop 27=",flag=", s.start = 27, s.end = 0
" " arg = <echo"" 3'hi'1"4"5 | grep"" "hi">,cmd[27] = ",  start = 27 i = 27, flag = "
smasher loop 29=i,flag=", s.start = 27, s.end = 0
" " arg = <echo"" 3'hi'1"4"5 | grep"" "hi">,cmd[29] = i,  start = 27 i = 29, flag = "
smasher loop 30=",flag=", s.start = 27, s.end = 0
" " arg = <echo"" 3'hi'1"4"5 | grep"" "hi">,cmd[30] = ",  start = 27 i = 30, flag = "
before cleaning arg = <echo"" 3'hi'1"4"5 | grep"" "hi">, start = 27 i = 30
Mul single and double quote
 cmd = <echo"" 3'hi'1"4"5 | grep"" "hi">, flag = ",strt=27,end=0,i=30
figur out end of quote <echo"" 3'hi'1"4"5 | grep"" "hi">, f=", st=27, en=0, i= 30
calling case 1 filling normal quote  main cmd[30] = "  cmd[31] =   , start = 27, flag = "
Case 1 Filling normal quote, cmd = echo"" 3'hi'1"4"5 | grep"" "hi", start = 27, end = 30
final_arg before expand = hi, start = 27, end = 30
final_arg after filling normal case = hi, start = 27, end = 30
end figur out end of quote <echo"" 3'hi'1"4"5 | grep"" "hi">, f=", st=27, en=30, i= 30
filling node with ~hi~
~echo~
~3hi1"4"5~
~|~
~grep~
~hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" 3'hi'1"45" | grep"" "hi">,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" 3'hi'1"45" | grep"" "hi">, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" 3'hi'1"45" | grep"" "hi">, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" 3'hi'1"45" | grep"" "hi">, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <echo"" 3'hi'1"45" | grep"" "hi">, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=3,flag=s, s.start = 7, s.end = 0
smasher loop 8=',flag=s, s.start = 7, s.end = 0
smasher loop 9=h,flag=', s.start = 7, s.end = 0
check for single quote <h>
smasher loop 10=i,flag=', s.start = 7, s.end = 0
check for single quote <i>
smasher loop 11=',flag=', s.start = 7, s.end = 0
check for single quote <'>
before clean <echo"" 3'hi'1"45" | grep"" "hi">,start=7,i=11
Mul single and double quote
 cmd = <echo"" 3'hi'1"45" | grep"" "hi">, flag = ',strt=7,end=0,i=11
figur out end of quote <echo"" 3'hi'1"45" | grep"" "hi">, f=', st=7, en=0, i= 11
cas 3 no quote start,st = 7 en= 0


Case 3
s=7,e=0,i=11 
fetching end cmd[10 + 2] = <1>, flag = '
fetching end cmd[10 + 4] = <4>, flag = '
fetching end cmd[10 + 5] = <5>, flag = '

reached end cmd[10 + 6] = <">, flag = ' start = 7

splitted_arg = 3
splitted_arg = hi
splitted_arg = 1"45
end figur out end of quote <echo"" 3'hi'1"45" | grep"" "hi">, f=', st=7, en=16, i= 16
entering the source of all devil loop
Exiting Multiple merged_str = <3hi1"45>, st=7, en=16
filling node with ~3hi1"45~
smasher loop 17= ,flag=i, s.start = 7, s.end = 0
smasher loop 18=|,flag=i, s.start = 18, s.end = 0
smasher loop 19= ,flag=i, s.start = 18, s.end = 0
smasher loop 20=g,flag=s, s.start = 20, s.end = 0
smasher loop 21=r,flag=s, s.start = 20, s.end = 0
smasher loop 22=e,flag=s, s.start = 20, s.end = 0
smasher loop 23=p,flag=s, s.start = 20, s.end = 0
smasher loop 24=",flag=s, s.start = 20, s.end = 0
smasher loop 25=",flag=", s.start = 20, s.end = 0
" " arg = <echo"" 3'hi'1"45" | grep"" "hi">,cmd[25] = ",  start = 20 i = 25, flag = "
before cleaning arg = <echo"" 3'hi'1"45" | grep"" "hi">, start = 20 i = 25
Mul single and double quote
 cmd = <echo"" 3'hi'1"45" | grep"" "hi">, flag = ",strt=20,end=0,i=25
figur out end of quote <echo"" 3'hi'1"45" | grep"" "hi">, f=", st=20, en=0, i= 25
cas 3 no quote start,st = 20 en= 0


Case 3
s=20,e=0,i=25 

reached end cmd[24 + 1] = <">, flag = " start = 20

end figur out end of quote <echo"" 3'hi'1"45" | grep"" "hi">, f=", st=20, en=25, i= 25
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=20, en=25
filling node with ~grep~
smasher loop 26= ,flag=i, s.start = 20, s.end = 0
" " arg = <echo"" 3'hi'1"45" | grep"" "hi">,cmd[26] =  ,  start = 27 i = 26, flag = "
smasher loop 27=",flag=", s.start = 27, s.end = 0
" " arg = <echo"" 3'hi'1"45" | grep"" "hi">,cmd[27] = ",  start = 27 i = 27, flag = "
smasher loop 29=i,flag=", s.start = 27, s.end = 0
" " arg = <echo"" 3'hi'1"45" | grep"" "hi">,cmd[29] = i,  start = 27 i = 29, flag = "
smasher loop 30=",flag=", s.start = 27, s.end = 0
" " arg = <echo"" 3'hi'1"45" | grep"" "hi">,cmd[30] = ",  start = 27 i = 30, flag = "
before cleaning arg = <echo"" 3'hi'1"45" | grep"" "hi">, start = 27 i = 30
Mul single and double quote
 cmd = <echo"" 3'hi'1"45" | grep"" "hi">, flag = ",strt=27,end=0,i=30
figur out end of quote <echo"" 3'hi'1"45" | grep"" "hi">, f=", st=27, en=0, i= 30
calling case 1 filling normal quote  main cmd[30] = "  cmd[31] =   , start = 27, flag = "
Case 1 Filling normal quote, cmd = echo"" 3'hi'1"45" | grep"" "hi", start = 27, end = 30
final_arg before expand = hi, start = 27, end = 30
final_arg after filling normal case = hi, start = 27, end = 30
end figur out end of quote <echo"" 3'hi'1"45" | grep"" "hi">, f=", st=27, en=30, i= 30
filling node with ~hi~
~echo~
~3hi1"45~
~|~
~grep~
~hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" 3'hi'1"45" | grep"" "hi">,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" 3'hi'1"45" | grep"" "hi">, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" 3'hi'1"45" | grep"" "hi">, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" 3'hi'1"45" | grep"" "hi">, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <echo"" 3'hi'1"45" | grep"" "hi">, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=3,flag=s, s.start = 7, s.end = 0
smasher loop 8=',flag=s, s.start = 7, s.end = 0
smasher loop 9=h,flag=', s.start = 7, s.end = 0
check for single quote <h>
smasher loop 10=i,flag=', s.start = 7, s.end = 0
check for single quote <i>
smasher loop 11=',flag=', s.start = 7, s.end = 0
check for single quote <'>
before clean <echo"" 3'hi'1"45" | grep"" "hi">,start=7,i=11
Mul single and double quote
 cmd = <echo"" 3'hi'1"45" | grep"" "hi">, flag = ',strt=7,end=0,i=11
figur out end of quote <echo"" 3'hi'1"45" | grep"" "hi">, f=', st=7, en=0, i= 11
cas 3 no quote start,st = 7 en= 0


Case 3
s=7,e=0,i=11 
fetching end cmd[10 + 2] = <1>, flag = '
fetching end cmd[10 + 4] = <4>, flag = '
fetching end cmd[10 + 5] = <5>, flag = '

reached end cmd[10 + 6] = <">, flag = ' start = 7

splitted_arg = 3
splitted_arg = hi
splitted_arg = 1"45
end figur out end of quote <echo"" 3'hi'1"45" | grep"" "hi">, f=', st=7, en=16, i= 16
entering the source of all devil loop
Exiting Multiple merged_str = <3hi1"45>, st=7, en=16
filling node with ~3hi1"45~
smasher loop 17= ,flag=i, s.start = 7, s.end = 0
smasher loop 18=|,flag=i, s.start = 18, s.end = 0
smasher loop 19= ,flag=i, s.start = 18, s.end = 0
smasher loop 20=g,flag=s, s.start = 20, s.end = 0
smasher loop 21=r,flag=s, s.start = 20, s.end = 0
smasher loop 22=e,flag=s, s.start = 20, s.end = 0
smasher loop 23=p,flag=s, s.start = 20, s.end = 0
smasher loop 24=",flag=s, s.start = 20, s.end = 0
smasher loop 25=",flag=", s.start = 20, s.end = 0
" " arg = <echo"" 3'hi'1"45" | grep"" "hi">,cmd[25] = ",  start = 20 i = 25, flag = "
before cleaning arg = <echo"" 3'hi'1"45" | grep"" "hi">, start = 20 i = 25
Mul single and double quote
 cmd = <echo"" 3'hi'1"45" | grep"" "hi">, flag = ",strt=20,end=0,i=25
figur out end of quote <echo"" 3'hi'1"45" | grep"" "hi">, f=", st=20, en=0, i= 25
cas 3 no quote start,st = 20 en= 0


Case 3
s=20,e=0,i=25 

reached end cmd[24 + 1] = <">, flag = " start = 20

end figur out end of quote <echo"" 3'hi'1"45" | grep"" "hi">, f=", st=20, en=25, i= 25
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=20, en=25
filling node with ~grep~
smasher loop 26= ,flag=i, s.start = 20, s.end = 0
" " arg = <echo"" 3'hi'1"45" | grep"" "hi">,cmd[26] =  ,  start = 27 i = 26, flag = "
smasher loop 27=",flag=", s.start = 27, s.end = 0
" " arg = <echo"" 3'hi'1"45" | grep"" "hi">,cmd[27] = ",  start = 27 i = 27, flag = "
smasher loop 29=i,flag=", s.start = 27, s.end = 0
" " arg = <echo"" 3'hi'1"45" | grep"" "hi">,cmd[29] = i,  start = 27 i = 29, flag = "
smasher loop 30=",flag=", s.start = 27, s.end = 0
" " arg = <echo"" 3'hi'1"45" | grep"" "hi">,cmd[30] = ",  start = 27 i = 30, flag = "
before cleaning arg = <echo"" 3'hi'1"45" | grep"" "hi">, start = 27 i = 30
Mul single and double quote
 cmd = <echo"" 3'hi'1"45" | grep"" "hi">, flag = ",strt=27,end=0,i=30
figur out end of quote <echo"" 3'hi'1"45" | grep"" "hi">, f=", st=27, en=0, i= 30
calling case 1 filling normal quote  main cmd[30] = "  cmd[31] =   , start = 27, flag = "
Case 1 Filling normal quote, cmd = echo"" 3'hi'1"45" | grep"" "hi", start = 27, end = 30
final_arg before expand = hi, start = 27, end = 30
final_arg after filling normal case = hi, start = 27, end = 30
end figur out end of quote <echo"" 3'hi'1"45" | grep"" "hi">, f=", st=27, en=30, i= 30
filling node with ~hi~
~echo~
~3hi1"45~
~|~
~grep~
~hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=y,flag=s, s.start = 0, s.end = 0
smasher loop 4=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exiyt, start = 0, end = 4
~exiyt~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi | grep hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | grep hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | grep hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | grep hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | grep hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi | grep hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi | grep hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi | grep hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi | grep hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi | grep hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 0
smasher loop 10=|,flag=i, s.start = 10, s.end = 0
smasher loop 11= ,flag=i, s.start = 10, s.end = 0
smasher loop 12=g,flag=s, s.start = 12, s.end = 0
smasher loop 13=r,flag=s, s.start = 12, s.end = 0
smasher loop 14=e,flag=s, s.start = 12, s.end = 0
smasher loop 15=p,flag=s, s.start = 12, s.end = 0
space_smash, smashed_arg = grep, start = 12, end = 15
smasher loop 16= ,flag=i, s.start = 12, s.end = 0
smasher loop 17=h,flag=s, s.start = 17, s.end = 0
smasher loop 18=i,flag=s, s.start = 17, s.end = 0
space_smash, smashed_arg = hi, start = 17, end = 18
~echo~
~hi~
~|~
~grep~
~hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi | "grep" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | "grep" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | "grep" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | "grep" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi | "grep" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi | "grep" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi | "grep" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi | "grep" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi | "grep" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi | "grep" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 0
smasher loop 10=|,flag=i, s.start = 10, s.end = 0
smasher loop 11= ,flag=i, s.start = 10, s.end = 0
" " arg = <"echo" hi | "grep" hi>,cmd[11] =  ,  start = 12 i = 11, flag = "
smasher loop 12=",flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "grep" hi>,cmd[12] = ",  start = 12 i = 12, flag = "
smasher loop 14=r,flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "grep" hi>,cmd[14] = r,  start = 12 i = 14, flag = "
smasher loop 15=e,flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "grep" hi>,cmd[15] = e,  start = 12 i = 15, flag = "
smasher loop 16=p,flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "grep" hi>,cmd[16] = p,  start = 12 i = 16, flag = "
smasher loop 17=",flag=", s.start = 12, s.end = 0
" " arg = <"echo" hi | "grep" hi>,cmd[17] = ",  start = 12 i = 17, flag = "
before cleaning arg = <"echo" hi | "grep" hi>, start = 12 i = 17
Mul single and double quote
 cmd = <"echo" hi | "grep" hi>, flag = ",strt=12,end=0,i=17
figur out end of quote <"echo" hi | "grep" hi>, f=", st=12, en=0, i= 17
calling case 2 Doesn't end with quote 
main cmd[17] = "  cmd[18] =   , start = 12, flag = "


Case 2
s=12,e=0,i=17 
after decrement s=12,e=0,i=17 
fetching end cmd[17 + 1] = < >, flag = "
fetching end cmd[17 + 2] = <h>, flag = "
fetching end cmd[17 + 3] = <i>, flag = "

reached end cmd[17 + 4] = < >, flag = " start = 12

end figur out end of quote <"echo" hi | "grep" hi>, f=", st=12, en=21, i= 20
filling node with ~grep hi~
~echo~
~hi~
~|~
~grep hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4" | grep hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4" | grep hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4" | grep hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4" | grep hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4" | grep hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" 'hi'2"4" | grep hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" 'hi'2"4" | grep hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" 'hi'2"4" | grep hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" 'hi'2"4" | grep hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" 'hi'2"4" | grep hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
check for single quote < >
smasher loop 7=',flag=', s.start = 7, s.end = 0
check for single quote <'>
smasher loop 9=i,flag=', s.start = 7, s.end = 0
check for single quote <i>
smasher loop 10=',flag=', s.start = 7, s.end = 0
check for single quote <'>
before clean <"echo" 'hi'2"4" | grep hi>,start=7,i=10
Mul single and double quote
 cmd = <"echo" 'hi'2"4" | grep hi>, flag = ',strt=7,end=0,i=10
figur out end of quote <"echo" 'hi'2"4" | grep hi>, f=', st=7, en=0, i= 10
calling case 2 Doesn't end with quote 
main cmd[10] = '  cmd[11] = 2 , start = 7, flag = '


Case 2
s=7,e=0,i=10 
after decrement s=7,e=0,i=10 
fetching end cmd[10 + 1] = <2>, flag = '

reached end cmd[10 + 2] = <">, flag = ' start = 7

splitted_arg = hi
splitted_arg = 2
end figur out end of quote <"echo" 'hi'2"4" | grep hi>, f=', st=7, en=12, i= 11
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" 'hi'2"4" | grep hi>, flag = ' s 12 e 12 i 12
figur out end of quote <"echo" 'hi'2"4" | grep hi>, f=", st=12, en=12, i= 12
calling case 2 Doesn't end with quote 
main cmd[12] = "  cmd[13] = 4 , start = 12, flag = "


Case 2
s=12,e=12,i=12 
after decrement s=12,e=12,i=12 
fetching end cmd[12 + 1] = <4>, flag = "

reached end cmd[12 + 2] = <">, flag = " start = 12

end figur out end of quote <"echo" 'hi'2"4" | grep hi>, f=", st=12, en=14, i= 13
Loop single double quote gen
 cmd = <"echo" 'hi'2"4" | grep hi>, flag = ' s 14 e 14 i 14
figur out end of quote <"echo" 'hi'2"4" | grep hi>, f=", st=14, en=14, i= 14
calling case 2 Doesn't end with quote 
main cmd[14] = "  cmd[15] =   , start = 14, flag = "


Case 2
s=14,e=14,i=14 
after decrement s=14,e=14,i=14 
fetching end cmd[14 + 1] = < >, flag = "

reached end cmd[14 + 2] = <|>, flag = " start = 14

end figur out end of quote <"echo" 'hi'2"4" | grep hi>, f=", st=14, en=16, i= 15
Exiting Multiple merged_str = <hi24 >, st=14, en=16
filling node with ~hi24 ~
smasher loop 16=|,flag=i, s.start = 14, s.end = 0
smasher loop 17= ,flag=i, s.start = 16, s.end = 0
smasher loop 18=g,flag=s, s.start = 18, s.end = 0
smasher loop 19=r,flag=s, s.start = 18, s.end = 0
smasher loop 20=e,flag=s, s.start = 18, s.end = 0
smasher loop 21=p,flag=s, s.start = 18, s.end = 0
space_smash, smashed_arg = grep, start = 18, end = 21
smasher loop 22= ,flag=i, s.start = 18, s.end = 0
smasher loop 23=h,flag=s, s.start = 23, s.end = 0
smasher loop 24=i,flag=s, s.start = 23, s.end = 0
space_smash, smashed_arg = hi, start = 23, end = 24
~echo~
~hi24 ~
~|~
~grep~
~hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | grep hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | grep hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | grep hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | grep hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | grep hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" 'hi'2"4"5 | grep hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 | grep hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" 'hi'2"4"5 | grep hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" 'hi'2"4"5 | grep hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" 'hi'2"4"5 | grep hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
check for single quote < >
smasher loop 7=',flag=', s.start = 7, s.end = 0
check for single quote <'>
smasher loop 9=i,flag=', s.start = 7, s.end = 0
check for single quote <i>
smasher loop 10=',flag=', s.start = 7, s.end = 0
check for single quote <'>
before clean <"echo" 'hi'2"4"5 | grep hi>,start=7,i=10
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 | grep hi>, flag = ',strt=7,end=0,i=10
figur out end of quote <"echo" 'hi'2"4"5 | grep hi>, f=', st=7, en=0, i= 10
calling case 2 Doesn't end with quote 
main cmd[10] = '  cmd[11] = 2 , start = 7, flag = '


Case 2
s=7,e=0,i=10 
after decrement s=7,e=0,i=10 
fetching end cmd[10 + 1] = <2>, flag = '

reached end cmd[10 + 2] = <">, flag = ' start = 7

splitted_arg = hi
splitted_arg = 2
end figur out end of quote <"echo" 'hi'2"4"5 | grep hi>, f=', st=7, en=12, i= 11
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 | grep hi>, flag = ' s 12 e 12 i 12
figur out end of quote <"echo" 'hi'2"4"5 | grep hi>, f=", st=12, en=12, i= 12
calling case 2 Doesn't end with quote 
main cmd[12] = "  cmd[13] = 4 , start = 12, flag = "


Case 2
s=12,e=12,i=12 
after decrement s=12,e=12,i=12 
fetching end cmd[12 + 1] = <4>, flag = "

reached end cmd[12 + 2] = <">, flag = " start = 12

end figur out end of quote <"echo" 'hi'2"4"5 | grep hi>, f=", st=12, en=14, i= 13
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 | grep hi>, flag = ' s 14 e 14 i 14
figur out end of quote <"echo" 'hi'2"4"5 | grep hi>, f=", st=14, en=14, i= 14
calling case 2 Doesn't end with quote 
main cmd[14] = "  cmd[15] = 5 , start = 14, flag = "


Case 2
s=14,e=14,i=14 
after decrement s=14,e=14,i=14 
fetching end cmd[14 + 1] = <5>, flag = "
fetching end cmd[14 + 2] = < >, flag = "

reached end cmd[14 + 3] = <|>, flag = " start = 14

end figur out end of quote <"echo" 'hi'2"4"5 | grep hi>, f=", st=14, en=17, i= 16
Exiting Multiple merged_str = <hi245 >, st=14, en=17
filling node with ~hi245 ~
smasher loop 17=|,flag=i, s.start = 14, s.end = 0
smasher loop 18= ,flag=i, s.start = 17, s.end = 0
smasher loop 19=g,flag=s, s.start = 19, s.end = 0
smasher loop 20=r,flag=s, s.start = 19, s.end = 0
smasher loop 21=e,flag=s, s.start = 19, s.end = 0
smasher loop 22=p,flag=s, s.start = 19, s.end = 0
space_smash, smashed_arg = grep, start = 19, end = 22
smasher loop 23= ,flag=i, s.start = 19, s.end = 0
smasher loop 24=h,flag=s, s.start = 24, s.end = 0
smasher loop 25=i,flag=s, s.start = 24, s.end = 0
space_smash, smashed_arg = hi, start = 24, end = 25
~echo~
~hi245 ~
~|~
~grep~
~hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | grep"" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | grep"" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | grep"" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | grep"" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | grep"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" 'hi'2"4"5 | grep"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 | grep"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" 'hi'2"4"5 | grep"" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" 'hi'2"4"5 | grep"" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" 'hi'2"4"5 | grep"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
check for single quote < >
smasher loop 7=',flag=', s.start = 7, s.end = 0
check for single quote <'>
smasher loop 9=i,flag=', s.start = 7, s.end = 0
check for single quote <i>
smasher loop 10=',flag=', s.start = 7, s.end = 0
check for single quote <'>
before clean <"echo" 'hi'2"4"5 | grep"" hi>,start=7,i=10
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 | grep"" hi>, flag = ',strt=7,end=0,i=10
figur out end of quote <"echo" 'hi'2"4"5 | grep"" hi>, f=', st=7, en=0, i= 10
calling case 2 Doesn't end with quote 
main cmd[10] = '  cmd[11] = 2 , start = 7, flag = '


Case 2
s=7,e=0,i=10 
after decrement s=7,e=0,i=10 
fetching end cmd[10 + 1] = <2>, flag = '

reached end cmd[10 + 2] = <">, flag = ' start = 7

splitted_arg = hi
splitted_arg = 2
end figur out end of quote <"echo" 'hi'2"4"5 | grep"" hi>, f=', st=7, en=12, i= 11
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 | grep"" hi>, flag = ' s 12 e 12 i 12
figur out end of quote <"echo" 'hi'2"4"5 | grep"" hi>, f=", st=12, en=12, i= 12
calling case 2 Doesn't end with quote 
main cmd[12] = "  cmd[13] = 4 , start = 12, flag = "


Case 2
s=12,e=12,i=12 
after decrement s=12,e=12,i=12 
fetching end cmd[12 + 1] = <4>, flag = "

reached end cmd[12 + 2] = <">, flag = " start = 12

end figur out end of quote <"echo" 'hi'2"4"5 | grep"" hi>, f=", st=12, en=14, i= 13
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 | grep"" hi>, flag = ' s 14 e 14 i 14
figur out end of quote <"echo" 'hi'2"4"5 | grep"" hi>, f=", st=14, en=14, i= 14
calling case 2 Doesn't end with quote 
main cmd[14] = "  cmd[15] = 5 , start = 14, flag = "


Case 2
s=14,e=14,i=14 
after decrement s=14,e=14,i=14 
fetching end cmd[14 + 1] = <5>, flag = "
fetching end cmd[14 + 2] = < >, flag = "

reached end cmd[14 + 3] = <|>, flag = " start = 14

end figur out end of quote <"echo" 'hi'2"4"5 | grep"" hi>, f=", st=14, en=17, i= 16
Exiting Multiple merged_str = <hi245 >, st=14, en=17
filling node with ~hi245 ~
smasher loop 17=|,flag=i, s.start = 14, s.end = 0
smasher loop 18= ,flag=i, s.start = 17, s.end = 0
smasher loop 19=g,flag=s, s.start = 19, s.end = 0
smasher loop 20=r,flag=s, s.start = 19, s.end = 0
smasher loop 21=e,flag=s, s.start = 19, s.end = 0
smasher loop 22=p,flag=s, s.start = 19, s.end = 0
smasher loop 23=",flag=s, s.start = 19, s.end = 0
smasher loop 24=",flag=", s.start = 19, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | grep"" hi>,cmd[24] = ",  start = 19 i = 24, flag = "
before cleaning arg = <"echo" 'hi'2"4"5 | grep"" hi>, start = 19 i = 24
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 | grep"" hi>, flag = ",strt=19,end=0,i=24
figur out end of quote <"echo" 'hi'2"4"5 | grep"" hi>, f=", st=19, en=0, i= 24
cas 3 no quote start,st = 19 en= 0


Case 3
s=19,e=0,i=24 
fetching end cmd[24 + 1] = < >, flag = "
fetching end cmd[24 + 2] = <h>, flag = "
fetching end cmd[24 + 3] = <i>, flag = "

reached end cmd[24 + 4] = < >, flag = " start = 19

end figur out end of quote <"echo" 'hi'2"4"5 | grep"" hi>, f=", st=19, en=28, i= 27
filling node with ~grep hi~
~echo~
~hi245 ~
~|~
~grep hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | g"rep" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | g"rep" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | g"rep" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | g"rep" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | g"rep" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" 'hi'2"4"5 | g"rep" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 | g"rep" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" 'hi'2"4"5 | g"rep" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" 'hi'2"4"5 | g"rep" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" 'hi'2"4"5 | g"rep" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
check for single quote < >
smasher loop 7=',flag=', s.start = 7, s.end = 0
check for single quote <'>
smasher loop 9=i,flag=', s.start = 7, s.end = 0
check for single quote <i>
smasher loop 10=',flag=', s.start = 7, s.end = 0
check for single quote <'>
before clean <"echo" 'hi'2"4"5 | g"rep" hi>,start=7,i=10
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 | g"rep" hi>, flag = ',strt=7,end=0,i=10
figur out end of quote <"echo" 'hi'2"4"5 | g"rep" hi>, f=', st=7, en=0, i= 10
calling case 2 Doesn't end with quote 
main cmd[10] = '  cmd[11] = 2 , start = 7, flag = '


Case 2
s=7,e=0,i=10 
after decrement s=7,e=0,i=10 
fetching end cmd[10 + 1] = <2>, flag = '

reached end cmd[10 + 2] = <">, flag = ' start = 7

splitted_arg = hi
splitted_arg = 2
end figur out end of quote <"echo" 'hi'2"4"5 | g"rep" hi>, f=', st=7, en=12, i= 11
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 | g"rep" hi>, flag = ' s 12 e 12 i 12
figur out end of quote <"echo" 'hi'2"4"5 | g"rep" hi>, f=", st=12, en=12, i= 12
calling case 2 Doesn't end with quote 
main cmd[12] = "  cmd[13] = 4 , start = 12, flag = "


Case 2
s=12,e=12,i=12 
after decrement s=12,e=12,i=12 
fetching end cmd[12 + 1] = <4>, flag = "

reached end cmd[12 + 2] = <">, flag = " start = 12

end figur out end of quote <"echo" 'hi'2"4"5 | g"rep" hi>, f=", st=12, en=14, i= 13
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 | g"rep" hi>, flag = ' s 14 e 14 i 14
figur out end of quote <"echo" 'hi'2"4"5 | g"rep" hi>, f=", st=14, en=14, i= 14
calling case 2 Doesn't end with quote 
main cmd[14] = "  cmd[15] = 5 , start = 14, flag = "


Case 2
s=14,e=14,i=14 
after decrement s=14,e=14,i=14 
fetching end cmd[14 + 1] = <5>, flag = "
fetching end cmd[14 + 2] = < >, flag = "

reached end cmd[14 + 3] = <|>, flag = " start = 14

end figur out end of quote <"echo" 'hi'2"4"5 | g"rep" hi>, f=", st=14, en=17, i= 16
Exiting Multiple merged_str = <hi245 >, st=14, en=17
filling node with ~hi245 ~
smasher loop 17=|,flag=i, s.start = 14, s.end = 0
smasher loop 18= ,flag=i, s.start = 17, s.end = 0
smasher loop 19=g,flag=s, s.start = 19, s.end = 0
smasher loop 20=",flag=s, s.start = 19, s.end = 0
smasher loop 21=r,flag=", s.start = 19, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | g"rep" hi>,cmd[21] = r,  start = 19 i = 21, flag = "
smasher loop 22=e,flag=", s.start = 19, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | g"rep" hi>,cmd[22] = e,  start = 19 i = 22, flag = "
smasher loop 23=p,flag=", s.start = 19, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | g"rep" hi>,cmd[23] = p,  start = 19 i = 23, flag = "
smasher loop 24=",flag=", s.start = 19, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | g"rep" hi>,cmd[24] = ",  start = 19 i = 24, flag = "
before cleaning arg = <"echo" 'hi'2"4"5 | g"rep" hi>, start = 19 i = 24
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 | g"rep" hi>, flag = ",strt=19,end=0,i=24
figur out end of quote <"echo" 'hi'2"4"5 | g"rep" hi>, f=", st=19, en=0, i= 24
cas 3 no quote start,st = 19 en= 0


Case 3
s=19,e=0,i=24 
fetching end cmd[24 + 1] = < >, flag = "
fetching end cmd[24 + 2] = <h>, flag = "
fetching end cmd[24 + 3] = <i>, flag = "

reached end cmd[24 + 4] = < >, flag = " start = 19

end figur out end of quote <"echo" 'hi'2"4"5 | g"rep" hi>, f=", st=19, en=28, i= 27
filling node with ~grep hi~
~echo~
~hi245 ~
~|~
~grep hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | g""rep hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | g""rep hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | g""rep hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | g""rep hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | g""rep hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" 'hi'2"4"5 | g""rep hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 | g""rep hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" 'hi'2"4"5 | g""rep hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" 'hi'2"4"5 | g""rep hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" 'hi'2"4"5 | g""rep hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
check for single quote < >
smasher loop 7=',flag=', s.start = 7, s.end = 0
check for single quote <'>
smasher loop 9=i,flag=', s.start = 7, s.end = 0
check for single quote <i>
smasher loop 10=',flag=', s.start = 7, s.end = 0
check for single quote <'>
before clean <"echo" 'hi'2"4"5 | g""rep hi>,start=7,i=10
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 | g""rep hi>, flag = ',strt=7,end=0,i=10
figur out end of quote <"echo" 'hi'2"4"5 | g""rep hi>, f=', st=7, en=0, i= 10
calling case 2 Doesn't end with quote 
main cmd[10] = '  cmd[11] = 2 , start = 7, flag = '


Case 2
s=7,e=0,i=10 
after decrement s=7,e=0,i=10 
fetching end cmd[10 + 1] = <2>, flag = '

reached end cmd[10 + 2] = <">, flag = ' start = 7

splitted_arg = hi
splitted_arg = 2
end figur out end of quote <"echo" 'hi'2"4"5 | g""rep hi>, f=', st=7, en=12, i= 11
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 | g""rep hi>, flag = ' s 12 e 12 i 12
figur out end of quote <"echo" 'hi'2"4"5 | g""rep hi>, f=", st=12, en=12, i= 12
calling case 2 Doesn't end with quote 
main cmd[12] = "  cmd[13] = 4 , start = 12, flag = "


Case 2
s=12,e=12,i=12 
after decrement s=12,e=12,i=12 
fetching end cmd[12 + 1] = <4>, flag = "

reached end cmd[12 + 2] = <">, flag = " start = 12

end figur out end of quote <"echo" 'hi'2"4"5 | g""rep hi>, f=", st=12, en=14, i= 13
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 | g""rep hi>, flag = ' s 14 e 14 i 14
figur out end of quote <"echo" 'hi'2"4"5 | g""rep hi>, f=", st=14, en=14, i= 14
calling case 2 Doesn't end with quote 
main cmd[14] = "  cmd[15] = 5 , start = 14, flag = "


Case 2
s=14,e=14,i=14 
after decrement s=14,e=14,i=14 
fetching end cmd[14 + 1] = <5>, flag = "
fetching end cmd[14 + 2] = < >, flag = "

reached end cmd[14 + 3] = <|>, flag = " start = 14

end figur out end of quote <"echo" 'hi'2"4"5 | g""rep hi>, f=", st=14, en=17, i= 16
Exiting Multiple merged_str = <hi245 >, st=14, en=17
filling node with ~hi245 ~
smasher loop 17=|,flag=i, s.start = 14, s.end = 0
smasher loop 18= ,flag=i, s.start = 17, s.end = 0
smasher loop 19=g,flag=s, s.start = 19, s.end = 0
smasher loop 20=",flag=s, s.start = 19, s.end = 0
smasher loop 21=",flag=", s.start = 19, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | g""rep hi>,cmd[21] = ",  start = 19 i = 21, flag = "
before cleaning arg = <"echo" 'hi'2"4"5 | g""rep hi>, start = 19 i = 21
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 | g""rep hi>, flag = ",strt=19,end=0,i=21
figur out end of quote <"echo" 'hi'2"4"5 | g""rep hi>, f=", st=19, en=0, i= 21
cas 3 no quote start,st = 19 en= 0


Case 3
s=19,e=0,i=21 
fetching end cmd[21 + 1] = <r>, flag = "
fetching end cmd[21 + 2] = <e>, flag = "
fetching end cmd[21 + 3] = <p>, flag = "
fetching end cmd[21 + 4] = < >, flag = "
fetching end cmd[21 + 5] = <h>, flag = "
fetching end cmd[21 + 6] = <i>, flag = "

reached end cmd[21 + 7] = < >, flag = " start = 19

end figur out end of quote <"echo" 'hi'2"4"5 | g""rep hi>, f=", st=19, en=28, i= 27
filling node with ~grep hi~
~echo~
~hi245 ~
~|~
~grep hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | "grep" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | "grep" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | "grep" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | "grep" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | "grep" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" 'hi'2"4"5 | "grep" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 | "grep" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" 'hi'2"4"5 | "grep" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" 'hi'2"4"5 | "grep" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" 'hi'2"4"5 | "grep" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
check for single quote < >
smasher loop 7=',flag=', s.start = 7, s.end = 0
check for single quote <'>
smasher loop 9=i,flag=', s.start = 7, s.end = 0
check for single quote <i>
smasher loop 10=',flag=', s.start = 7, s.end = 0
check for single quote <'>
before clean <"echo" 'hi'2"4"5 | "grep" hi>,start=7,i=10
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 | "grep" hi>, flag = ',strt=7,end=0,i=10
figur out end of quote <"echo" 'hi'2"4"5 | "grep" hi>, f=', st=7, en=0, i= 10
calling case 2 Doesn't end with quote 
main cmd[10] = '  cmd[11] = 2 , start = 7, flag = '


Case 2
s=7,e=0,i=10 
after decrement s=7,e=0,i=10 
fetching end cmd[10 + 1] = <2>, flag = '

reached end cmd[10 + 2] = <">, flag = ' start = 7

splitted_arg = hi
splitted_arg = 2
end figur out end of quote <"echo" 'hi'2"4"5 | "grep" hi>, f=', st=7, en=12, i= 11
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 | "grep" hi>, flag = ' s 12 e 12 i 12
figur out end of quote <"echo" 'hi'2"4"5 | "grep" hi>, f=", st=12, en=12, i= 12
calling case 2 Doesn't end with quote 
main cmd[12] = "  cmd[13] = 4 , start = 12, flag = "


Case 2
s=12,e=12,i=12 
after decrement s=12,e=12,i=12 
fetching end cmd[12 + 1] = <4>, flag = "

reached end cmd[12 + 2] = <">, flag = " start = 12

end figur out end of quote <"echo" 'hi'2"4"5 | "grep" hi>, f=", st=12, en=14, i= 13
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 | "grep" hi>, flag = ' s 14 e 14 i 14
figur out end of quote <"echo" 'hi'2"4"5 | "grep" hi>, f=", st=14, en=14, i= 14
calling case 2 Doesn't end with quote 
main cmd[14] = "  cmd[15] = 5 , start = 14, flag = "


Case 2
s=14,e=14,i=14 
after decrement s=14,e=14,i=14 
fetching end cmd[14 + 1] = <5>, flag = "
fetching end cmd[14 + 2] = < >, flag = "

reached end cmd[14 + 3] = <|>, flag = " start = 14

end figur out end of quote <"echo" 'hi'2"4"5 | "grep" hi>, f=", st=14, en=17, i= 16
Exiting Multiple merged_str = <hi245 >, st=14, en=17
filling node with ~hi245 ~
smasher loop 17=|,flag=i, s.start = 14, s.end = 0
smasher loop 18= ,flag=i, s.start = 17, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | "grep" hi>,cmd[18] =  ,  start = 19 i = 18, flag = "
smasher loop 19=",flag=", s.start = 19, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | "grep" hi>,cmd[19] = ",  start = 19 i = 19, flag = "
smasher loop 21=r,flag=", s.start = 19, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | "grep" hi>,cmd[21] = r,  start = 19 i = 21, flag = "
smasher loop 22=e,flag=", s.start = 19, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | "grep" hi>,cmd[22] = e,  start = 19 i = 22, flag = "
smasher loop 23=p,flag=", s.start = 19, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | "grep" hi>,cmd[23] = p,  start = 19 i = 23, flag = "
smasher loop 24=",flag=", s.start = 19, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | "grep" hi>,cmd[24] = ",  start = 19 i = 24, flag = "
before cleaning arg = <"echo" 'hi'2"4"5 | "grep" hi>, start = 19 i = 24
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 | "grep" hi>, flag = ",strt=19,end=0,i=24
figur out end of quote <"echo" 'hi'2"4"5 | "grep" hi>, f=", st=19, en=0, i= 24
calling case 2 Doesn't end with quote 
main cmd[24] = "  cmd[25] =   , start = 19, flag = "


Case 2
s=19,e=0,i=24 
after decrement s=19,e=0,i=24 
fetching end cmd[24 + 1] = < >, flag = "
fetching end cmd[24 + 2] = <h>, flag = "
fetching end cmd[24 + 3] = <i>, flag = "

reached end cmd[24 + 4] = < >, flag = " start = 19

end figur out end of quote <"echo" 'hi'2"4"5 | "grep" hi>, f=", st=19, en=28, i= 27
filling node with ~grep hi~
~echo~
~hi245 ~
~|~
~grep hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | ""grep hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | ""grep hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | ""grep hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | ""grep hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | ""grep hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" 'hi'2"4"5 | ""grep hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 | ""grep hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" 'hi'2"4"5 | ""grep hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" 'hi'2"4"5 | ""grep hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" 'hi'2"4"5 | ""grep hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
check for single quote < >
smasher loop 7=',flag=', s.start = 7, s.end = 0
check for single quote <'>
smasher loop 9=i,flag=', s.start = 7, s.end = 0
check for single quote <i>
smasher loop 10=',flag=', s.start = 7, s.end = 0
check for single quote <'>
before clean <"echo" 'hi'2"4"5 | ""grep hi>,start=7,i=10
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 | ""grep hi>, flag = ',strt=7,end=0,i=10
figur out end of quote <"echo" 'hi'2"4"5 | ""grep hi>, f=', st=7, en=0, i= 10
calling case 2 Doesn't end with quote 
main cmd[10] = '  cmd[11] = 2 , start = 7, flag = '


Case 2
s=7,e=0,i=10 
after decrement s=7,e=0,i=10 
fetching end cmd[10 + 1] = <2>, flag = '

reached end cmd[10 + 2] = <">, flag = ' start = 7

splitted_arg = hi
splitted_arg = 2
end figur out end of quote <"echo" 'hi'2"4"5 | ""grep hi>, f=', st=7, en=12, i= 11
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 | ""grep hi>, flag = ' s 12 e 12 i 12
figur out end of quote <"echo" 'hi'2"4"5 | ""grep hi>, f=", st=12, en=12, i= 12
calling case 2 Doesn't end with quote 
main cmd[12] = "  cmd[13] = 4 , start = 12, flag = "


Case 2
s=12,e=12,i=12 
after decrement s=12,e=12,i=12 
fetching end cmd[12 + 1] = <4>, flag = "

reached end cmd[12 + 2] = <">, flag = " start = 12

end figur out end of quote <"echo" 'hi'2"4"5 | ""grep hi>, f=", st=12, en=14, i= 13
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 | ""grep hi>, flag = ' s 14 e 14 i 14
figur out end of quote <"echo" 'hi'2"4"5 | ""grep hi>, f=", st=14, en=14, i= 14
calling case 2 Doesn't end with quote 
main cmd[14] = "  cmd[15] = 5 , start = 14, flag = "


Case 2
s=14,e=14,i=14 
after decrement s=14,e=14,i=14 
fetching end cmd[14 + 1] = <5>, flag = "
fetching end cmd[14 + 2] = < >, flag = "

reached end cmd[14 + 3] = <|>, flag = " start = 14

end figur out end of quote <"echo" 'hi'2"4"5 | ""grep hi>, f=", st=14, en=17, i= 16
Exiting Multiple merged_str = <hi245 >, st=14, en=17
filling node with ~hi245 ~
smasher loop 17=|,flag=i, s.start = 14, s.end = 0
smasher loop 18= ,flag=i, s.start = 17, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | ""grep hi>,cmd[18] =  ,  start = 19 i = 18, flag = "
smasher loop 19=",flag=", s.start = 19, s.end = 0
" " arg = <"echo" 'hi'2"4"5 | ""grep hi>,cmd[19] = ",  start = 19 i = 19, flag = "
before cleaning arg = <"echo" 'hi'2"4"5 | ""grep hi>, start = 19 i = 20
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 | ""grep hi>, flag = ",strt=19,end=0,i=20
figur out end of quote <"echo" 'hi'2"4"5 | ""grep hi>, f=", st=19, en=0, i= 20
calling case 2 Doesn't end with quote 
main cmd[20] = "  cmd[21] = g , start = 19, flag = "


Case 2
s=19,e=0,i=20 
after decrement s=19,e=0,i=20 
fetching end cmd[20 + 1] = <g>, flag = "
fetching end cmd[20 + 2] = <r>, flag = "
fetching end cmd[20 + 3] = <e>, flag = "
fetching end cmd[20 + 4] = <p>, flag = "
fetching end cmd[20 + 5] = < >, flag = "
fetching end cmd[20 + 6] = <h>, flag = "
fetching end cmd[20 + 7] = <i>, flag = "

reached end cmd[20 + 8] = < >, flag = " start = 19

end figur out end of quote <"echo" 'hi'2"4"5 | ""grep hi>, f=", st=19, en=28, i= 27
filling node with ~grep hi~
~echo~
~hi245 ~
~|~
~grep hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 |""grep hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 |""grep hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 |""grep hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 |""grep hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 |""grep hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" 'hi'2"4"5 |""grep hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 |""grep hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" 'hi'2"4"5 |""grep hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" 'hi'2"4"5 |""grep hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" 'hi'2"4"5 |""grep hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
check for single quote < >
smasher loop 7=',flag=', s.start = 7, s.end = 0
check for single quote <'>
smasher loop 9=i,flag=', s.start = 7, s.end = 0
check for single quote <i>
smasher loop 10=',flag=', s.start = 7, s.end = 0
check for single quote <'>
before clean <"echo" 'hi'2"4"5 |""grep hi>,start=7,i=10
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 |""grep hi>, flag = ',strt=7,end=0,i=10
figur out end of quote <"echo" 'hi'2"4"5 |""grep hi>, f=', st=7, en=0, i= 10
calling case 2 Doesn't end with quote 
main cmd[10] = '  cmd[11] = 2 , start = 7, flag = '


Case 2
s=7,e=0,i=10 
after decrement s=7,e=0,i=10 
fetching end cmd[10 + 1] = <2>, flag = '

reached end cmd[10 + 2] = <">, flag = ' start = 7

splitted_arg = hi
splitted_arg = 2
end figur out end of quote <"echo" 'hi'2"4"5 |""grep hi>, f=', st=7, en=12, i= 11
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 |""grep hi>, flag = ' s 12 e 12 i 12
figur out end of quote <"echo" 'hi'2"4"5 |""grep hi>, f=", st=12, en=12, i= 12
calling case 2 Doesn't end with quote 
main cmd[12] = "  cmd[13] = 4 , start = 12, flag = "


Case 2
s=12,e=12,i=12 
after decrement s=12,e=12,i=12 
fetching end cmd[12 + 1] = <4>, flag = "

reached end cmd[12 + 2] = <">, flag = " start = 12

end figur out end of quote <"echo" 'hi'2"4"5 |""grep hi>, f=", st=12, en=14, i= 13
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 |""grep hi>, flag = ' s 14 e 14 i 14
figur out end of quote <"echo" 'hi'2"4"5 |""grep hi>, f=", st=14, en=14, i= 14
calling case 2 Doesn't end with quote 
main cmd[14] = "  cmd[15] = 5 , start = 14, flag = "


Case 2
s=14,e=14,i=14 
after decrement s=14,e=14,i=14 
fetching end cmd[14 + 1] = <5>, flag = "
fetching end cmd[14 + 2] = < >, flag = "

reached end cmd[14 + 3] = <|>, flag = " start = 14

end figur out end of quote <"echo" 'hi'2"4"5 |""grep hi>, f=", st=14, en=17, i= 16
Exiting Multiple merged_str = <hi245 >, st=14, en=17
filling node with ~hi245 ~
smasher loop 17=|,flag=i, s.start = 14, s.end = 0
smasher loop 18=",flag=i, s.start = 17, s.end = 0
" " arg = <"echo" 'hi'2"4"5 |""grep hi>,cmd[18] = ",  start = 18 i = 18, flag = "
before cleaning arg = <"echo" 'hi'2"4"5 |""grep hi>, start = 18 i = 19
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 |""grep hi>, flag = ",strt=18,end=0,i=19
figur out end of quote <"echo" 'hi'2"4"5 |""grep hi>, f=", st=18, en=0, i= 19
calling case 2 Doesn't end with quote 
main cmd[19] = "  cmd[20] = g , start = 18, flag = "


Case 2
s=18,e=0,i=19 
after decrement s=18,e=0,i=19 
fetching end cmd[19 + 1] = <g>, flag = "
fetching end cmd[19 + 2] = <r>, flag = "
fetching end cmd[19 + 3] = <e>, flag = "
fetching end cmd[19 + 4] = <p>, flag = "
fetching end cmd[19 + 5] = < >, flag = "
fetching end cmd[19 + 6] = <h>, flag = "
fetching end cmd[19 + 7] = <i>, flag = "

reached end cmd[19 + 8] = < >, flag = " start = 18

end figur out end of quote <"echo" 'hi'2"4"5 |""grep hi>, f=", st=18, en=27, i= 26
filling node with ~grep hi~
~echo~
~hi245 ~
~|~
~grep hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 ""grep hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 ""grep hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 ""grep hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 ""grep hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 ""grep hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" 'hi'2"4"5 ""grep hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 ""grep hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" 'hi'2"4"5 ""grep hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" 'hi'2"4"5 ""grep hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" 'hi'2"4"5 ""grep hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
check for single quote < >
smasher loop 7=',flag=', s.start = 7, s.end = 0
check for single quote <'>
smasher loop 9=i,flag=', s.start = 7, s.end = 0
check for single quote <i>
smasher loop 10=',flag=', s.start = 7, s.end = 0
check for single quote <'>
before clean <"echo" 'hi'2"4"5 ""grep hi>,start=7,i=10
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 ""grep hi>, flag = ',strt=7,end=0,i=10
figur out end of quote <"echo" 'hi'2"4"5 ""grep hi>, f=', st=7, en=0, i= 10
calling case 2 Doesn't end with quote 
main cmd[10] = '  cmd[11] = 2 , start = 7, flag = '


Case 2
s=7,e=0,i=10 
after decrement s=7,e=0,i=10 
fetching end cmd[10 + 1] = <2>, flag = '

reached end cmd[10 + 2] = <">, flag = ' start = 7

splitted_arg = hi
splitted_arg = 2
end figur out end of quote <"echo" 'hi'2"4"5 ""grep hi>, f=', st=7, en=12, i= 11
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 ""grep hi>, flag = ' s 12 e 12 i 12
figur out end of quote <"echo" 'hi'2"4"5 ""grep hi>, f=", st=12, en=12, i= 12
calling case 2 Doesn't end with quote 
main cmd[12] = "  cmd[13] = 4 , start = 12, flag = "


Case 2
s=12,e=12,i=12 
after decrement s=12,e=12,i=12 
fetching end cmd[12 + 1] = <4>, flag = "

reached end cmd[12 + 2] = <">, flag = " start = 12

end figur out end of quote <"echo" 'hi'2"4"5 ""grep hi>, f=", st=12, en=14, i= 13
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 ""grep hi>, flag = ' s 14 e 14 i 14
figur out end of quote <"echo" 'hi'2"4"5 ""grep hi>, f=", st=14, en=14, i= 14
calling case 2 Doesn't end with quote 
main cmd[14] = "  cmd[15] = 5 , start = 14, flag = "


Case 2
s=14,e=14,i=14 
after decrement s=14,e=14,i=14 
fetching end cmd[14 + 1] = <5>, flag = "
fetching end cmd[14 + 2] = < >, flag = "

reached end cmd[14 + 3] = <">, flag = " start = 14

end figur out end of quote <"echo" 'hi'2"4"5 ""grep hi>, f=", st=14, en=17, i= 16
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 ""grep hi>, flag = ' s 17 e 17 i 17
figur out end of quote <"echo" 'hi'2"4"5 ""grep hi>, f=", st=17, en=17, i= 17
calling case 1 filling normal quote  main cmd[17] = "  cmd[18] = " , start = 17, flag = "
Case 1 Filling normal quote, cmd = "echo" 'hi'2"4"5 ""grep hi, start = 17, end = 17
final_arg before expand = , start = 17, end = 18
final_arg after filling normal case = , start = 17, end = 18
end figur out end of quote <"echo" 'hi'2"4"5 ""grep hi>, f=", st=17, en=18, i= 17
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 ""grep hi>, flag = ' s 18 e 18 i 18
figur out end of quote <"echo" 'hi'2"4"5 ""grep hi>, f=", st=18, en=18, i= 18
calling case 2 Doesn't end with quote 
main cmd[18] = "  cmd[19] = g , start = 18, flag = "


Case 2
s=18,e=18,i=18 
after decrement s=18,e=18,i=18 
fetching end cmd[18 + 1] = <g>, flag = "
fetching end cmd[18 + 2] = <r>, flag = "
fetching end cmd[18 + 3] = <e>, flag = "
fetching end cmd[18 + 4] = <p>, flag = "
fetching end cmd[18 + 5] = < >, flag = "
fetching end cmd[18 + 6] = <h>, flag = "
fetching end cmd[18 + 7] = <i>, flag = "

reached end cmd[18 + 8] = < >, flag = " start = 18

end figur out end of quote <"echo" 'hi'2"4"5 ""grep hi>, f=", st=18, en=26, i= 25
Exiting Multiple merged_str = <hi245 grep hi>, st=18, en=26
filling node with ~hi245 grep hi~
~echo~
~hi245 grep hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 ""grep hi  >,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 ""grep hi  >,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 ""grep hi  >,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 ""grep hi  >,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" 'hi'2"4"5 ""grep hi  >,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" 'hi'2"4"5 ""grep hi  >, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 ""grep hi  >, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" 'hi'2"4"5 ""grep hi  >, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" 'hi'2"4"5 ""grep hi  , start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" 'hi'2"4"5 ""grep hi  >, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
check for single quote < >
smasher loop 7=',flag=', s.start = 7, s.end = 0
check for single quote <'>
smasher loop 9=i,flag=', s.start = 7, s.end = 0
check for single quote <i>
smasher loop 10=',flag=', s.start = 7, s.end = 0
check for single quote <'>
before clean <"echo" 'hi'2"4"5 ""grep hi  >,start=7,i=10
Mul single and double quote
 cmd = <"echo" 'hi'2"4"5 ""grep hi  >, flag = ',strt=7,end=0,i=10
figur out end of quote <"echo" 'hi'2"4"5 ""grep hi  >, f=', st=7, en=0, i= 10
calling case 2 Doesn't end with quote 
main cmd[10] = '  cmd[11] = 2 , start = 7, flag = '


Case 2
s=7,e=0,i=10 
after decrement s=7,e=0,i=10 
fetching end cmd[10 + 1] = <2>, flag = '

reached end cmd[10 + 2] = <">, flag = ' start = 7

splitted_arg = hi
splitted_arg = 2
end figur out end of quote <"echo" 'hi'2"4"5 ""grep hi  >, f=', st=7, en=12, i= 11
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 ""grep hi  >, flag = ' s 12 e 12 i 12
figur out end of quote <"echo" 'hi'2"4"5 ""grep hi  >, f=", st=12, en=12, i= 12
calling case 2 Doesn't end with quote 
main cmd[12] = "  cmd[13] = 4 , start = 12, flag = "


Case 2
s=12,e=12,i=12 
after decrement s=12,e=12,i=12 
fetching end cmd[12 + 1] = <4>, flag = "

reached end cmd[12 + 2] = <">, flag = " start = 12

end figur out end of quote <"echo" 'hi'2"4"5 ""grep hi  >, f=", st=12, en=14, i= 13
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 ""grep hi  >, flag = ' s 14 e 14 i 14
figur out end of quote <"echo" 'hi'2"4"5 ""grep hi  >, f=", st=14, en=14, i= 14
calling case 2 Doesn't end with quote 
main cmd[14] = "  cmd[15] = 5 , start = 14, flag = "


Case 2
s=14,e=14,i=14 
after decrement s=14,e=14,i=14 
fetching end cmd[14 + 1] = <5>, flag = "
fetching end cmd[14 + 2] = < >, flag = "

reached end cmd[14 + 3] = <">, flag = " start = 14

end figur out end of quote <"echo" 'hi'2"4"5 ""grep hi  >, f=", st=14, en=17, i= 16
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 ""grep hi  >, flag = ' s 17 e 17 i 17
figur out end of quote <"echo" 'hi'2"4"5 ""grep hi  >, f=", st=17, en=17, i= 17
calling case 1 filling normal quote  main cmd[17] = "  cmd[18] = " , start = 17, flag = "
Case 1 Filling normal quote, cmd = "echo" 'hi'2"4"5 ""grep hi  , start = 17, end = 17
final_arg before expand = , start = 17, end = 18
final_arg after filling normal case = , start = 17, end = 18
end figur out end of quote <"echo" 'hi'2"4"5 ""grep hi  >, f=", st=17, en=18, i= 17
Loop single double quote gen
 cmd = <"echo" 'hi'2"4"5 ""grep hi  >, flag = ' s 18 e 18 i 18
figur out end of quote <"echo" 'hi'2"4"5 ""grep hi  >, f=", st=18, en=18, i= 18
calling case 2 Doesn't end with quote 
main cmd[18] = "  cmd[19] = g , start = 18, flag = "


Case 2
s=18,e=18,i=18 
after decrement s=18,e=18,i=18 
fetching end cmd[18 + 1] = <g>, flag = "
fetching end cmd[18 + 2] = <r>, flag = "
fetching end cmd[18 + 3] = <e>, flag = "
fetching end cmd[18 + 4] = <p>, flag = "
fetching end cmd[18 + 5] = < >, flag = "
fetching end cmd[18 + 6] = <h>, flag = "
fetching end cmd[18 + 7] = <i>, flag = "
fetching end cmd[18 + 8] = < >, flag = "
fetching end cmd[18 + 9] = < >, flag = "

reached end cmd[18 + 10] = < >, flag = " start = 18

end figur out end of quote <"echo" 'hi'2"4"5 ""grep hi  >, f=", st=18, en=28, i= 27
Exiting Multiple merged_str = <hi245 grep hi  >, st=18, en=28
filling node with ~hi245 grep hi  ~
~echo~
~hi245 grep hi  ~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=d,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cd, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 3, s.end = 0
smasher loop 4=r,flag=s, s.start = 3, s.end = 0
smasher loop 5=a,flag=s, s.start = 3, s.end = 0
smasher loop 6=s,flag=s, s.start = 3, s.end = 0
smasher loop 7=h,flag=s, s.start = 3, s.end = 0
smasher loop 8=/,flag=s, s.start = 3, s.end = 0
space_smash, smashed_arg = trash/, start = 3, end = 8
~cd~
~trash/~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
smasher loop 7= ,flag=i, s.start = 5, s.end = 0
smasher loop 8=|,flag=i, s.start = 8, s.end = 0
smasher loop 9= ,flag=i, s.start = 8, s.end = 0
smasher loop 10=g,flag=s, s.start = 10, s.end = 0
smasher loop 11=r,flag=s, s.start = 10, s.end = 0
smasher loop 12=e,flag=s, s.start = 10, s.end = 0
smasher loop 13=p,flag=s, s.start = 10, s.end = 0
smasher loop 14=",flag=s, s.start = 10, s.end = 0
smasher loop 15=",flag=", s.start = 10, s.end = 0
" " arg = <echo hi | grep"" hi>,cmd[15] = ",  start = 10 i = 15, flag = "
before cleaning arg = <echo hi | grep"" hi>, start = 10 i = 15
Mul single and double quote
 cmd = <echo hi | grep"" hi>, flag = ",strt=10,end=0,i=15
figur out end of quote <echo hi | grep"" hi>, f=", st=10, en=0, i= 15
cas 3 no quote start,st = 10 en= 0


Case 3
s=10,e=0,i=15 
fetching end cmd[15 + 1] = < >, flag = "
fetching end cmd[15 + 2] = <h>, flag = "
fetching end cmd[15 + 3] = <i>, flag = "

reached end cmd[15 + 4] = < >, flag = " start = 10

end figur out end of quote <echo hi | grep"" hi>, f=", st=10, en=19, i= 18
filling node with ~grep hi~
~echo~
~hi~
~|~
~grep hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
smasher loop 7= ,flag=i, s.start = 5, s.end = 0
smasher loop 8=|,flag=i, s.start = 8, s.end = 0
smasher loop 9= ,flag=i, s.start = 8, s.end = 0
smasher loop 10=g,flag=s, s.start = 10, s.end = 0
smasher loop 11=r,flag=s, s.start = 10, s.end = 0
smasher loop 12=",flag=s, s.start = 10, s.end = 0
smasher loop 13=e,flag=", s.start = 10, s.end = 0
" " arg = <echo hi | gr"ep" h>,cmd[13] = e,  start = 10 i = 13, flag = "
smasher loop 14=p,flag=", s.start = 10, s.end = 0
" " arg = <echo hi | gr"ep" h>,cmd[14] = p,  start = 10 i = 14, flag = "
smasher loop 15=",flag=", s.start = 10, s.end = 0
" " arg = <echo hi | gr"ep" h>,cmd[15] = ",  start = 10 i = 15, flag = "
before cleaning arg = <echo hi | gr"ep" h>, start = 10 i = 15
Mul single and double quote
 cmd = <echo hi | gr"ep" h>, flag = ",strt=10,end=0,i=15
figur out end of quote <echo hi | gr"ep" h>, f=", st=10, en=0, i= 15
cas 3 no quote start,st = 10 en= 0


Case 3
s=10,e=0,i=15 
fetching end cmd[15 + 1] = < >, flag = "
fetching end cmd[15 + 2] = <h>, flag = "

reached end cmd[15 + 3] = < >, flag = " start = 10

end figur out end of quote <echo hi | gr"ep" h>, f=", st=10, en=18, i= 17
filling node with ~grep h~
~echo~
~hi~
~|~
~grep h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=a,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = a, start = 0, end = 0
smasher loop 1=b,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ab, start = 0, end = 1
smasher loop 2=a,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = aba, start = 0, end = 2
~a~
~ab~
~aba~
joining env 
joining env 
smasher loop 0=b,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = b, start = 0, end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ba, start = 0, end = 1
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = bas, start = 0, end = 2
smasher loop 3=h,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = bash, start = 0, end = 3
~b~
~ba~
~bas~
~bash~
joining env 
joining env 
smasher loop 0=n,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = n, start = 0, end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = na, start = 0, end = 1
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = nas, start = 0, end = 2
smasher loop 3=h,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = nash, start = 0, end = 3
~n~
~na~
~nas~
~nash~
joining env 
joining env 
smasher loop 0=b,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = b, start = 0, end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ba, start = 0, end = 1
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = bas, start = 0, end = 2
smasher loop 3=h,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = bash, start = 0, end = 3
~b~
~ba~
~bas~
~bash~
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = e, start = 0, end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ex, start = 0, end = 1
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exi, start = 0, end = 2
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~e~
~ex~
~exi~
~exit~
joining env 
joining env 



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=b,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=h,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = bash, start = 0, end = 3
~bash~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
smasher loop 7= ,flag=i, s.start = 5, s.end = 0
smasher loop 8=|,flag=i, s.start = 8, s.end = 0
smasher loop 9= ,flag=i, s.start = 8, s.end = 0
smasher loop 10=g,flag=s, s.start = 10, s.end = 0
smasher loop 11=r,flag=s, s.start = 10, s.end = 0
smasher loop 12=e,flag=s, s.start = 10, s.end = 0
smasher loop 13=p,flag=s, s.start = 10, s.end = 0
smasher loop 14=",flag=s, s.start = 10, s.end = 0
smasher loop 15=",flag=", s.start = 10, s.end = 0
" " arg = <echo hi | grep"" h>,cmd[15] = ",  start = 10 i = 15, flag = "
before cleaning arg = <echo hi | grep"" h>, start = 10 i = 15
Mul single and double quote
 cmd = <echo hi | grep"" h>, flag = ",strt=10,end=0,i=15
figur out end of quote <echo hi | grep"" h>, f=", st=10, en=0, i= 15
cas 3 no quote start,st = 10 en= 0


Case 3
s=10,e=0,i=15 
fetching end cmd[15 + 1] = < >, flag = "
fetching end cmd[15 + 2] = <h>, flag = "

reached end cmd[15 + 3] = < >, flag = " start = 10

end figur out end of quote <echo hi | grep"" h>, f=", st=10, en=18, i= 17
filling node with ~grep h~
~echo~
~hi~
~|~
~grep h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
smasher loop 7= ,flag=i, s.start = 5, s.end = 0
smasher loop 8=|,flag=i, s.start = 8, s.end = 0
smasher loop 9= ,flag=i, s.start = 8, s.end = 0
smasher loop 10=g,flag=s, s.start = 10, s.end = 0
smasher loop 11=r,flag=s, s.start = 10, s.end = 0
smasher loop 12=e,flag=s, s.start = 10, s.end = 0
smasher loop 13=p,flag=s, s.start = 10, s.end = 0
smasher loop 14=",flag=s, s.start = 10, s.end = 0
smasher loop 15=",flag=", s.start = 10, s.end = 0
" " arg = <echo hi | grep"" h>,cmd[15] = ",  start = 10 i = 15, flag = "
before cleaning arg = <echo hi | grep"" h>, start = 10 i = 15
Mul single and double quote
 cmd = <echo hi | grep"" h>, flag = ",strt=10,end=0,i=15
figur out end of quote <echo hi | grep"" h>, f=", st=10, en=0, i= 15
cas 3 no quote start,st = 10 en= 0


Case 3
s=10,e=0,i=15 


last end cmd[0]= e


fetching end cmd[15 + 1] = < >, flag = "
fetching end cmd[15 + 2] = <h>, flag = "

reached end cmd[15 + 3] = < >, flag = " start = 10

end figur out end of quote <echo hi | grep"" h>, f=", st=10, en=18, i= 17
filling node with ~grep h~
~echo~
~hi~
~|~
~grep h~
count_outliar_redire i = -1, ? i == -1 ok:error
jojinoiinngi negn ve n
v 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
smasher loop 7= ,flag=i, s.start = 5, s.end = 6
smasher loop 8=|,flag=i, s.start = 8, s.end = 6
smasher loop 9= ,flag=i, s.start = 8, s.end = 6
smasher loop 10=g,flag=s, s.start = 10, s.end = 6
smasher loop 11=r,flag=s, s.start = 10, s.end = 6
smasher loop 12=e,flag=s, s.start = 10, s.end = 6
smasher loop 13=p,flag=s, s.start = 10, s.end = 6
space_smash, smashed_arg = grep, start = 10, end = 13
smasher loop 14= ,flag=i, s.start = 10, s.end = 13
smasher loop 15=h,flag=s, s.start = 15, s.end = 13
space_smash, smashed_arg = h, start = 15, end = 15
~echo~
~hi~
~|~
~grep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
jojioniinnign ge nevn v
 





smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
smasher loop 7= ,flag=i, s.start = 5, s.end = 6
smasher loop 8=|,flag=i, s.start = 8, s.end = 6
smasher loop 9= ,flag=i, s.start = 8, s.end = 6
smasher loop 10=g,flag=s, s.start = 10, s.end = 6
smasher loop 11=r,flag=s, s.start = 10, s.end = 6
smasher loop 12=e,flag=s, s.start = 10, s.end = 6
smasher loop 13=p,flag=s, s.start = 10, s.end = 6
smasher loop 14=",flag=s, s.start = 10, s.end = 6
smasher loop 15=",flag=", s.start = 10, s.end = 6
" " arg = <echo hi | grep"" h>,cmd[15] = ",  start = 10 i = 15, flag = "
before cleaning arg = <echo hi | grep"" h>, start = 10 i = 15
Mul single and double quote
 cmd = <echo hi | grep"" h>, flag = ",strt=10,end=6,i=15
figur out end of quote <echo hi | grep"" h>, f=", st=10, en=6, i= 15
cas 3 no quote start,st = 10 en= 6


Case 3
s=10,e=6,i=15 


last end cmd[6]= i


fetching end cmd[15 + 1] = < >, flag = "
fetching end cmd[15 + 2] = <h>, flag = "

reached end cmd[15 + 3] = < >, flag = " start = 10

end figur out end of quote <echo hi | grep"" h>, f=", st=10, en=18, i= 17
filling node with ~grep h~
~echo~
~hi~
~|~
~grep h~
count_outliar_redire i = -1, ? i == -1 ok:error
jjooiinniinngg  eennvv  

smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
smasher loop 7= ,flag=i, s.start = 5, s.end = 6
smasher loop 8=|,flag=i, s.start = 8, s.end = 7
smasher loop 9= ,flag=i, s.start = 8, s.end = 8
smasher loop 10=g,flag=s, s.start = 10, s.end = 8
smasher loop 11=r,flag=s, s.start = 10, s.end = 8
smasher loop 12=e,flag=s, s.start = 10, s.end = 8
smasher loop 13=p,flag=s, s.start = 10, s.end = 8
smasher loop 14=",flag=s, s.start = 10, s.end = 8
smasher loop 15=",flag=", s.start = 10, s.end = 8
" " arg = <echo hi | grep"" h>,cmd[15] = ",  start = 10 i = 15, flag = "
before cleaning arg = <echo hi | grep"" h>, start = 10 i = 15
Mul single and double quote
 cmd = <echo hi | grep"" h>, flag = ",strt=10,end=8,i=15
figur out end of quote <echo hi | grep"" h>, f=", st=10, en=8, i= 15
cas 3 no quote start,st = 10 en= 8


Case 3
s=10,e=8,i=15 


last end cmd[8]= |



reached end cmd[14 + 1] = <">, flag = " start = 10

end figur out end of quote <echo hi | grep"" h>, f=", st=10, en=15, i= 15
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=10, en=15
filling node with ~grep~
smasher loop 16= ,flag=i, s.start = 10, s.end = 15
smasher loop 17=h,flag=s, s.start = 17, s.end = 15
space_smash, smashed_arg = h, start = 17, end = 17
~echo~
~hi~
~|~
~grep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
smasher loop 7= ,flag=i, s.start = 5, s.end = 6
smasher loop 8=|,flag=i, s.start = 8, s.end = 7
smasher loop 9= ,flag=i, s.start = 8, s.end = 8
smasher loop 10=g,flag=s, s.start = 10, s.end = 8
smasher loop 11=r,flag=s, s.start = 10, s.end = 8
smasher loop 12=",flag=s, s.start = 10, s.end = 8
smasher loop 13=e,flag=", s.start = 10, s.end = 8
" " arg = <echo hi | gr"ep" h>,cmd[13] = e,  start = 10 i = 13, flag = "
smasher loop 14=p,flag=", s.start = 10, s.end = 8
" " arg = <echo hi | gr"ep" h>,cmd[14] = p,  start = 10 i = 14, flag = "
smasher loop 15=",flag=", s.start = 10, s.end = 8
" " arg = <echo hi | gr"ep" h>,cmd[15] = ",  start = 10 i = 15, flag = "
before cleaning arg = <echo hi | gr"ep" h>, start = 10 i = 15
Mul single and double quote
 cmd = <echo hi | gr"ep" h>, flag = ",strt=10,end=8,i=15
figur out end of quote <echo hi | gr"ep" h>, f=", st=10, en=8, i= 15
cas 3 no quote start,st = 10 en= 8


Case 3
s=10,e=8,i=15 


last end cmd[8]= |



reached end cmd[14 + 1] = <">, flag = " start = 10

end figur out end of quote <echo hi | gr"ep" h>, f=", st=10, en=15, i= 15
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=10, en=15
filling node with ~grep~
smasher loop 16= ,flag=i, s.start = 10, s.end = 15
smasher loop 17=h,flag=s, s.start = 17, s.end = 15
space_smash, smashed_arg = h, start = 17, end = 17
~echo~
~hi~
~|~
~grep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
jojinoiinngi negn ve n
v 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
smasher loop 7= ,flag=i, s.start = 5, s.end = 6
smasher loop 8=|,flag=i, s.start = 8, s.end = 7
smasher loop 9= ,flag=i, s.start = 8, s.end = 8
smasher loop 10=g,flag=s, s.start = 10, s.end = 8
smasher loop 11=r,flag=s, s.start = 10, s.end = 8
smasher loop 12=",flag=s, s.start = 10, s.end = 8
smasher loop 13=",flag=", s.start = 10, s.end = 8
" " arg = <echo hi | gr""ep h>,cmd[13] = ",  start = 10 i = 13, flag = "
before cleaning arg = <echo hi | gr""ep h>, start = 10 i = 13
Mul single and double quote
 cmd = <echo hi | gr""ep h>, flag = ",strt=10,end=8,i=13
figur out end of quote <echo hi | gr""ep h>, f=", st=10, en=8, i= 13
cas 3 no quote start,st = 10 en= 8


Case 3
s=10,e=8,i=13 


last end cmd[8]= |



reached end cmd[12 + 1] = <">, flag = " start = 10

end figur out end of quote <echo hi | gr""ep h>, f=", st=10, en=13, i= 13
entering the source of all devil loop
Exiting Multiple merged_str = <gr>, st=10, en=13
filling node with ~gr~
smasher loop 14=e,flag=i, s.start = 10, s.end = 13
smasher loop 15=p,flag=s, s.start = 14, s.end = 13
space_smash, smashed_arg = ep, start = 14, end = 15
smasher loop 16= ,flag=i, s.start = 14, s.end = 15
smasher loop 17=h,flag=s, s.start = 17, s.end = 15
space_smash, smashed_arg = h, start = 17, end = 17
~echo~
~hi~
~|~
~gr~
~ep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
jjooiinninign ge nevn v
 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 


last end cmd[0]= e


fetching end cmd[3 + 2] = <o>, flag = "

reached end cmd[3 + 3] = < >, flag = " start = 0

end figur out end of quote <ech""o hi>, f=", st=0, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 7=h,flag=i, s.start = 0, s.end = 6
smasher loop 8=i,flag=s, s.start = 7, s.end = 6
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi | gr""ep h >,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi | gr""ep h >, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi | gr""ep h >, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi | gr""ep h >, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 


last end cmd[0]= e


fetching end cmd[3 + 2] = <o>, flag = "

reached end cmd[3 + 3] = < >, flag = " start = 0

end figur out end of quote <ech""o hi | gr""ep h >, f=", st=0, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 7=h,flag=i, s.start = 0, s.end = 6
smasher loop 8=i,flag=s, s.start = 7, s.end = 6
space_smash, smashed_arg = hi, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 8
smasher loop 10=|,flag=i, s.start = 10, s.end = 9
smasher loop 11= ,flag=i, s.start = 10, s.end = 10
smasher loop 12=g,flag=s, s.start = 12, s.end = 10
smasher loop 13=r,flag=s, s.start = 12, s.end = 10
smasher loop 14=",flag=s, s.start = 12, s.end = 10
smasher loop 15=",flag=", s.start = 12, s.end = 10
" " arg = <ech""o hi | gr""ep h >,cmd[15] = ",  start = 12 i = 15, flag = "
before cleaning arg = <ech""o hi | gr""ep h >, start = 12 i = 15
Mul single and double quote
 cmd = <ech""o hi | gr""ep h >, flag = ",strt=12,end=10,i=15
figur out end of quote <ech""o hi | gr""ep h >, f=", st=12, en=10, i= 15
cas 3 no quote start,st = 12 en= 10


Case 3
s=12,e=10,i=15 


last end cmd[10]= |



reached end cmd[14 + 1] = <">, flag = " start = 12

end figur out end of quote <ech""o hi | gr""ep h >, f=", st=12, en=15, i= 15
entering the source of all devil loop
Exiting Multiple merged_str = <gr>, st=12, en=15
filling node with ~gr~
smasher loop 16=e,flag=i, s.start = 12, s.end = 15
smasher loop 17=p,flag=s, s.start = 16, s.end = 15
space_smash, smashed_arg = ep, start = 16, end = 17
smasher loop 18= ,flag=i, s.start = 16, s.end = 17
smasher loop 19=h,flag=s, s.start = 19, s.end = 17
space_smash, smashed_arg = h, start = 19, end = 19
smasher loop 20= ,flag=i, s.start = 19, s.end = 19
~echo~
~hi~
~|~
~gr~
~ep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = e, start = 0, end = 0
smasher loop 1= ,flag=i, s.start = 0, s.end = 0
smasher loop 2=|,flag=i, s.start = 2, s.end = 1
smasher loop 3= ,flag=i, s.start = 2, s.end = 2
smasher loop 4=g,flag=s, s.start = 4, s.end = 2
smasher loop 5=r,flag=s, s.start = 4, s.end = 2
smasher loop 6=",flag=s, s.start = 4, s.end = 2
smasher loop 7=",flag=", s.start = 4, s.end = 2
" " arg = <e | gr""ep h >,cmd[7] = ",  start = 4 i = 7, flag = "
before cleaning arg = <e | gr""ep h >, start = 4 i = 7
Mul single and double quote
 cmd = <e | gr""ep h >, flag = ",strt=4,end=2,i=7
figur out end of quote <e | gr""ep h >, f=", st=4, en=2, i= 7
cas 3 no quote start,st = 4 en= 2


Case 3
s=4,e=2,i=7 


last end cmd[2]= |



reached end cmd[6 + 1] = <">, flag = " start = 4

end figur out end of quote <e | gr""ep h >, f=", st=4, en=7, i= 7
entering the source of all devil loop
Exiting Multiple merged_str = <gr>, st=4, en=7
filling node with ~gr~
smasher loop 8=e,flag=i, s.start = 4, s.end = 7
smasher loop 9=p,flag=s, s.start = 8, s.end = 7
space_smash, smashed_arg = ep, start = 8, end = 9
smasher loop 10= ,flag=i, s.start = 8, s.end = 9
smasher loop 11=h,flag=s, s.start = 11, s.end = 9
space_smash, smashed_arg = h, start = 11, end = 11
smasher loop 12= ,flag=i, s.start = 11, s.end = 11
~e~
~|~
~gr~
~ep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = e, start = 0, end = 0
smasher loop 1= ,flag=i, s.start = 0, s.end = 0
smasher loop 2=|,flag=i, s.start = 2, s.end = 1
smasher loop 3= ,flag=i, s.start = 2, s.end = 2
smasher loop 4=g,flag=s, s.start = 4, s.end = 2
smasher loop 5=r,flag=s, s.start = 4, s.end = 2
smasher loop 6=",flag=s, s.start = 4, s.end = 2
smasher loop 7=",flag=", s.start = 4, s.end = 2
" " arg = <e | gr""ep  h >,cmd[7] = ",  start = 4 i = 7, flag = "
before cleaning arg = <e | gr""ep  h >, start = 4 i = 7
Mul single and double quote
 cmd = <e | gr""ep  h >, flag = ",strt=4,end=2,i=7
figur out end of quote <e | gr""ep  h >, f=", st=4, en=2, i= 7
cas 3 no quote start,st = 4 en= 2


Case 3
s=4,e=2,i=7 


last end cmd[2]= |



reached end cmd[6 + 1] = <">, flag = " start = 4

end figur out end of quote <e | gr""ep  h >, f=", st=4, en=7, i= 7
entering the source of all devil loop
Exiting Multiple merged_str = <gr>, st=4, en=7
filling node with ~gr~
smasher loop 8=e,flag=i, s.start = 4, s.end = 7
smasher loop 9=p,flag=s, s.start = 8, s.end = 7
space_smash, smashed_arg = ep, start = 8, end = 9
smasher loop 10= ,flag=i, s.start = 8, s.end = 9
smasher loop 11= ,flag=s, s.start = 12, s.end = 9
smasher loop 12=h,flag=s, s.start = 12, s.end = 9
space_smash, smashed_arg = h, start = 12, end = 12
smasher loop 13= ,flag=i, s.start = 12, s.end = 12
~e~
~|~
~gr~
~ep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=g,flag=i, s.start = 0, s.end = 0
smasher loop 1=r,flag=s, s.start = 0, s.end = 0
smasher loop 2=",flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=", s.start = 0, s.end = 0
" " arg = <gr""ep  h >,cmd[3] = ",  start = 0 i = 3, flag = "
before cleaning arg = <gr""ep  h >, start = 0 i = 3
Mul single and double quote
 cmd = <gr""ep  h >, flag = ",strt=0,end=0,i=3
figur out end of quote <gr""ep  h >, f=", st=0, en=0, i= 3
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=3 


last end cmd[0]= g


fetching end cmd[2 + 2] = <e>, flag = "
fetching end cmd[2 + 3] = <p>, flag = "

reached end cmd[2 + 4] = < >, flag = " start = 0

end figur out end of quote <gr""ep  h >, f=", st=0, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=0, en=6
filling node with ~grep~
smasher loop 7= ,flag=i, s.start = 0, s.end = 6
smasher loop 8=h,flag=s, s.start = 8, s.end = 6
space_smash, smashed_arg = h, start = 8, end = 8
smasher loop 9= ,flag=i, s.start = 8, s.end = 8
~grep~
~h~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
~cat~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
~cat~
joining env 
smasher loop 0=d,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = d, start = 0, end = 0
~d~
joining env 
smasher loop 0=d,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = d, start = 0, end = 0
~d~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=l,flag=s, s.start = 0, s.end = 0
smasher loop 2=e,flag=s, s.start = 0, s.end = 0
smasher loop 3=a,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = clear, start = 0, end = 4
~clear~
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=e,flag=s, s.start = 3, s.end = 2
smasher loop 6=p,flag=s, s.start = 3, s.end = 2
space_smash, smashed_arg = grep, start = 3, end = 6
smasher loop 7= ,flag=i, s.start = 3, s.end = 6
" " arg = <ls|grep "h">,cmd[7] =  ,  start = 8 i = 7, flag = "
smasher loop 8=",flag=", s.start = 8, s.end = 6
" " arg = <ls|grep "h">,cmd[8] = ",  start = 8 i = 8, flag = "
smasher loop 10=",flag=", s.start = 8, s.end = 6
" " arg = <ls|grep "h">,cmd[10] = ",  start = 8 i = 10, flag = "
before cleaning arg = <ls|grep "h">, start = 8 i = 10
Mul single and double quote
 cmd = <ls|grep "h">, flag = ",strt=8,end=6,i=10
figur out end of quote <ls|grep "h">, f=", st=8, en=6, i= 10
calling case 1 filling normal quote  main cmd[10] = "  cmd[11] =   , start = 8, flag = "
Case 1 Filling normal quote, cmd = ls|grep "h", start = 8, end = 10
final_arg before expand = h, start = 8, end = 10
final_arg after filling normal case = h, start = 8, end = 10
end figur out end of quote <ls|grep "h">, f=", st=8, en=10, i= 10
filling node with ~h~
~ls~
~|~
~grep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
jojioniinnign ge nevn v
 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=e,flag=s, s.start = 3, s.end = 2
smasher loop 6=p,flag=s, s.start = 3, s.end = 2
smasher loop 7=�,flag=s, s.start = 3, s.end = 2
smasher loop 8=�,flag=s, s.start = 3, s.end = 2
smasher loop 9=',flag=s, s.start = 3, s.end = 2
smasher loop 10=',flag=', s.start = 3, s.end = 2
check for single quote <'>
before clean <ls|grep§'' h>,start=3,i=10
Mul single and double quote
 cmd = <ls|grep§'' h>, flag = ',strt=3,end=2,i=10
figur out end of quote <ls|grep§'' h>, f=', st=3, en=2, i= 10
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=10 


last end cmd[2]= |



reached end cmd[9 + 1] = <'>, flag = ' start = 3

splitted_arg = grep§
end figur out end of quote <ls|grep§'' h>, f=', st=3, en=10, i= 10
entering the source of all devil loop
Exiting Multiple merged_str = <grep§>, st=3, en=10
filling node with ~grep§~
smasher loop 11= ,flag=i, s.start = 3, s.end = 10
smasher loop 12=h,flag=s, s.start = 12, s.end = 10
space_smash, smashed_arg = h, start = 12, end = 12
~ls~
~|~
~grep§~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
jjooiinniinngg  eennvv  

smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=e,flag=s, s.start = 3, s.end = 2
smasher loop 6=p,flag=s, s.start = 3, s.end = 2
smasher loop 7=',flag=s, s.start = 3, s.end = 2
smasher loop 8=',flag=', s.start = 3, s.end = 2
check for single quote <'>
before clean <ls|grep'' h>,start=3,i=8
Mul single and double quote
 cmd = <ls|grep'' h>, flag = ',strt=3,end=2,i=8
figur out end of quote <ls|grep'' h>, f=', st=3, en=2, i= 8
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=8 


last end cmd[2]= |



reached end cmd[7 + 1] = <'>, flag = ' start = 3

splitted_arg = grep
end figur out end of quote <ls|grep'' h>, f=', st=3, en=8, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=3, en=8
filling node with ~grep~
smasher loop 9= ,flag=i, s.start = 3, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~grep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=e,flag=s, s.start = 3, s.end = 2
smasher loop 6=p,flag=s, s.start = 3, s.end = 2
smasher loop 7=",flag=s, s.start = 3, s.end = 2
smasher loop 8=",flag=", s.start = 3, s.end = 2
" " arg = <ls|grep"" h>,cmd[8] = ",  start = 3 i = 8, flag = "
before cleaning arg = <ls|grep"" h>, start = 3 i = 8
Mul single and double quote
 cmd = <ls|grep"" h>, flag = ",strt=3,end=2,i=8
figur out end of quote <ls|grep"" h>, f=", st=3, en=2, i= 8
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=8 


last end cmd[2]= |



reached end cmd[7 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|grep"" h>, f=", st=3, en=8, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=3, en=8
filling node with ~grep~
smasher loop 9= ,flag=i, s.start = 3, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~grep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=",flag=i, s.start = 2, s.end = 2
" " arg = <ls|"grep" h>,cmd[3] = ",  start = 3 i = 3, flag = "
smasher loop 5=r,flag=", s.start = 3, s.end = 2
" " arg = <ls|"grep" h>,cmd[5] = r,  start = 3 i = 5, flag = "
smasher loop 6=e,flag=", s.start = 3, s.end = 2
" " arg = <ls|"grep" h>,cmd[6] = e,  start = 3 i = 6, flag = "
smasher loop 7=p,flag=", s.start = 3, s.end = 2
" " arg = <ls|"grep" h>,cmd[7] = p,  start = 3 i = 7, flag = "
smasher loop 8=",flag=", s.start = 3, s.end = 2
" " arg = <ls|"grep" h>,cmd[8] = ",  start = 3 i = 8, flag = "
before cleaning arg = <ls|"grep" h>, start = 3 i = 8
Mul single and double quote
 cmd = <ls|"grep" h>, flag = ",strt=3,end=2,i=8
figur out end of quote <ls|"grep" h>, f=", st=3, en=2, i= 8
calling case 2 Doesn't end with quote 
main cmd[8] = "  cmd[9] =   , start = 3, flag = "


Case 2
s=3,e=2,i=8 
after decrement s=3,e=2,i=8 
fetching end cmd[8 + 1] = < >, flag = "
fetching end cmd[8 + 2] = <h>, flag = "

reached end cmd[8 + 3] = < >, flag = " start = 3

end figur out end of quote <ls|"grep" h>, f=", st=3, en=11, i= 10
filling node with ~grep h~
~ls~
~|~
~grep h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=e,flag=s, s.start = 3, s.end = 2
smasher loop 6=",flag=s, s.start = 3, s.end = 2
smasher loop 7=p,flag=", s.start = 3, s.end = 2
" " arg = <ls|gre"p" h>,cmd[7] = p,  start = 3 i = 7, flag = "
smasher loop 8=",flag=", s.start = 3, s.end = 2
" " arg = <ls|gre"p" h>,cmd[8] = ",  start = 3 i = 8, flag = "
before cleaning arg = <ls|gre"p" h>, start = 3 i = 8
Mul single and double quote
 cmd = <ls|gre"p" h>, flag = ",strt=3,end=2,i=8
figur out end of quote <ls|gre"p" h>, f=", st=3, en=2, i= 8
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=8 


last end cmd[2]= |



reached end cmd[7 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|gre"p" h>, f=", st=3, en=8, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=3, en=8
filling node with ~grep~
smasher loop 9= ,flag=i, s.start = 3, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~grep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
jjoioniinnign ge nevn v
 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=e,flag=s, s.start = 3, s.end = 2
smasher loop 6=",flag=s, s.start = 3, s.end = 2
smasher loop 7=",flag=", s.start = 3, s.end = 2
" " arg = <ls|gre""p h>,cmd[7] = ",  start = 3 i = 7, flag = "
before cleaning arg = <ls|gre""p h>, start = 3 i = 7
Mul single and double quote
 cmd = <ls|gre""p h>, flag = ",strt=3,end=2,i=7
figur out end of quote <ls|gre""p h>, f=", st=3, en=2, i= 7
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=7 


last end cmd[2]= |



reached end cmd[6 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|gre""p h>, f=", st=3, en=7, i= 7
entering the source of all devil loop
Exiting Multiple merged_str = <gre>, st=3, en=7
filling node with ~gre~
smasher loop 8=p,flag=i, s.start = 3, s.end = 7
space_smash, smashed_arg = p, start = 8, end = 8
smasher loop 9= ,flag=i, s.start = 8, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~gre~
~p~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=e,flag=s, s.start = 3, s.end = 2
smasher loop 6=',flag=s, s.start = 3, s.end = 2
smasher loop 7=',flag=', s.start = 3, s.end = 2
check for single quote <'>
before clean <ls|gre''p h>,start=3,i=7
Mul single and double quote
 cmd = <ls|gre''p h>, flag = ',strt=3,end=2,i=7
figur out end of quote <ls|gre''p h>, f=', st=3, en=2, i= 7
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=7 


last end cmd[2]= |



reached end cmd[6 + 1] = <'>, flag = ' start = 3

splitted_arg = gre
end figur out end of quote <ls|gre''p h>, f=', st=3, en=7, i= 7
entering the source of all devil loop
Exiting Multiple merged_str = <gre>, st=3, en=7
filling node with ~gre~
smasher loop 8=p,flag=i, s.start = 3, s.end = 7
space_smash, smashed_arg = p, start = 8, end = 8
smasher loop 9= ,flag=i, s.start = 8, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~gre~
~p~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
jojioniinnign ge nevn v
 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
smasher loop 5=g,flag=s, s.start = 5, s.end = 3
smasher loop 6=r,flag=s, s.start = 5, s.end = 3
smasher loop 7=e,flag=s, s.start = 5, s.end = 3
smasher loop 8=",flag=s, s.start = 5, s.end = 3
smasher loop 9=",flag=", s.start = 5, s.end = 3
" " arg = <ls | gre""p h>,cmd[9] = ",  start = 5 i = 9, flag = "
before cleaning arg = <ls | gre""p h>, start = 5 i = 9
Mul single and double quote
 cmd = <ls | gre""p h>, flag = ",strt=5,end=3,i=9
figur out end of quote <ls | gre""p h>, f=", st=5, en=3, i= 9
cas 3 no quote start,st = 5 en= 3


Case 3
s=5,e=3,i=9 


last end cmd[3]= |


fetching end cmd[9 + 1] = <p>, flag = "
fetching end cmd[9 + 2] = < >, flag = "
fetching end cmd[9 + 3] = <h>, flag = "

reached end cmd[9 + 4] = < >, flag = " start = 5

end figur out end of quote <ls | gre""p h>, f=", st=5, en=13, i= 12
filling node with ~grep h~
~ls~
~|~
~grep h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=d,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cd, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=t,flag=s, s.start = 3, s.end = 1
smasher loop 4=r,flag=s, s.start = 3, s.end = 1
smasher loop 5=a,flag=s, s.start = 3, s.end = 1
smasher loop 6=s,flag=s, s.start = 3, s.end = 1
smasher loop 7=h,flag=s, s.start = 3, s.end = 1
smasher loop 8=/,flag=s, s.start = 3, s.end = 1
space_smash, smashed_arg = trash/, start = 3, end = 8
~cd~
~trash/~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=",flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=", s.start = 3, s.end = 2
" " arg = <ls|g""rep h>,cmd[5] = ",  start = 3 i = 5, flag = "
before cleaning arg = <ls|g""rep h>, start = 3 i = 5
Mul single and double quote
 cmd = <ls|g""rep h>, flag = ",strt=3,end=2,i=5
figur out end of quote <ls|g""rep h>, f=", st=3, en=2, i= 5
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=5 


last end cmd[2]= |



reached end cmd[4 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|g""rep h>, f=", st=3, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <g>, st=3, en=5
filling node with ~g~
smasher loop 6=r,flag=i, s.start = 3, s.end = 5
smasher loop 7=e,flag=s, s.start = 6, s.end = 5
smasher loop 8=p,flag=s, s.start = 6, s.end = 5
space_smash, smashed_arg = rep, start = 6, end = 8
smasher loop 9= ,flag=i, s.start = 6, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~g~
~rep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=",flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=", s.start = 3, s.end = 2
" " arg = <ls|g""reph>,cmd[5] = ",  start = 3 i = 5, flag = "
before cleaning arg = <ls|g""reph>, start = 3 i = 5
Mul single and double quote
 cmd = <ls|g""reph>, flag = ",strt=3,end=2,i=5
figur out end of quote <ls|g""reph>, f=", st=3, en=2, i= 5
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=5 


last end cmd[2]= |


fetching end cmd[4 + 1] = <">, flag = "

reached end cmd[4 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|g""reph>, f=", st=3, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <g>, st=3, en=5
filling node with ~g~
smasher loop 6=r,flag=i, s.start = 3, s.end = 5
smasher loop 7=e,flag=s, s.start = 6, s.end = 5
smasher loop 8=p,flag=s, s.start = 6, s.end = 5
smasher loop 9=h,flag=s, s.start = 6, s.end = 5
space_smash, smashed_arg = reph, start = 6, end = 9
~ls~
~|~
~g~
~reph~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=",flag=i, s.start = 2, s.end = 2
" " arg = <ls|""reph>,cmd[3] = ",  start = 3 i = 3, flag = "
before cleaning arg = <ls|""reph>, start = 3 i = 4
Mul single and double quote
 cmd = <ls|""reph>, flag = ",strt=3,end=2,i=4
figur out end of quote <ls|""reph>, f=", st=3, en=2, i= 4
calling case 2 Doesn't end with quote 
main cmd[4] = "  cmd[5] = r , start = 3, flag = "


Case 2
s=3,e=2,i=4 
after decrement s=3,e=2,i=4 
fetching end cmd[4 + 1] = <r>, flag = "
fetching end cmd[4 + 2] = <e>, flag = "
fetching end cmd[4 + 3] = <p>, flag = "
fetching end cmd[4 + 4] = <h>, flag = "

reached end cmd[4 + 5] = < >, flag = " start = 3

end figur out end of quote <ls|""reph>, f=", st=3, en=9, i= 8
filling node with ~reph~
~ls~
~|~
~reph~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=",flag=i, s.start = 2, s.end = 2
" " arg = <ls|""reph h>,cmd[3] = ",  start = 3 i = 3, flag = "
before cleaning arg = <ls|""reph h>, start = 3 i = 4
Mul single and double quote
 cmd = <ls|""reph h>, flag = ",strt=3,end=2,i=4
figur out end of quote <ls|""reph h>, f=", st=3, en=2, i= 4
calling case 2 Doesn't end with quote 
main cmd[4] = "  cmd[5] = r , start = 3, flag = "


Case 2
s=3,e=2,i=4 
after decrement s=3,e=2,i=4 
fetching end cmd[4 + 1] = <r>, flag = "
fetching end cmd[4 + 2] = <e>, flag = "
fetching end cmd[4 + 3] = <p>, flag = "
fetching end cmd[4 + 4] = <h>, flag = "
fetching end cmd[4 + 5] = < >, flag = "
fetching end cmd[4 + 6] = <h>, flag = "

reached end cmd[4 + 7] = < >, flag = " start = 3

end figur out end of quote <ls|""reph h>, f=", st=3, en=11, i= 10
filling node with ~reph h~
~ls~
~|~
~reph h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=",flag=i, s.start = 2, s.end = 2
" " arg = <ls|"g"reph h>,cmd[3] = ",  start = 3 i = 3, flag = "
smasher loop 5=",flag=", s.start = 3, s.end = 2
" " arg = <ls|"g"reph h>,cmd[5] = ",  start = 3 i = 5, flag = "
before cleaning arg = <ls|"g"reph h>, start = 3 i = 5
Mul single and double quote
 cmd = <ls|"g"reph h>, flag = ",strt=3,end=2,i=5
figur out end of quote <ls|"g"reph h>, f=", st=3, en=2, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] = r , start = 3, flag = "


Case 2
s=3,e=2,i=5 
after decrement s=3,e=2,i=5 
fetching end cmd[5 + 1] = <r>, flag = "
fetching end cmd[5 + 2] = <e>, flag = "
fetching end cmd[5 + 3] = <p>, flag = "
fetching end cmd[5 + 4] = <h>, flag = "
fetching end cmd[5 + 5] = < >, flag = "
fetching end cmd[5 + 6] = <h>, flag = "

reached end cmd[5 + 7] = < >, flag = " start = 3

end figur out end of quote <ls|"g"reph h>, f=", st=3, en=12, i= 11
filling node with ~greph h~
~ls~
~|~
~greph h~
count_outliar_redire i = -1, ? i == -1 ok:error
jjoioniinngi negn ve n
v 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=",flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=", s.start = 3, s.end = 2
" " arg = <ls|g""reph h>,cmd[5] = ",  start = 3 i = 5, flag = "
before cleaning arg = <ls|g""reph h>, start = 3 i = 5
Mul single and double quote
 cmd = <ls|g""reph h>, flag = ",strt=3,end=2,i=5
figur out end of quote <ls|g""reph h>, f=", st=3, en=2, i= 5
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=5 


last end cmd[2]= |


fetching end cmd[4 + 1] = <">, flag = "

reached end cmd[4 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|g""reph h>, f=", st=3, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <g>, st=3, en=5
filling node with ~g~
smasher loop 6=r,flag=i, s.start = 3, s.end = 5
smasher loop 7=e,flag=s, s.start = 6, s.end = 5
smasher loop 8=p,flag=s, s.start = 6, s.end = 5
smasher loop 9=h,flag=s, s.start = 6, s.end = 5
space_smash, smashed_arg = reph, start = 6, end = 9
smasher loop 10= ,flag=i, s.start = 6, s.end = 9
smasher loop 11=h,flag=s, s.start = 11, s.end = 9
space_smash, smashed_arg = h, start = 11, end = 11
~ls~
~|~
~g~
~reph~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=0,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = 0, start = 0, end = 0
smasher loop 1=|,flag=i, s.start = 0, s.end = 0
smasher loop 2=2,flag=i, s.start = 1, s.end = 1
smasher loop 3=",flag=s, s.start = 2, s.end = 1
smasher loop 4=",flag=", s.start = 2, s.end = 1
" " arg = <0|2""5eph h>,cmd[4] = ",  start = 2 i = 4, flag = "
before cleaning arg = <0|2""5eph h>, start = 2 i = 4
Mul single and double quote
 cmd = <0|2""5eph h>, flag = ",strt=2,end=1,i=4
figur out end of quote <0|2""5eph h>, f=", st=2, en=1, i= 4
cas 3 no quote start,st = 2 en= 1


Case 3
s=2,e=1,i=4 


last end cmd[1]= |


fetching end cmd[3 + 1] = <">, flag = "

reached end cmd[3 + 1] = <">, flag = " start = 2

end figur out end of quote <0|2""5eph h>, f=", st=2, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <2>, st=2, en=4
filling node with ~2~
smasher loop 5=5,flag=i, s.start = 2, s.end = 4
smasher loop 6=e,flag=s, s.start = 5, s.end = 4
smasher loop 7=p,flag=s, s.start = 5, s.end = 4
smasher loop 8=h,flag=s, s.start = 5, s.end = 4
space_smash, smashed_arg = 5eph, start = 5, end = 8
smasher loop 9= ,flag=i, s.start = 5, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~0~
~|~
~2~
~5eph~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=2,flag=i, s.start = 2, s.end = 2
smasher loop 4=",flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=", s.start = 3, s.end = 2
" " arg = <ls|2""5eph h>,cmd[5] = ",  start = 3 i = 5, flag = "
before cleaning arg = <ls|2""5eph h>, start = 3 i = 5
Mul single and double quote
 cmd = <ls|2""5eph h>, flag = ",strt=3,end=2,i=5
figur out end of quote <ls|2""5eph h>, f=", st=3, en=2, i= 5
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=5 


last end cmd[2]= |


fetching end cmd[4 + 1] = <">, flag = "

reached end cmd[4 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|2""5eph h>, f=", st=3, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <2>, st=3, en=5
filling node with ~2~
smasher loop 6=5,flag=i, s.start = 3, s.end = 5
smasher loop 7=e,flag=s, s.start = 6, s.end = 5
smasher loop 8=p,flag=s, s.start = 6, s.end = 5
smasher loop 9=h,flag=s, s.start = 6, s.end = 5
space_smash, smashed_arg = 5eph, start = 6, end = 9
smasher loop 10= ,flag=i, s.start = 6, s.end = 9
smasher loop 11=h,flag=s, s.start = 11, s.end = 9
space_smash, smashed_arg = h, start = 11, end = 11
~ls~
~|~
~2~
~5eph~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 




smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=2,flag=i, s.start = 2, s.end = 2
smasher loop 4=",flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=", s.start = 3, s.end = 2
" " arg = <ls|2""5eph h>,cmd[5] = ",  start = 3 i = 5, flag = "
before cleaning arg = <ls|2""5eph h>, start = 3 i = 5
Mul single and double quote
 cmd = <ls|2""5eph h>, flag = ",strt=3,end=2,i=5
figur out end of quote <ls|2""5eph h>, f=", st=3, en=2, i= 5
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=5 


last end cmd[2]= |


fetching end cmd[4 + 1] = <">, flag = "

reached end cmd[4 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|2""5eph h>, f=", st=3, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <2>, st=3, en=5
filling node with ~2~
smasher loop 6=5,flag=i, s.start = 3, s.end = 5
smasher loop 7=e,flag=s, s.start = 6, s.end = 5
smasher loop 8=p,flag=s, s.start = 6, s.end = 5
smasher loop 9=h,flag=s, s.start = 6, s.end = 5
space_smash, smashed_arg = 5eph, start = 6, end = 9
smasher loop 10= ,flag=i, s.start = 6, s.end = 9
smasher loop 11=h,flag=s, s.start = 11, s.end = 9
space_smash, smashed_arg = h, start = 11, end = 11
~ls~
~|~
~2~
~5eph~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=3,flag=i, s.start = 2, s.end = 2
smasher loop 4=",flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=", s.start = 3, s.end = 2
" " arg = <ls|3""5eph h>,cmd[5] = ",  start = 3 i = 5, flag = "
before cleaning arg = <ls|3""5eph h>, start = 3 i = 5
Mul single and double quote
 cmd = <ls|3""5eph h>, flag = ",strt=3,end=2,i=5
figur out end of quote <ls|3""5eph h>, f=", st=3, en=2, i= 5
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=5 


last end cmd[2]= |


fetching end cmd[4 + 1] = <">, flag = "

reached end cmd[4 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|3""5eph h>, f=", st=3, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <3>, st=3, en=5
filling node with ~3~
smasher loop 6=5,flag=i, s.start = 3, s.end = 5
smasher loop 7=e,flag=s, s.start = 6, s.end = 5
smasher loop 8=p,flag=s, s.start = 6, s.end = 5
smasher loop 9=h,flag=s, s.start = 6, s.end = 5
space_smash, smashed_arg = 5eph, start = 6, end = 9
smasher loop 10= ,flag=i, s.start = 6, s.end = 9
smasher loop 11=h,flag=s, s.start = 11, s.end = 9
space_smash, smashed_arg = h, start = 11, end = 11
~ls~
~|~
~3~
~5eph~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=3,flag=i, s.start = 2, s.end = 2
smasher loop 4=",flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=", s.start = 3, s.end = 2
" " arg = <ls|3""6eph h>,cmd[5] = ",  start = 3 i = 5, flag = "
before cleaning arg = <ls|3""6eph h>, start = 3 i = 5
Mul single and double quote
 cmd = <ls|3""6eph h>, flag = ",strt=3,end=2,i=5
figur out end of quote <ls|3""6eph h>, f=", st=3, en=2, i= 5
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=5 


last end cmd[2]= |


fetching end cmd[4 + 1] = <">, flag = "

reached end cmd[4 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|3""6eph h>, f=", st=3, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <3>, st=3, en=5
filling node with ~3~
smasher loop 6=6,flag=i, s.start = 3, s.end = 5
smasher loop 7=e,flag=s, s.start = 6, s.end = 5
smasher loop 8=p,flag=s, s.start = 6, s.end = 5
smasher loop 9=h,flag=s, s.start = 6, s.end = 5
space_smash, smashed_arg = 6eph, start = 6, end = 9
smasher loop 10= ,flag=i, s.start = 6, s.end = 9
smasher loop 11=h,flag=s, s.start = 11, s.end = 9
space_smash, smashed_arg = h, start = 11, end = 11
~ls~
~|~
~3~
~6eph~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
jojinoiinngi negn ve n
v 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=3,flag=i, s.start = 2, s.end = 2
smasher loop 4=",flag=s, s.start = 3, s.end = 2
smasher loop 5=6,flag=", s.start = 3, s.end = 2
" " arg = <ls|3"6eph h>,cmd[5] = 6,  start = 3 i = 5, flag = "
smasher loop 6=e,flag=", s.start = 3, s.end = 2
" " arg = <ls|3"6eph h>,cmd[6] = e,  start = 3 i = 6, flag = "
smasher loop 7=p,flag=", s.start = 3, s.end = 2
" " arg = <ls|3"6eph h>,cmd[7] = p,  start = 3 i = 7, flag = "
smasher loop 8=h,flag=", s.start = 3, s.end = 2
" " arg = <ls|3"6eph h>,cmd[8] = h,  start = 3 i = 8, flag = "
smasher loop 9= ,flag=", s.start = 3, s.end = 2
" " arg = <ls|3"6eph h>,cmd[9] =  ,  start = 3 i = 9, flag = "
smasher loop 10=h,flag=", s.start = 3, s.end = 2
" " arg = <ls|3"6eph h>,cmd[10] = h,  start = 3 i = 10, flag = "
Unclose " double quote, throwing an error
Will not visualize cmd this is an errored one
~ls~
~|~
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=",flag=s, s.start = 3, s.end = 2
smasher loop 5=r,flag=", s.start = 3, s.end = 2
" " arg = <ls|g"reph" h>,cmd[5] = r,  start = 3 i = 5, flag = "
smasher loop 6=e,flag=", s.start = 3, s.end = 2
" " arg = <ls|g"reph" h>,cmd[6] = e,  start = 3 i = 6, flag = "
smasher loop 7=p,flag=", s.start = 3, s.end = 2
" " arg = <ls|g"reph" h>,cmd[7] = p,  start = 3 i = 7, flag = "
smasher loop 8=h,flag=", s.start = 3, s.end = 2
" " arg = <ls|g"reph" h>,cmd[8] = h,  start = 3 i = 8, flag = "
smasher loop 9=",flag=", s.start = 3, s.end = 2
" " arg = <ls|g"reph" h>,cmd[9] = ",  start = 3 i = 9, flag = "
before cleaning arg = <ls|g"reph" h>, start = 3 i = 9
Mul single and double quote
 cmd = <ls|g"reph" h>, flag = ",strt=3,end=2,i=9
figur out end of quote <ls|g"reph" h>, f=", st=3, en=2, i= 9
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=9 


last end cmd[2]= |


fetching end cmd[8 + 1] = <">, flag = "

reached end cmd[8 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|g"reph" h>, f=", st=3, en=9, i= 9
entering the source of all devil loop
Exiting Multiple merged_str = <greph>, st=3, en=9
filling node with ~greph~
smasher loop 10= ,flag=i, s.start = 3, s.end = 9
smasher loop 11=h,flag=s, s.start = 11, s.end = 9
space_smash, smashed_arg = h, start = 11, end = 11
~ls~
~|~
~greph~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
jojioniinnign ge nevn v
 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=",flag=s, s.start = 3, s.end = 2
smasher loop 5=r,flag=", s.start = 3, s.end = 2
" " arg = <ls|g"rep" h>,cmd[5] = r,  start = 3 i = 5, flag = "
smasher loop 6=e,flag=", s.start = 3, s.end = 2
" " arg = <ls|g"rep" h>,cmd[6] = e,  start = 3 i = 6, flag = "
smasher loop 7=p,flag=", s.start = 3, s.end = 2
" " arg = <ls|g"rep" h>,cmd[7] = p,  start = 3 i = 7, flag = "
smasher loop 8=",flag=", s.start = 3, s.end = 2
" " arg = <ls|g"rep" h>,cmd[8] = ",  start = 3 i = 8, flag = "
before cleaning arg = <ls|g"rep" h>, start = 3 i = 8
Mul single and double quote
 cmd = <ls|g"rep" h>, flag = ",strt=3,end=2,i=8
figur out end of quote <ls|g"rep" h>, f=", st=3, en=2, i= 8
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=8 


last end cmd[2]= |


fetching end cmd[7 + 1] = <">, flag = "

reached end cmd[7 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|g"rep" h>, f=", st=3, en=8, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=3, en=8
filling node with ~grep~
smasher loop 9= ,flag=i, s.start = 3, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~grep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=",flag=s, s.start = 3, s.end = 2
smasher loop 5=r,flag=", s.start = 3, s.end = 2
" " arg = <ls|g"re"p h>,cmd[5] = r,  start = 3 i = 5, flag = "
smasher loop 6=e,flag=", s.start = 3, s.end = 2
" " arg = <ls|g"re"p h>,cmd[6] = e,  start = 3 i = 6, flag = "
smasher loop 7=",flag=", s.start = 3, s.end = 2
" " arg = <ls|g"re"p h>,cmd[7] = ",  start = 3 i = 7, flag = "
before cleaning arg = <ls|g"re"p h>, start = 3 i = 7
Mul single and double quote
 cmd = <ls|g"re"p h>, flag = ",strt=3,end=2,i=7
figur out end of quote <ls|g"re"p h>, f=", st=3, en=2, i= 7
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=7 


last end cmd[2]= |


fetching end cmd[6 + 1] = <">, flag = "

reached end cmd[6 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|g"re"p h>, f=", st=3, en=7, i= 7
entering the source of all devil loop
Exiting Multiple merged_str = <gre>, st=3, en=7
filling node with ~gre~
smasher loop 8=p,flag=i, s.start = 3, s.end = 7
space_smash, smashed_arg = p, start = 8, end = 8
smasher loop 9= ,flag=i, s.start = 8, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~gre~
~p~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=",flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=", s.start = 3, s.end = 2
" " arg = <ls|g""rep h>,cmd[5] = ",  start = 3 i = 5, flag = "
before cleaning arg = <ls|g""rep h>, start = 3 i = 5
Mul single and double quote
 cmd = <ls|g""rep h>, flag = ",strt=3,end=2,i=5
figur out end of quote <ls|g""rep h>, f=", st=3, en=2, i= 5
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=5 


last end cmd[2]= |


fetching end cmd[4 + 1] = <">, flag = "

reached end cmd[4 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|g""rep h>, f=", st=3, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <g>, st=3, en=5
filling node with ~g~
smasher loop 6=r,flag=i, s.start = 3, s.end = 5
smasher loop 7=e,flag=s, s.start = 6, s.end = 5
smasher loop 8=p,flag=s, s.start = 6, s.end = 5
space_smash, smashed_arg = rep, start = 6, end = 8
smasher loop 9= ,flag=i, s.start = 6, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~g~
~rep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=",flag=s, s.start = 3, s.end = 2
smasher loop 5=r,flag=", s.start = 3, s.end = 2
" " arg = <ls|g"rep" h>,cmd[5] = r,  start = 3 i = 5, flag = "
smasher loop 6=e,flag=", s.start = 3, s.end = 2
" " arg = <ls|g"rep" h>,cmd[6] = e,  start = 3 i = 6, flag = "
smasher loop 7=p,flag=", s.start = 3, s.end = 2
" " arg = <ls|g"rep" h>,cmd[7] = p,  start = 3 i = 7, flag = "
smasher loop 8=",flag=", s.start = 3, s.end = 2
" " arg = <ls|g"rep" h>,cmd[8] = ",  start = 3 i = 8, flag = "
before cleaning arg = <ls|g"rep" h>, start = 3 i = 8
Mul single and double quote
 cmd = <ls|g"rep" h>, flag = ",strt=3,end=2,i=8
figur out end of quote <ls|g"rep" h>, f=", st=3, en=2, i= 8
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=8 


last end cmd[2]= |


fetching end cmd[7 + 1] = <">, flag = "

reached end cmd[7 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|g"rep" h>, f=", st=3, en=8, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=3, en=8
filling node with ~grep~
smasher loop 9= ,flag=i, s.start = 3, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~grep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=e,flag=s, s.start = 3, s.end = 2
smasher loop 6=p,flag=s, s.start = 3, s.end = 2
smasher loop 7=",flag=s, s.start = 3, s.end = 2
smasher loop 8=",flag=", s.start = 3, s.end = 2
" " arg = <ls|grep"" h>,cmd[8] = ",  start = 3 i = 8, flag = "
before cleaning arg = <ls|grep"" h>, start = 3 i = 8
Mul single and double quote
 cmd = <ls|grep"" h>, flag = ",strt=3,end=2,i=8
figur out end of quote <ls|grep"" h>, f=", st=3, en=2, i= 8
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=8 


last end cmd[2]= |


fetching end cmd[7 + 1] = <">, flag = "

reached end cmd[7 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|grep"" h>, f=", st=3, en=8, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=3, en=8
filling node with ~grep~
smasher loop 9= ,flag=i, s.start = 3, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~grep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
jojioniinnign ge nevn v
 







smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=e,flag=s, s.start = 3, s.end = 2
smasher loop 6=p,flag=s, s.start = 3, s.end = 2
smasher loop 7=",flag=s, s.start = 3, s.end = 2
smasher loop 8=",flag=", s.start = 3, s.end = 2
" " arg = <ls|grep"" h>,cmd[8] = ",  start = 3 i = 8, flag = "
before cleaning arg = <ls|grep"" h>, start = 3 i = 8
Mul single and double quote
 cmd = <ls|grep"" h>, flag = ",strt=3,end=2,i=8
figur out end of quote <ls|grep"" h>, f=", st=3, en=2, i= 8
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=8 


last end cmd[2]= |


fetching end cmd[7 + 1] = <">, flag = "

reached end cmd[7 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|grep"" h>, f=", st=3, en=8, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=3, en=8
filling node with ~grep~
smasher loop 9= ,flag=i, s.start = 3, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~grep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=l,flag=i, s.start = 2, s.end = 2
smasher loop 4=",flag=s, s.start = 3, s.end = 2
smasher loop 5=s,flag=", s.start = 3, s.end = 2
" " arg = <ls|l"s" h>,cmd[5] = s,  start = 3 i = 5, flag = "
smasher loop 6=",flag=", s.start = 3, s.end = 2
" " arg = <ls|l"s" h>,cmd[6] = ",  start = 3 i = 6, flag = "
before cleaning arg = <ls|l"s" h>, start = 3 i = 6
Mul single and double quote
 cmd = <ls|l"s" h>, flag = ",strt=3,end=2,i=6
figur out end of quote <ls|l"s" h>, f=", st=3, en=2, i= 6
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=6 


last end cmd[2]= |


fetching end cmd[5 + 1] = <">, flag = "

reached end cmd[5 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|l"s" h>, f=", st=3, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <ls>, st=3, en=6
filling node with ~ls~
smasher loop 7= ,flag=i, s.start = 3, s.end = 6
smasher loop 8=h,flag=s, s.start = 8, s.end = 6
space_smash, smashed_arg = h, start = 8, end = 8
~ls~
~|~
~ls~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=l,flag=i, s.start = 2, s.end = 2
smasher loop 4=",flag=s, s.start = 3, s.end = 2
smasher loop 5=s,flag=", s.start = 3, s.end = 2
" " arg = <ls|l"s"2 h>,cmd[5] = s,  start = 3 i = 5, flag = "
smasher loop 6=",flag=", s.start = 3, s.end = 2
" " arg = <ls|l"s"2 h>,cmd[6] = ",  start = 3 i = 6, flag = "
before cleaning arg = <ls|l"s"2 h>, start = 3 i = 6
Mul single and double quote
 cmd = <ls|l"s"2 h>, flag = ",strt=3,end=2,i=6
figur out end of quote <ls|l"s"2 h>, f=", st=3, en=2, i= 6
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=6 


last end cmd[2]= |


fetching end cmd[5 + 1] = <">, flag = "

reached end cmd[5 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|l"s"2 h>, f=", st=3, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <ls>, st=3, en=6
filling node with ~ls~
smasher loop 7=2,flag=i, s.start = 3, s.end = 6
space_smash, smashed_arg = 2, start = 7, end = 7
smasher loop 8= ,flag=i, s.start = 7, s.end = 7
smasher loop 9=h,flag=s, s.start = 9, s.end = 7
space_smash, smashed_arg = h, start = 9, end = 9
~ls~
~|~
~ls~
~2~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=", s.start = 0, s.end = 0
" " arg = <l"s"2 h>,cmd[2] = s,  start = 0 i = 2, flag = "
smasher loop 3=",flag=", s.start = 0, s.end = 0
" " arg = <l"s"2 h>,cmd[3] = ",  start = 0 i = 3, flag = "
before cleaning arg = <l"s"2 h>, start = 0 i = 3
Mul single and double quote
 cmd = <l"s"2 h>, flag = ",strt=0,end=0,i=3
figur out end of quote <l"s"2 h>, f=", st=0, en=0, i= 3
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=3 


last end cmd[0]= l


fetching end cmd[2 + 1] = <">, flag = "
fetching end cmd[2 + 2] = <2>, flag = "
not end cmd[2 + 2] = <2>, flag = "
fetching end cmd[2 + 3] = < >, flag = "

reached end cmd[2 + 3] = < >, flag = " start = 0

end figur out end of quote <l"s"2 h>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <ls2>, st=0, en=5
filling node with ~ls2~
smasher loop 6=h,flag=i, s.start = 0, s.end = 5
space_smash, smashed_arg = h, start = 6, end = 6
~ls2~
~h~
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
smasher loop 5=l,flag=s, s.start = 5, s.end = 3
smasher loop 6=",flag=s, s.start = 5, s.end = 3
smasher loop 7=s,flag=", s.start = 5, s.end = 3
" " arg = <ls | l"s"2 h>,cmd[7] = s,  start = 5 i = 7, flag = "
smasher loop 8=",flag=", s.start = 5, s.end = 3
" " arg = <ls | l"s"2 h>,cmd[8] = ",  start = 5 i = 8, flag = "
before cleaning arg = <ls | l"s"2 h>, start = 5 i = 8
Mul single and double quote
 cmd = <ls | l"s"2 h>, flag = ",strt=5,end=3,i=8
figur out end of quote <ls | l"s"2 h>, f=", st=5, en=3, i= 8
cas 3 no quote start,st = 5 en= 3


Case 3
s=5,e=3,i=8 


last end cmd[3]= |


fetching end cmd[7 + 1] = <">, flag = "

reached end cmd[7 + 1] = <">, flag = " start = 5

end figur out end of quote <ls | l"s"2 h>, f=", st=5, en=8, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <ls>, st=5, en=8
filling node with ~ls~
smasher loop 9=2,flag=i, s.start = 5, s.end = 8
space_smash, smashed_arg = 2, start = 9, end = 9
smasher loop 10= ,flag=i, s.start = 9, s.end = 9
smasher loop 11=h,flag=s, s.start = 11, s.end = 9
space_smash, smashed_arg = h, start = 11, end = 11
~ls~
~|~
~ls~
~2~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
smasher loop 5=g,flag=s, s.start = 5, s.end = 3
smasher loop 6=r,flag=s, s.start = 5, s.end = 3
smasher loop 7=",flag=s, s.start = 5, s.end = 3
smasher loop 8=e,flag=", s.start = 5, s.end = 3
" " arg = <ls | gr"e"p h>,cmd[8] = e,  start = 5 i = 8, flag = "
smasher loop 9=",flag=", s.start = 5, s.end = 3
" " arg = <ls | gr"e"p h>,cmd[9] = ",  start = 5 i = 9, flag = "
before cleaning arg = <ls | gr"e"p h>, start = 5 i = 9
Mul single and double quote
 cmd = <ls | gr"e"p h>, flag = ",strt=5,end=3,i=9
figur out end of quote <ls | gr"e"p h>, f=", st=5, en=3, i= 9
cas 3 no quote start,st = 5 en= 3


Case 3
s=5,e=3,i=9 


last end cmd[3]= |


fetching end cmd[8 + 1] = <">, flag = "

reached end cmd[8 + 1] = <">, flag = " start = 5

end figur out end of quote <ls | gr"e"p h>, f=", st=5, en=9, i= 9
entering the source of all devil loop
Exiting Multiple merged_str = <gre>, st=5, en=9
filling node with ~gre~
smasher loop 10=p,flag=i, s.start = 5, s.end = 9
space_smash, smashed_arg = p, start = 10, end = 10
smasher loop 11= ,flag=i, s.start = 10, s.end = 10
smasher loop 12=h,flag=s, s.start = 12, s.end = 10
space_smash, smashed_arg = h, start = 12, end = 12
~ls~
~|~
~gre~
~p~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 5
smasher loop 7=h,flag=s, s.start = 7, s.end = 5
smasher loop 8=i,flag=s, s.start = 7, s.end = 5
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo"" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo"" hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo"" hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo"" hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "

reached end cmd[1 + 5] = <">, flag = " start = 0


special_special_case 2
s=0,e=6,i=5 
end figur out end of quote <""echo"" hi>, f=", st=0, en=6, i= 5
entering the source of all devil loop
Loop single double quote gen
 cmd = <""echo"" hi>, flag = " s 6 e 6 i 6
figur out end of quote <""echo"" hi>, f=", st=6, en=6, i= 6
calling case 1 filling normal quote  main cmd[6] = "  cmd[7] = " , start = 6, flag = "
Case 1 Filling normal quote, cmd = ""echo"" hi, start = 6, end = 6
final_arg before expand = , start = 6, end = 7
final_arg after filling normal case = , start = 6, end = 7
end figur out end of quote <""echo"" hi>, f=", st=6, en=7, i= 6
Loop single double quote gen
 cmd = <""echo"" hi>, flag = " s 7 e 7 i 7
figur out end of quote <""echo"" hi>, f=", st=7, en=7, i= 7
calling case 2 Doesn't end with quote 
main cmd[7] = "  cmd[8] =   , start = 7, flag = "


Case 2
s=7,e=7,i=7 
after decrement s=7,e=7,i=7 
fetching end cmd[7 + 1] = < >, flag = "
fetching end cmd[7 + 2] = <h>, flag = "
fetching end cmd[7 + 3] = <i>, flag = "

reached end cmd[7 + 4] = < >, flag = " start = 7

end figur out end of quote <""echo"" hi>, f=", st=7, en=11, i= 10
Exiting Multiple merged_str = <echo hi>, st=7, en=11
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 


last end cmd[0]= e


fetching end cmd[4 + 1] = <">, flag = "

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 5
smasher loop 7=h,flag=s, s.start = 7, s.end = 5
smasher loop 8=i,flag=s, s.start = 7, s.end = 5
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo"" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo"" hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo"" hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo"" hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "

reached end cmd[1 + 5] = <">, flag = " start = 0


special_special_case 2
s=0,e=6,i=5 
end figur out end of quote <""echo"" hi>, f=", st=0, en=6, i= 5
entering the source of all devil loop
Loop single double quote gen
 cmd = <""echo"" hi>, flag = " s 6 e 6 i 6
figur out end of quote <""echo"" hi>, f=", st=6, en=6, i= 6
calling case 1 filling normal quote  main cmd[6] = "  cmd[7] = " , start = 6, flag = "
Case 1 Filling normal quote, cmd = ""echo"" hi, start = 6, end = 6
final_arg before expand = , start = 6, end = 7
final_arg after filling normal case = , start = 6, end = 7
end figur out end of quote <""echo"" hi>, f=", st=6, en=7, i= 6
Loop single double quote gen
 cmd = <""echo"" hi>, flag = " s 7 e 7 i 7
figur out end of quote <""echo"" hi>, f=", st=7, en=7, i= 7
calling case 2 Doesn't end with quote 
main cmd[7] = "  cmd[8] =   , start = 7, flag = "


Case 2
s=7,e=7,i=7 
after decrement s=7,e=7,i=7 
fetching end cmd[7 + 1] = < >, flag = "
fetching end cmd[7 + 2] = <h>, flag = "
fetching end cmd[7 + 3] = <i>, flag = "

reached end cmd[7 + 4] = < >, flag = " start = 7

end figur out end of quote <""echo"" hi>, f=", st=7, en=11, i= 10
Exiting Multiple merged_str = <echo hi>, st=7, en=11
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 


last end cmd[0]= e


fetching end cmd[4 + 1] = <">, flag = "

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 5
smasher loop 7=h,flag=s, s.start = 7, s.end = 5
smasher loop 8=i,flag=s, s.start = 7, s.end = 5
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo"" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo"" hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo"" hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo"" hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "

reached end cmd[1 + 5] = <">, flag = " start = 0


special_special_case 2
s=0,e=6,i=5 
end figur out end of quote <""echo"" hi>, f=", st=0, en=6, i= 5
entering the source of all devil loop
Loop single double quote gen
 cmd = <""echo"" hi>, flag = " s 6 e 6 i 6
figur out end of quote <""echo"" hi>, f=", st=6, en=6, i= 6
calling case 1 filling normal quote  main cmd[6] = "  cmd[7] = " , start = 6, flag = "
Case 1 Filling normal quote, cmd = ""echo"" hi, start = 6, end = 6
final_arg before expand = , start = 6, end = 7
final_arg after filling normal case = , start = 6, end = 7
end figur out end of quote <""echo"" hi>, f=", st=6, en=7, i= 6
Loop single double quote gen
 cmd = <""echo"" hi>, flag = " s 7 e 7 i 7
figur out end of quote <""echo"" hi>, f=", st=7, en=7, i= 7
calling case 2 Doesn't end with quote 
main cmd[7] = "  cmd[8] =   , start = 7, flag = "


Case 2
s=7,e=7,i=7 
after decrement s=7,e=7,i=7 
fetching end cmd[7 + 1] = < >, flag = "
fetching end cmd[7 + 2] = <h>, flag = "
fetching end cmd[7 + 3] = <i>, flag = "

reached end cmd[7 + 4] = < >, flag = " start = 7

end figur out end of quote <""echo"" hi>, f=", st=7, en=11, i= 10
Exiting Multiple merged_str = <echo hi>, st=7, en=11
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=',flag=i, s.start = 0, s.end = 0
check for single quote <'>
before clean <''echo hi>,start=0,i=1
Mul single and double quote
 cmd = <''echo hi>, flag = ',strt=0,end=0,i=1
figur out end of quote <''echo hi>, f=', st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = '  cmd[2] = e , start = 0, flag = '


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <'>, flag = ' start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = '
fetching end cmd[1 + 2] = <c>, flag = '
fetching end cmd[1 + 3] = <h>, flag = '
fetching end cmd[1 + 4] = <o>, flag = '

reached end cmd[1 + 5] = < >, flag = ' start = 0


special_special_case 2
s=0,e=6,i=5 
splitted_arg = echo
end figur out end of quote <''echo hi>, f=', st=0, en=6, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 6
smasher loop 7=h,flag=s, s.start = 7, s.end = 6
smasher loop 8=i,flag=s, s.start = 7, s.end = 6
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=',flag=i, s.start = 0, s.end = 0
check for single quote <'>
before clean <''echo hi | grep'' hi>,start=0,i=1
Mul single and double quote
 cmd = <''echo hi | grep'' hi>, flag = ',strt=0,end=0,i=1
figur out end of quote <''echo hi | grep'' hi>, f=', st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = '  cmd[2] = e , start = 0, flag = '


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <'>, flag = ' start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = '
fetching end cmd[1 + 2] = <c>, flag = '
fetching end cmd[1 + 3] = <h>, flag = '
fetching end cmd[1 + 4] = <o>, flag = '

reached end cmd[1 + 5] = < >, flag = ' start = 0


special_special_case 2
s=0,e=6,i=5 
splitted_arg = echo
end figur out end of quote <''echo hi | grep'' hi>, f=', st=0, en=6, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 6
smasher loop 7=h,flag=s, s.start = 7, s.end = 6
smasher loop 8=i,flag=s, s.start = 7, s.end = 6
space_smash, smashed_arg = hi, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 8
smasher loop 10=|,flag=i, s.start = 10, s.end = 9
smasher loop 11= ,flag=i, s.start = 10, s.end = 10
smasher loop 12=g,flag=s, s.start = 12, s.end = 10
smasher loop 13=r,flag=s, s.start = 12, s.end = 10
smasher loop 14=e,flag=s, s.start = 12, s.end = 10
smasher loop 15=p,flag=s, s.start = 12, s.end = 10
smasher loop 16=',flag=s, s.start = 12, s.end = 10
smasher loop 17=',flag=', s.start = 12, s.end = 10
check for single quote <'>
before clean <''echo hi | grep'' hi>,start=12,i=17
Mul single and double quote
 cmd = <''echo hi | grep'' hi>, flag = ',strt=12,end=10,i=17
figur out end of quote <''echo hi | grep'' hi>, f=', st=12, en=10, i= 17
cas 3 no quote start,st = 12 en= 10


Case 3
s=12,e=10,i=17 


last end cmd[10]= |


fetching end cmd[16 + 1] = <'>, flag = '

reached end cmd[16 + 1] = <'>, flag = ' start = 12

splitted_arg = grep
end figur out end of quote <''echo hi | grep'' hi>, f=', st=12, en=17, i= 17
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=12, en=17
filling node with ~grep~
smasher loop 18= ,flag=i, s.start = 12, s.end = 17
smasher loop 19=h,flag=s, s.start = 19, s.end = 17
smasher loop 20=i,flag=s, s.start = 19, s.end = 17
space_smash, smashed_arg = hi, start = 19, end = 20
~echo~
~hi~
~|~
~grep~
~hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=',flag=i, s.start = 0, s.end = 0
check for single quote <'>
before clean <''echo hi | gre'p' hi>,start=0,i=1
Mul single and double quote
 cmd = <''echo hi | gre'p' hi>, flag = ',strt=0,end=0,i=1
figur out end of quote <''echo hi | gre'p' hi>, f=', st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = '  cmd[2] = e , start = 0, flag = '


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <'>, flag = ' start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = '
fetching end cmd[1 + 2] = <c>, flag = '
fetching end cmd[1 + 3] = <h>, flag = '
fetching end cmd[1 + 4] = <o>, flag = '

reached end cmd[1 + 5] = < >, flag = ' start = 0


special_special_case 2
s=0,e=6,i=5 
splitted_arg = echo
end figur out end of quote <''echo hi | gre'p' hi>, f=', st=0, en=6, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 6
smasher loop 7=h,flag=s, s.start = 7, s.end = 6
smasher loop 8=i,flag=s, s.start = 7, s.end = 6
space_smash, smashed_arg = hi, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 8
smasher loop 10=|,flag=i, s.start = 10, s.end = 9
smasher loop 11= ,flag=i, s.start = 10, s.end = 10
smasher loop 12=g,flag=s, s.start = 12, s.end = 10
smasher loop 13=r,flag=s, s.start = 12, s.end = 10
smasher loop 14=e,flag=s, s.start = 12, s.end = 10
smasher loop 15=',flag=s, s.start = 12, s.end = 10
smasher loop 16=p,flag=', s.start = 12, s.end = 10
check for single quote <p>
smasher loop 17=',flag=', s.start = 12, s.end = 10
check for single quote <'>
before clean <''echo hi | gre'p' hi>,start=12,i=17
Mul single and double quote
 cmd = <''echo hi | gre'p' hi>, flag = ',strt=12,end=10,i=17
figur out end of quote <''echo hi | gre'p' hi>, f=', st=12, en=10, i= 17
cas 3 no quote start,st = 12 en= 10


Case 3
s=12,e=10,i=17 


last end cmd[10]= |


fetching end cmd[16 + 1] = <'>, flag = '

reached end cmd[16 + 1] = <'>, flag = ' start = 12

splitted_arg = gre
splitted_arg = p
end figur out end of quote <''echo hi | gre'p' hi>, f=', st=12, en=17, i= 17
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=12, en=17
filling node with ~grep~
smasher loop 18= ,flag=i, s.start = 12, s.end = 17
smasher loop 19=h,flag=s, s.start = 19, s.end = 17
smasher loop 20=i,flag=s, s.start = 19, s.end = 17
space_smash, smashed_arg = hi, start = 19, end = 20
~echo~
~hi~
~|~
~grep~
~hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joinijoining env 
ng env 
smasher loop 0=',flag=i, s.start = 0, s.end = 0
check for single quote <'>
before clean <''echo hi | 'grep' hi>,start=0,i=1
Mul single and double quote
 cmd = <''echo hi | 'grep' hi>, flag = ',strt=0,end=0,i=1
figur out end of quote <''echo hi | 'grep' hi>, f=', st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = '  cmd[2] = e , start = 0, flag = '


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <'>, flag = ' start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = '
fetching end cmd[1 + 2] = <c>, flag = '
fetching end cmd[1 + 3] = <h>, flag = '
fetching end cmd[1 + 4] = <o>, flag = '

reached end cmd[1 + 5] = < >, flag = ' start = 0


special_special_case 2
s=0,e=6,i=5 
splitted_arg = echo
end figur out end of quote <''echo hi | 'grep' hi>, f=', st=0, en=6, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 6
smasher loop 7=h,flag=s, s.start = 7, s.end = 6
smasher loop 8=i,flag=s, s.start = 7, s.end = 6
space_smash, smashed_arg = hi, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 8
smasher loop 10=|,flag=i, s.start = 10, s.end = 9
smasher loop 11= ,flag=i, s.start = 10, s.end = 10
check for single quote < >
smasher loop 12=',flag=', s.start = 12, s.end = 10
check for single quote <'>
smasher loop 14=r,flag=', s.start = 12, s.end = 10
check for single quote <r>
smasher loop 15=e,flag=', s.start = 12, s.end = 10
check for single quote <e>
smasher loop 16=p,flag=', s.start = 12, s.end = 10
check for single quote <p>
smasher loop 17=',flag=', s.start = 12, s.end = 10
check for single quote <'>
before clean <''echo hi | 'grep' hi>,start=12,i=17
Mul single and double quote
 cmd = <''echo hi | 'grep' hi>, flag = ',strt=12,end=10,i=17
figur out end of quote <''echo hi | 'grep' hi>, f=', st=12, en=10, i= 17
calling case 2 Doesn't end with quote 
main cmd[17] = '  cmd[18] =   , start = 12, flag = '


Case 2
s=12,e=10,i=17 
after decrement s=12,e=10,i=17 
fetching end cmd[17 + 1] = < >, flag = '
fetching end cmd[17 + 2] = <h>, flag = '
fetching end cmd[17 + 3] = <i>, flag = '

reached end cmd[17 + 4] = < >, flag = ' start = 12

splitted_arg = grep
splitted_arg =  hi
end figur out end of quote <''echo hi | 'grep' hi>, f=', st=12, en=21, i= 20
filling node with ~grep hi~
~echo~
~hi~
~|~
~grep hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=',flag=i, s.start = 0, s.end = 0
check for single quote <'>
before clean <''echo hi | g''rep hi>,start=0,i=1
Mul single and double quote
 cmd = <''echo hi | g''rep hi>, flag = ',strt=0,end=0,i=1
figur out end of quote <''echo hi | g''rep hi>, f=', st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = '  cmd[2] = e , start = 0, flag = '


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <'>, flag = ' start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = '
fetching end cmd[1 + 2] = <c>, flag = '
fetching end cmd[1 + 3] = <h>, flag = '
fetching end cmd[1 + 4] = <o>, flag = '

reached end cmd[1 + 5] = < >, flag = ' start = 0


special_special_case 2
s=0,e=6,i=5 
splitted_arg = echo
end figur out end of quote <''echo hi | g''rep hi>, f=', st=0, en=6, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 6
smasher loop 7=h,flag=s, s.start = 7, s.end = 6
smasher loop 8=i,flag=s, s.start = 7, s.end = 6
space_smash, smashed_arg = hi, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 8
smasher loop 10=|,flag=i, s.start = 10, s.end = 9
smasher loop 11= ,flag=i, s.start = 10, s.end = 10
smasher loop 12=g,flag=s, s.start = 12, s.end = 10
smasher loop 13=',flag=s, s.start = 12, s.end = 10
smasher loop 14=',flag=', s.start = 12, s.end = 10
check for single quote <'>
before clean <''echo hi | g''rep hi>,start=12,i=14
Mul single and double quote
 cmd = <''echo hi | g''rep hi>, flag = ',strt=12,end=10,i=14
figur out end of quote <''echo hi | g''rep hi>, f=', st=12, en=10, i= 14
cas 3 no quote start,st = 12 en= 10


Case 3
s=12,e=10,i=14 


last end cmd[10]= |


fetching end cmd[13 + 1] = <'>, flag = '

reached end cmd[13 + 1] = <'>, flag = ' start = 12

splitted_arg = g
end figur out end of quote <''echo hi | g''rep hi>, f=', st=12, en=14, i= 14
entering the source of all devil loop
Exiting Multiple merged_str = <g>, st=12, en=14
filling node with ~g~
smasher loop 15=r,flag=i, s.start = 12, s.end = 14
smasher loop 16=e,flag=s, s.start = 15, s.end = 14
smasher loop 17=p,flag=s, s.start = 15, s.end = 14
space_smash, smashed_arg = rep, start = 15, end = 17
smasher loop 18= ,flag=i, s.start = 15, s.end = 17
smasher loop 19=h,flag=s, s.start = 19, s.end = 17
smasher loop 20=i,flag=s, s.start = 19, s.end = 17
space_smash, smashed_arg = hi, start = 19, end = 20
~echo~
~hi~
~|~
~g~
~rep~
~hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=s, s.start = 3, s.end = 2
smasher loop 6=",flag=", s.start = 3, s.end = 2
" " arg = <ls|gr""ep h>,cmd[6] = ",  start = 3 i = 6, flag = "
before cleaning arg = <ls|gr""ep h>, start = 3 i = 6
Mul single and double quote
 cmd = <ls|gr""ep h>, flag = ",strt=3,end=2,i=6
figur out end of quote <ls|gr""ep h>, f=", st=3, en=2, i= 6
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=6 


last end cmd[2]= |


fetching end cmd[5 + 1] = <">, flag = "

reached end cmd[5 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|gr""ep h>, f=", st=3, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <gr>, st=3, en=6
filling node with ~gr~
smasher loop 7=e,flag=i, s.start = 3, s.end = 6
smasher loop 8=p,flag=s, s.start = 7, s.end = 6
space_smash, smashed_arg = ep, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~gr~
~ep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=.,flag=i, s.start = 0, s.end = 0
smasher loop 1=/,flag=s, s.start = 0, s.end = 0
smasher loop 2=m,flag=s, s.start = 0, s.end = 0
smasher loop 3=i,flag=s, s.start = 0, s.end = 0
smasher loop 4=n,flag=s, s.start = 0, s.end = 0
smasher loop 5=i,flag=s, s.start = 0, s.end = 0
smasher loop 6=s,flag=s, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 0, s.end = 0
smasher loop 8=e,flag=s, s.start = 0, s.end = 0
smasher loop 9=l,flag=s, s.start = 0, s.end = 0
smasher loop 10=l,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ./minishell, start = 0, end = 10
~./minishell~
joining env 



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=e,flag=s, s.start = 3, s.end = 2
smasher loop 6=",flag=s, s.start = 3, s.end = 2
smasher loop 7=",flag=", s.start = 3, s.end = 2
" " arg = <ls|gre""p h>,cmd[7] = ",  start = 3 i = 7, flag = "
before cleaning arg = <ls|gre""p h>, start = 3 i = 7
Mul single and double quote
 cmd = <ls|gre""p h>, flag = ",strt=3,end=2,i=7
figur out end of quote <ls|gre""p h>, f=", st=3, en=2, i= 7
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=7 


last end cmd[2]= |


fetching end cmd[6 + 1] = <">, flag = "

reached end cmd[6 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|gre""p h>, f=", st=3, en=7, i= 7
entering the source of all devil loop
Exiting Multiple merged_str = <gre>, st=3, en=7
filling node with ~gre~
smasher loop 8=p,flag=i, s.start = 3, s.end = 7
space_smash, smashed_arg = p, start = 8, end = 8
smasher loop 9= ,flag=i, s.start = 8, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~gre~
~p~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~




smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
smasher loop 5=g,flag=s, s.start = 5, s.end = 3
smasher loop 6=r,flag=s, s.start = 5, s.end = 3
smasher loop 7=",flag=s, s.start = 5, s.end = 3
smasher loop 8=",flag=", s.start = 5, s.end = 3
" " arg = <ls | gr""ep h>,cmd[8] = ",  start = 5 i = 8, flag = "
before cleaning arg = <ls | gr""ep h>, start = 5 i = 8
Mul single and double quote
 cmd = <ls | gr""ep h>, flag = ",strt=5,end=3,i=8
figur out end of quote <ls | gr""ep h>, f=", st=5, en=3, i= 8
cas 3 no quote start,st = 5 en= 3


Case 3
s=5,e=3,i=8 


last end cmd[3]= |


fetching end cmd[7 + 1] = <">, flag = "

reached end cmd[7 + 1] = <">, flag = " start = 5

end figur out end of quote <ls | gr""ep h>, f=", st=5, en=8, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <gr>, st=5, en=8
filling node with ~gr~
smasher loop 9=e,flag=i, s.start = 5, s.end = 8
smasher loop 10=p,flag=s, s.start = 9, s.end = 8
space_smash, smashed_arg = ep, start = 9, end = 10
smasher loop 11= ,flag=i, s.start = 9, s.end = 10
smasher loop 12=h,flag=s, s.start = 12, s.end = 10
space_smash, smashed_arg = h, start = 12, end = 12
~ls~
~|~
~gr~
~ep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
smasher loop 5=g,flag=s, s.start = 5, s.end = 3
smasher loop 6=r,flag=s, s.start = 5, s.end = 3
smasher loop 7=",flag=s, s.start = 5, s.end = 3
smasher loop 8=",flag=", s.start = 5, s.end = 3
" " arg = <ls | gr""ep h>,cmd[8] = ",  start = 5 i = 8, flag = "
before cleaning arg = <ls | gr""ep h>, start = 5 i = 8
Mul single and double quote
 cmd = <ls | gr""ep h>, flag = ",strt=5,end=3,i=8
figur out end of quote <ls | gr""ep h>, f=", st=5, en=3, i= 8
cas 3 no quote start,st = 5 en= 3


Case 3
s=5,e=3,i=8 


last end cmd[3]= |


fetching end cmd[7 + 1] = <">, flag = "
fixing start qutoe 3

reached end cmd[7 + 1] = <">, flag = " start = 5

end figur out end of quote <ls | gr""ep h>, f=", st=5, en=8, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <gr>, st=5, en=8
filling node with ~gr~
smasher loop 9=e,flag=i, s.start = 5, s.end = 8
smasher loop 10=p,flag=s, s.start = 9, s.end = 8
space_smash, smashed_arg = ep, start = 9, end = 10
smasher loop 11= ,flag=i, s.start = 9, s.end = 10
smasher loop 12=h,flag=s, s.start = 12, s.end = 10
space_smash, smashed_arg = h, start = 12, end = 12
~ls~
~|~
~gr~
~ep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~






smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
smasher loop 5=g,flag=s, s.start = 5, s.end = 3
smasher loop 6=r,flag=s, s.start = 5, s.end = 3
smasher loop 7=",flag=s, s.start = 5, s.end = 3
smasher loop 8=",flag=", s.start = 5, s.end = 3
" " arg = <ls | gr""ep h>,cmd[8] = ",  start = 5 i = 8, flag = "
before cleaning arg = <ls | gr""ep h>, start = 5 i = 8
Mul single and double quote
 cmd = <ls | gr""ep h>, flag = ",strt=5,end=3,i=8
figur out end of quote <ls | gr""ep h>, f=", st=5, en=3, i= 8
cas 3 no quote start,st = 5 en= 3


Case 3
s=5,e=3,i=8 


last end cmd[3]= |


fetching end cmd[7 + 1] = <">, flag = "
fixing start qutoe 3
fix said 0 (end)

reached end cmd[7 + 1] = <">, flag = " start = 5

end figur out end of quote <ls | gr""ep h>, f=", st=5, en=8, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <gr>, st=5, en=8
filling node with ~gr~
smasher loop 9=e,flag=i, s.start = 5, s.end = 8
smasher loop 10=p,flag=s, s.start = 9, s.end = 8
space_smash, smashed_arg = ep, start = 9, end = 10
smasher loop 11= ,flag=i, s.start = 9, s.end = 10
smasher loop 12=h,flag=s, s.start = 12, s.end = 10
space_smash, smashed_arg = h, start = 12, end = 12
~ls~
~|~
~gr~
~ep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
smasher loop 4=_,flag=s, s.start = 0, s.end = 0
smasher loop 5=s,flag=s, s.start = 0, s.end = 0
smasher loop 6=t,flag=s, s.start = 0, s.end = 0
smasher loop 7=a,flag=s, s.start = 0, s.end = 0
smasher loop 8=r,flag=s, s.start = 0, s.end = 0
smasher loop 9=t,flag=s, s.start = 0, s.end = 0
smasher loop 10=_,flag=s, s.start = 0, s.end = 0
smasher loop 11=3,flag=s, s.start = 0, s.end = 0
smasher loop 12=_,flag=s, s.start = 0, s.end = 0
smasher loop 13=e,flag=s, s.start = 0, s.end = 0
smasher loop 14=d,flag=s, s.start = 0, s.end = 0
smasher loop 15=g,flag=s, s.start = 0, s.end = 0
smasher loop 16=e,flag=s, s.start = 0, s.end = 0
smasher loop 17=_,flag=s, s.start = 0, s.end = 0
smasher loop 18=c,flag=s, s.start = 0, s.end = 0
smasher loop 19=o,flag=s, s.start = 0, s.end = 0
smasher loop 20=n,flag=s, s.start = 0, s.end = 0
smasher loop 21=d,flag=s, s.start = 0, s.end = 0
smasher loop 22=i,flag=s, s.start = 0, s.end = 0
smasher loop 23=t,flag=s, s.start = 0, s.end = 0
smasher loop 24=i,flag=s, s.start = 0, s.end = 0
smasher loop 25=o,flag=s, s.start = 0, s.end = 0
smasher loop 26=n,flag=s, s.start = 0, s.end = 0
smasher loop 27=s,flag=s, s.start = 0, s.end = 0
smasher loop 28=(,flag=s, s.start = 0, s.end = 0
smasher loop 29=c,flag=s, s.start = 0, s.end = 0
smasher loop 30=m,flag=s, s.start = 0, s.end = 0
smasher loop 31=d,flag=s, s.start = 0, s.end = 0
smasher loop 32=,,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = case_start_3_edge_conditions(cmd,, start = 0, end = 32
smasher loop 33= ,flag=i, s.start = 0, s.end = 32
smasher loop 34=s,flag=s, s.start = 34, s.end = 32
smasher loop 35=,,flag=s, s.start = 34, s.end = 32
space_smash, smashed_arg = s,, start = 34, end = 35
smasher loop 36= ,flag=i, s.start = 34, s.end = 35
smasher loop 37=f,flag=s, s.start = 37, s.end = 35
smasher loop 38=e,flag=s, s.start = 37, s.end = 35
smasher loop 39=t,flag=s, s.start = 37, s.end = 35
smasher loop 40=c,flag=s, s.start = 37, s.end = 35
smasher loop 41=h,flag=s, s.start = 37, s.end = 35
smasher loop 42=_,flag=s, s.start = 37, s.end = 35
smasher loop 43=e,flag=s, s.start = 37, s.end = 35
smasher loop 44=n,flag=s, s.start = 37, s.end = 35
smasher loop 45=d,flag=s, s.start = 37, s.end = 35
smasher loop 46=),flag=s, s.start = 37, s.end = 35
space_smash, smashed_arg = fetch_end), start = 37, end = 46
~case_start_3_edge_conditions(cmd,~
~s,~
~fetch_end)~
joining env 




smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
smasher loop 5=g,flag=s, s.start = 5, s.end = 3
smasher loop 6=r,flag=s, s.start = 5, s.end = 3
smasher loop 7=",flag=s, s.start = 5, s.end = 3
smasher loop 8=",flag=", s.start = 5, s.end = 3
" " arg = <ls | gr""ep h>,cmd[8] = ",  start = 5 i = 8, flag = "
before cleaning arg = <ls | gr""ep h>, start = 5 i = 8
Mul single and double quote
 cmd = <ls | gr""ep h>, flag = ",strt=5,end=3,i=8
figur out end of quote <ls | gr""ep h>, f=", st=5, en=3, i= 8
cas 3 no quote start,st = 5 en= 3


Case 3
s=5,e=3,i=8 


last end cmd[3]= |


fetching end cmd[7 + 1] = <">, flag = "
fixing start qutoe 3
fix said 0 (end)

reached end cmd[7 + 1] = <">, flag = " start = 5

end figur out end of quote <ls | gr""ep h>, f=", st=5, en=8, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <gr>, st=5, en=8
filling node with ~gr~
smasher loop 9=e,flag=i, s.start = 5, s.end = 8
smasher loop 10=p,flag=s, s.start = 9, s.end = 8
space_smash, smashed_arg = ep, start = 9, end = 10
smasher loop 11= ,flag=i, s.start = 9, s.end = 10
smasher loop 12=h,flag=s, s.start = 12, s.end = 10
space_smash, smashed_arg = h, start = 12, end = 12
~ls~
~|~
~gr~
~ep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
smasher loop 5=g,flag=s, s.start = 5, s.end = 3
smasher loop 6=r,flag=s, s.start = 5, s.end = 3
smasher loop 7=",flag=s, s.start = 5, s.end = 3
smasher loop 8=",flag=", s.start = 5, s.end = 3
" " arg = <ls | gr""ep h>,cmd[8] = ",  start = 5 i = 8, flag = "
before cleaning arg = <ls | gr""ep h>, start = 5 i = 8
Mul single and double quote
 cmd = <ls | gr""ep h>, flag = ",strt=5,end=3,i=8
figur out end of quote <ls | gr""ep h>, f=", st=5, en=3, i= 8
cas 3 no quote start,st = 5 en= 3


Case 3
s=5,e=3,i=8 


last end cmd[3]= |


fetching end cmd[7 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
fix said 0 (end)

reached end cmd[7 + 1] = <">, flag = " start = 5

end figur out end of quote <ls | gr""ep h>, f=", st=5, en=8, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <gr>, st=5, en=8
filling node with ~gr~
smasher loop 9=e,flag=i, s.start = 5, s.end = 8
smasher loop 10=p,flag=s, s.start = 9, s.end = 8
space_smash, smashed_arg = ep, start = 9, end = 10
smasher loop 11= ,flag=i, s.start = 9, s.end = 10
smasher loop 12=h,flag=s, s.start = 12, s.end = 10
space_smash, smashed_arg = h, start = 12, end = 12
~ls~
~|~
~gr~
~ep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
smasher loop 5=g,flag=s, s.start = 5, s.end = 3
smasher loop 6=r,flag=s, s.start = 5, s.end = 3
smasher loop 7=",flag=s, s.start = 5, s.end = 3
smasher loop 8=",flag=", s.start = 5, s.end = 3
" " arg = <ls | gr""ep h>,cmd[8] = ",  start = 5 i = 8, flag = "
before cleaning arg = <ls | gr""ep h>, start = 5 i = 8
Mul single and double quote
 cmd = <ls | gr""ep h>, flag = ",strt=5,end=3,i=8
figur out end of quote <ls | gr""ep h>, f=", st=5, en=3, i= 8
cas 3 no quote start,st = 5 en= 3


Case 3
s=5,e=3,i=8 


last end cmd[3]= |


fetching end cmd[7 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0)
fix said 0 (end)

reached end cmd[7 + 1] = <">, flag = " start = 5

end figur out end of quote <ls | gr""ep h>, f=", st=5, en=8, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <gr>, st=5, en=8
filling node with ~gr~
smasher loop 9=e,flag=i, s.start = 5, s.end = 8
smasher loop 10=p,flag=s, s.start = 9, s.end = 8
space_smash, smashed_arg = ep, start = 9, end = 10
smasher loop 11= ,flag=i, s.start = 9, s.end = 10
smasher loop 12=h,flag=s, s.start = 12, s.end = 10
space_smash, smashed_arg = h, start = 12, end = 12
~ls~
~|~
~gr~
~ep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=s, s.start = 3, s.end = 2
smasher loop 6=",flag=", s.start = 3, s.end = 2
" " arg = <ls|gr""ep h>,cmd[6] = ",  start = 3 i = 6, flag = "
before cleaning arg = <ls|gr""ep h>, start = 3 i = 6
Mul single and double quote
 cmd = <ls|gr""ep h>, flag = ",strt=3,end=2,i=6
figur out end of quote <ls|gr""ep h>, f=", st=3, en=2, i= 6
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=6 


last end cmd[2]= |


fetching end cmd[5 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0)
fix said 0 (end)

reached end cmd[5 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|gr""ep h>, f=", st=3, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <gr>, st=3, en=6
filling node with ~gr~
smasher loop 7=e,flag=i, s.start = 3, s.end = 6
smasher loop 8=p,flag=s, s.start = 7, s.end = 6
space_smash, smashed_arg = ep, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~gr~
~ep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
smasher loop 5=g,flag=s, s.start = 5, s.end = 3
smasher loop 6=r,flag=s, s.start = 5, s.end = 3
smasher loop 7=",flag=s, s.start = 5, s.end = 3
smasher loop 8=",flag=", s.start = 5, s.end = 3
" " arg = <ls | gr""ep h>,cmd[8] = ",  start = 5 i = 8, flag = "
before cleaning arg = <ls | gr""ep h>, start = 5 i = 8
Mul single and double quote
 cmd = <ls | gr""ep h>, flag = ",strt=5,end=3,i=8
figur out end of quote <ls | gr""ep h>, f=", st=5, en=3, i= 8
cas 3 no quote start,st = 5 en= 3


Case 3
s=5,e=3,i=8 


last end cmd[3]= |


fetching end cmd[7 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0)
fix said 0 (end)

reached end cmd[7 + 1] = <">, flag = " start = 5

end figur out end of quote <ls | gr""ep h>, f=", st=5, en=8, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <gr>, st=5, en=8
filling node with ~gr~
smasher loop 9=e,flag=i, s.start = 5, s.end = 8
smasher loop 10=p,flag=s, s.start = 9, s.end = 8
space_smash, smashed_arg = ep, start = 9, end = 10
smasher loop 11= ,flag=i, s.start = 9, s.end = 10
smasher loop 12=h,flag=s, s.start = 12, s.end = 10
space_smash, smashed_arg = h, start = 12, end = 12
~ls~
~|~
~gr~
~ep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=s, s.start = 3, s.end = 2
smasher loop 6=",flag=", s.start = 3, s.end = 2
" " arg = <ls|gr""ep h>,cmd[6] = ",  start = 3 i = 6, flag = "
before cleaning arg = <ls|gr""ep h>, start = 3 i = 6
Mul single and double quote
 cmd = <ls|gr""ep h>, flag = ",strt=3,end=2,i=6
figur out end of quote <ls|gr""ep h>, f=", st=3, en=2, i= 6
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=6 


last end cmd[2]= |


fetching end cmd[5 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0)
fix said 0 (end)

reached end cmd[5 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|gr""ep h>, f=", st=3, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <gr>, st=3, en=6
filling node with ~gr~
smasher loop 7=e,flag=i, s.start = 3, s.end = 6
smasher loop 8=p,flag=s, s.start = 7, s.end = 6
space_smash, smashed_arg = ep, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~gr~
~ep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=s, s.start = 3, s.end = 2
smasher loop 6=",flag=", s.start = 3, s.end = 2
" " arg = <ls|gr""ep h>,cmd[6] = ",  start = 3 i = 6, flag = "
before cleaning arg = <ls|gr""ep h>, start = 3 i = 6
Mul single and double quote
 cmd = <ls|gr""ep h>, flag = ",strt=3,end=2,i=6
figur out end of quote <ls|gr""ep h>, f=", st=3, en=2, i= 6
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=6 


last end cmd[2]= |


fetching end cmd[5 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0)
fix said 0 (end)

reached end cmd[5 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|gr""ep h>, f=", st=3, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <gr>, st=3, en=6
filling node with ~gr~
smasher loop 7=e,flag=i, s.start = 3, s.end = 6
smasher loop 8=p,flag=s, s.start = 7, s.end = 6
space_smash, smashed_arg = ep, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~gr~
~ep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=s, s.start = 3, s.end = 2
smasher loop 6=",flag=", s.start = 3, s.end = 2
" " arg = <ls|gr""ep h>,cmd[6] = ",  start = 3 i = 6, flag = "
before cleaning arg = <ls|gr""ep h>, start = 3 i = 6
Mul single and double quote
 cmd = <ls|gr""ep h>, flag = ",strt=3,end=2,i=6
figur out end of quote <ls|gr""ep h>, f=", st=3, en=2, i= 6
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=6 


last end cmd[2]= |


fetching end cmd[6 + 1] = <e>, flag = "
not end cmd[6 + 1] = <e>, flag = "
fetching end cmd[6 + 2] = <p>, flag = "
not end cmd[6 + 2] = <p>, flag = "
fetching end cmd[6 + 3] = < >, flag = "
not end cmd[6 + 3] = < >, flag = "
fetching end cmd[6 + 4] = <h>, flag = "
not end cmd[6 + 4] = <h>, flag = "
fetching end cmd[6 + 5] = < >, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0)
fix said 0 (end)

reached end cmd[6 + 5] = < >, flag = " start = 3

end figur out end of quote <ls|gr""ep h>, f=", st=3, en=11, i= 10
filling node with ~grep h~
~ls~
~|~
~grep h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=s, s.start = 3, s.end = 2
smasher loop 6=e,flag=", s.start = 3, s.end = 2
" " arg = <ls|gr"ep" h>,cmd[6] = e,  start = 3 i = 6, flag = "
smasher loop 7=p,flag=", s.start = 3, s.end = 2
" " arg = <ls|gr"ep" h>,cmd[7] = p,  start = 3 i = 7, flag = "
smasher loop 8=",flag=", s.start = 3, s.end = 2
" " arg = <ls|gr"ep" h>,cmd[8] = ",  start = 3 i = 8, flag = "
before cleaning arg = <ls|gr"ep" h>, start = 3 i = 8
Mul single and double quote
 cmd = <ls|gr"ep" h>, flag = ",strt=3,end=2,i=8
figur out end of quote <ls|gr"ep" h>, f=", st=3, en=2, i= 8
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=8 


last end cmd[2]= |


fetching end cmd[8 + 1] = < >, flag = "
not end cmd[8 + 1] = < >, flag = "
fetching end cmd[8 + 2] = <h>, flag = "
not end cmd[8 + 2] = <h>, flag = "
fetching end cmd[8 + 3] = < >, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0)
fix said 0 (end)

reached end cmd[8 + 3] = < >, flag = " start = 3

end figur out end of quote <ls|gr"ep" h>, f=", st=3, en=11, i= 10
filling node with ~grep h~
~ls~
~|~
~grep h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=e,flag=s, s.start = 3, s.end = 2
smasher loop 6=p,flag=s, s.start = 3, s.end = 2
smasher loop 7=",flag=s, s.start = 3, s.end = 2
smasher loop 8=",flag=", s.start = 3, s.end = 2
" " arg = <ls|grep"" h>,cmd[8] = ",  start = 3 i = 8, flag = "
before cleaning arg = <ls|grep"" h>, start = 3 i = 8
Mul single and double quote
 cmd = <ls|grep"" h>, flag = ",strt=3,end=2,i=8
figur out end of quote <ls|grep"" h>, f=", st=3, en=2, i= 8
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=8 


last end cmd[2]= |


fetching end cmd[8 + 1] = < >, flag = "
not end cmd[8 + 1] = < >, flag = "
fetching end cmd[8 + 2] = <h>, flag = "
not end cmd[8 + 2] = <h>, flag = "
fetching end cmd[8 + 3] = < >, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0)
fix said 0 (end)

reached end cmd[8 + 3] = < >, flag = " start = 3

end figur out end of quote <ls|grep"" h>, f=", st=3, en=11, i= 10
filling node with ~grep h~
~ls~
~|~
~grep h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
~exit~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=s, s.start = 3, s.end = 2
smasher loop 6=",flag=", s.start = 3, s.end = 2
" " arg = <ls|gr""ep h>,cmd[6] = ",  start = 3 i = 6, flag = "
before cleaning arg = <ls|gr""ep h>, start = 3 i = 6
Mul single and double quote
 cmd = <ls|gr""ep h>, flag = ",strt=3,end=2,i=6
figur out end of quote <ls|gr""ep h>, f=", st=3, en=2, i= 6
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=6 


last end cmd[2]= |


fetching end cmd[6 + 1] = <e>, flag = "
not end cmd[6 + 1] = <e>, flag = "
fetching end cmd[6 + 2] = <p>, flag = "
not end cmd[6 + 2] = <p>, flag = "
fetching end cmd[6 + 3] = < >, flag = "
not end cmd[6 + 3] = < >, flag = "
fetching end cmd[6 + 4] = <h>, flag = "
not end cmd[6 + 4] = <h>, flag = "
fetching end cmd[6 + 5] = < >, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0)
fix said 0 (end)

reached end cmd[6 + 5] = < >, flag = " start = 3

end figur out end of quote <ls|gr""ep h>, f=", st=3, en=11, i= 10
filling node with ~grep h~
~ls~
~|~
~grep h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=s, s.start = 3, s.end = 2
smasher loop 6=e,flag=", s.start = 3, s.end = 2
" " arg = <ls|gr"ep" h>,cmd[6] = e,  start = 3 i = 6, flag = "
smasher loop 7=p,flag=", s.start = 3, s.end = 2
" " arg = <ls|gr"ep" h>,cmd[7] = p,  start = 3 i = 7, flag = "
smasher loop 8=",flag=", s.start = 3, s.end = 2
" " arg = <ls|gr"ep" h>,cmd[8] = ",  start = 3 i = 8, flag = "
before cleaning arg = <ls|gr"ep" h>, start = 3 i = 8
Mul single and double quote
 cmd = <ls|gr"ep" h>, flag = ",strt=3,end=2,i=8
figur out end of quote <ls|gr"ep" h>, f=", st=3, en=2, i= 8
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=8 


last end cmd[2]= |


fetching end cmd[8 + 1] = < >, flag = "
not end cmd[8 + 1] = < >, flag = "
fetching end cmd[8 + 2] = <h>, flag = "
not end cmd[8 + 2] = <h>, flag = "
fetching end cmd[8 + 3] = < >, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0)
fix said 0 (end)

reached end cmd[8 + 3] = < >, flag = " start = 3

end figur out end of quote <ls|gr"ep" h>, f=", st=3, en=11, i= 10
filling node with ~grep h~
~ls~
~|~
~grep h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=s, s.start = 3, s.end = 2
smasher loop 6=e,flag=", s.start = 3, s.end = 2
" " arg = <ls|gr"ep" h>,cmd[6] = e,  start = 3 i = 6, flag = "
smasher loop 7=p,flag=", s.start = 3, s.end = 2
" " arg = <ls|gr"ep" h>,cmd[7] = p,  start = 3 i = 7, flag = "
smasher loop 8=",flag=", s.start = 3, s.end = 2
" " arg = <ls|gr"ep" h>,cmd[8] = ",  start = 3 i = 8, flag = "
before cleaning arg = <ls|gr"ep" h>, start = 3 i = 8
Mul single and double quote
 cmd = <ls|gr"ep" h>, flag = ",strt=3,end=2,i=8
figur out end of quote <ls|gr"ep" h>, f=", st=3, en=2, i= 8
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=8 


last end cmd[2]= |


fetching end cmd[8 + 1] = < >, flag = "
not end cmd[8 + 1] = < >, flag = "
fetching end cmd[8 + 2] = <h>, flag = "
not end cmd[8 + 2] = <h>, flag = "
fetching end cmd[8 + 3] = < >, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0)
fix said 0 (end)

reached end cmd[8 + 3] = < >, flag = " start = 3

end figur out end of quote <ls|gr"ep" h>, f=", st=3, en=11, i= 10
filling node with ~grep h~
~ls~
~|~
~grep h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=s, s.start = 3, s.end = 2
smasher loop 6=e,flag=", s.start = 3, s.end = 2
" " arg = <ls|gr"ep>,cmd[6] = e,  start = 3 i = 6, flag = "
smasher loop 7=p,flag=", s.start = 3, s.end = 2
" " arg = <ls|gr"ep>,cmd[7] = p,  start = 3 i = 7, flag = "
Unclose " double quote, throwing an error
Will not visualize cmd this is an errored one
~ls~
~|~
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=",flag=i, s.start = 2, s.end = 2
" " arg = <ls|"grep" hi>,cmd[3] = ",  start = 3 i = 3, flag = "
smasher loop 5=r,flag=", s.start = 3, s.end = 2
" " arg = <ls|"grep" hi>,cmd[5] = r,  start = 3 i = 5, flag = "
smasher loop 6=e,flag=", s.start = 3, s.end = 2
" " arg = <ls|"grep" hi>,cmd[6] = e,  start = 3 i = 6, flag = "
smasher loop 7=p,flag=", s.start = 3, s.end = 2
" " arg = <ls|"grep" hi>,cmd[7] = p,  start = 3 i = 7, flag = "
smasher loop 8=",flag=", s.start = 3, s.end = 2
" " arg = <ls|"grep" hi>,cmd[8] = ",  start = 3 i = 8, flag = "
before cleaning arg = <ls|"grep" hi>, start = 3 i = 8
Mul single and double quote
 cmd = <ls|"grep" hi>, flag = ",strt=3,end=2,i=8
figur out end of quote <ls|"grep" hi>, f=", st=3, en=2, i= 8
calling case 2 Doesn't end with quote 
main cmd[8] = "  cmd[9] =   , start = 3, flag = "


Case 2
s=3,e=2,i=8 
after decrement s=3,e=2,i=7 

reached end cmd[7 + 1] = <">, flag = " start = 3



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = ls|"grep" hi, start = 3, end = 8
final_arg before expand = grep, start = 3, end = 8
final_arg after filling normal case = grep, start = 3, end = 8
end figur out end of quote <ls|"grep" hi>, f=", st=3, en=8, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=3, en=8
filling node with ~grep~
smasher loop 9= ,flag=i, s.start = 3, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
smasher loop 11=i,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = hi, start = 10, end = 11
~ls~
~|~
~grep~
~hi~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=",flag=i, s.start = 2, s.end = 2
" " arg = <ls|"grep" h>,cmd[3] = ",  start = 3 i = 3, flag = "
smasher loop 5=r,flag=", s.start = 3, s.end = 2
" " arg = <ls|"grep" h>,cmd[5] = r,  start = 3 i = 5, flag = "
smasher loop 6=e,flag=", s.start = 3, s.end = 2
" " arg = <ls|"grep" h>,cmd[6] = e,  start = 3 i = 6, flag = "
smasher loop 7=p,flag=", s.start = 3, s.end = 2
" " arg = <ls|"grep" h>,cmd[7] = p,  start = 3 i = 7, flag = "
smasher loop 8=",flag=", s.start = 3, s.end = 2
" " arg = <ls|"grep" h>,cmd[8] = ",  start = 3 i = 8, flag = "
before cleaning arg = <ls|"grep" h>, start = 3 i = 8
Mul single and double quote
 cmd = <ls|"grep" h>, flag = ",strt=3,end=2,i=8
figur out end of quote <ls|"grep" h>, f=", st=3, en=2, i= 8
calling case 2 Doesn't end with quote 
main cmd[8] = "  cmd[9] =   , start = 3, flag = "


Case 2
s=3,e=2,i=8 
after decrement s=3,e=2,i=7 

reached end cmd[7 + 1] = <">, flag = " start = 3



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = ls|"grep" h, start = 3, end = 8
final_arg before expand = grep, start = 3, end = 8
final_arg after filling normal case = grep, start = 3, end = 8
end figur out end of quote <ls|"grep" h>, f=", st=3, en=8, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=3, en=8
filling node with ~grep~
smasher loop 9= ,flag=i, s.start = 3, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~grep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=",flag=i, s.start = 2, s.end = 2
" " arg = <ls|"gre"p h>,cmd[3] = ",  start = 3 i = 3, flag = "
smasher loop 5=r,flag=", s.start = 3, s.end = 2
" " arg = <ls|"gre"p h>,cmd[5] = r,  start = 3 i = 5, flag = "
smasher loop 6=e,flag=", s.start = 3, s.end = 2
" " arg = <ls|"gre"p h>,cmd[6] = e,  start = 3 i = 6, flag = "
smasher loop 7=",flag=", s.start = 3, s.end = 2
" " arg = <ls|"gre"p h>,cmd[7] = ",  start = 3 i = 7, flag = "
before cleaning arg = <ls|"gre"p h>, start = 3 i = 7
Mul single and double quote
 cmd = <ls|"gre"p h>, flag = ",strt=3,end=2,i=7
figur out end of quote <ls|"gre"p h>, f=", st=3, en=2, i= 7
calling case 2 Doesn't end with quote 
main cmd[7] = "  cmd[8] = p , start = 3, flag = "


Case 2
s=3,e=2,i=7 
after decrement s=3,e=2,i=6 

reached end cmd[6 + 1] = <">, flag = " start = 3



forcing fixing_edge_quote_start_case_2
fetching end cmd[7 + 1] = <p>, flag = "

reached end cmd[7 + 2] = < >, flag = " start = 3


special_special_case 2
s=3,e=9,i=8 
end figur out end of quote <ls|"gre"p h>, f=", st=3, en=9, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=3, en=9
filling node with ~grep~
smasher loop 9= ,flag=i, s.start = 3, s.end = 9
smasher loop 10=h,flag=s, s.start = 10, s.end = 9
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~grep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=",flag=i, s.start = 2, s.end = 2
" " arg = <ls|""grep h>,cmd[3] = ",  start = 3 i = 3, flag = "
before cleaning arg = <ls|""grep h>, start = 3 i = 4
Mul single and double quote
 cmd = <ls|""grep h>, flag = ",strt=3,end=2,i=4
figur out end of quote <ls|""grep h>, f=", st=3, en=2, i= 4
calling case 2 Doesn't end with quote 
main cmd[4] = "  cmd[5] = g , start = 3, flag = "


Case 2
s=3,e=2,i=4 
after decrement s=3,e=2,i=3 

reached end cmd[3 + 1] = <">, flag = " start = 3



forcing fixing_edge_quote_start_case_2
fetching end cmd[4 + 1] = <g>, flag = "
fetching end cmd[4 + 2] = <r>, flag = "
fetching end cmd[4 + 3] = <e>, flag = "
fetching end cmd[4 + 4] = <p>, flag = "

reached end cmd[4 + 5] = < >, flag = " start = 3


special_special_case 2
s=3,e=9,i=8 
end figur out end of quote <ls|""grep h>, f=", st=3, en=9, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=3, en=9
filling node with ~grep~
smasher loop 9= ,flag=i, s.start = 3, s.end = 9
smasher loop 10=h,flag=s, s.start = 10, s.end = 9
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~grep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0= ,flag=i, s.start = 0, s.end = 0
smasher loop 1=|,flag=i, s.start = 1, s.end = 0
smasher loop 2=|,flag=i, s.start = 1, s.end = 1
smasher loop 3= ,flag=i, s.start = 2, s.end = 2
smasher loop 4=c,flag=s, s.start = 4, s.end = 2
smasher loop 5=h,flag=s, s.start = 4, s.end = 2
smasher loop 6=e,flag=s, s.start = 4, s.end = 2
smasher loop 7=c,flag=s, s.start = 4, s.end = 2
smasher loop 8=k,flag=s, s.start = 4, s.end = 2
smasher loop 9=_,flag=s, s.start = 4, s.end = 2
smasher loop 10=r,flag=s, s.start = 4, s.end = 2
smasher loop 11=e,flag=s, s.start = 4, s.end = 2
smasher loop 12=d,flag=s, s.start = 4, s.end = 2
smasher loop 13=i,flag=s, s.start = 4, s.end = 2
smasher loop 14=r,flag=s, s.start = 4, s.end = 2
smasher loop 15=e,flag=s, s.start = 4, s.end = 2
smasher loop 16=c,flag=s, s.start = 4, s.end = 2
smasher loop 17=t,flag=s, s.start = 4, s.end = 2
smasher loop 18=i,flag=s, s.start = 4, s.end = 2
smasher loop 19=o,flag=s, s.start = 4, s.end = 2
smasher loop 20=n,flag=s, s.start = 4, s.end = 2
smasher loop 21=(,flag=s, s.start = 4, s.end = 2
smasher loop 22=c,flag=s, s.start = 4, s.end = 2
smasher loop 23=m,flag=s, s.start = 4, s.end = 2
smasher loop 24=d,flag=s, s.start = 4, s.end = 2
smasher loop 25=,,flag=s, s.start = 4, s.end = 2
space_smash, smashed_arg = check_redirection(cmd,, start = 4, end = 25
smasher loop 26= ,flag=i, s.start = 4, s.end = 25
smasher loop 27=s,flag=s, s.start = 27, s.end = 25
smasher loop 28=-,flag=s, s.start = 27, s.end = 25
space_smash, smashed_arg = s-, start = 27, end = 28
smasher loop 29=>,flag=i, s.start = 27, s.end = 28
smasher loop 30=l,flag=i, s.start = 29, s.end = 29
smasher loop 31=a,flag=s, s.start = 30, s.end = 29
smasher loop 32=s,flag=s, s.start = 30, s.end = 29
smasher loop 33=t,flag=s, s.start = 30, s.end = 29
smasher loop 34=_,flag=s, s.start = 30, s.end = 29
smasher loop 35=e,flag=s, s.start = 30, s.end = 29
smasher loop 36=n,flag=s, s.start = 30, s.end = 29
smasher loop 37=d,flag=s, s.start = 30, s.end = 29
smasher loop 38=),flag=s, s.start = 30, s.end = 29
smasher loop 39=),flag=s, s.start = 30, s.end = 29
space_smash, smashed_arg = last_end)), start = 30, end = 39
~|~
~|~
~check_redirection(cmd,~
~s-~
~>~
~last_end))~
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=s, s.start = 3, s.end = 2
smasher loop 6=",flag=", s.start = 3, s.end = 2
" " arg = <ls|gr""ep h>,cmd[6] = ",  start = 3 i = 6, flag = "
before cleaning arg = <ls|gr""ep h>, start = 3 i = 6
Mul single and double quote
 cmd = <ls|gr""ep h>, flag = ",strt=3,end=2,i=6
figur out end of quote <ls|gr""ep h>, f=", st=3, en=2, i= 6
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=6 


last end cmd[2]= |


fetching end cmd[5 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (1)
fix said 0 (end)

reached end cmd[5 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|gr""ep h>, f=", st=3, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <gr>, st=3, en=6
filling node with ~gr~
smasher loop 7=e,flag=i, s.start = 3, s.end = 6
smasher loop 8=p,flag=s, s.start = 7, s.end = 6
space_smash, smashed_arg = ep, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~gr~
~ep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=s, s.start = 3, s.end = 2
smasher loop 6=e,flag=", s.start = 3, s.end = 2
" " arg = <ls|gr"ep" h>,cmd[6] = e,  start = 3 i = 6, flag = "
smasher loop 7=p,flag=", s.start = 3, s.end = 2
" " arg = <ls|gr"ep" h>,cmd[7] = p,  start = 3 i = 7, flag = "
smasher loop 8=",flag=", s.start = 3, s.end = 2
" " arg = <ls|gr"ep" h>,cmd[8] = ",  start = 3 i = 8, flag = "
before cleaning arg = <ls|gr"ep" h>, start = 3 i = 8
Mul single and double quote
 cmd = <ls|gr"ep" h>, flag = ",strt=3,end=2,i=8
figur out end of quote <ls|gr"ep" h>, f=", st=3, en=2, i= 8
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=8 


last end cmd[2]= |


fetching end cmd[7 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0)
fix said 0 (end)

reached end cmd[7 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|gr"ep" h>, f=", st=3, en=8, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=3, en=8
filling node with ~grep~
smasher loop 9= ,flag=i, s.start = 3, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~grep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=e,flag=s, s.start = 3, s.end = 2
smasher loop 6=p,flag=s, s.start = 3, s.end = 2
smasher loop 7=",flag=s, s.start = 3, s.end = 2
smasher loop 8=",flag=", s.start = 3, s.end = 2
" " arg = <ls|grep"" h>,cmd[8] = ",  start = 3 i = 8, flag = "
before cleaning arg = <ls|grep"" h>, start = 3 i = 8
Mul single and double quote
 cmd = <ls|grep"" h>, flag = ",strt=3,end=2,i=8
figur out end of quote <ls|grep"" h>, f=", st=3, en=2, i= 8
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=8 


last end cmd[2]= |


fetching end cmd[7 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0)
fix said 0 (end)

reached end cmd[7 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|grep"" h>, f=", st=3, en=8, i= 8
entering the source of all devil loop
Exiting Multiple merged_str = <grep>, st=3, en=8
filling node with ~grep~
smasher loop 9= ,flag=i, s.start = 3, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~grep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=s, s.start = 3, s.end = 2
smasher loop 6=",flag=", s.start = 3, s.end = 2
" " arg = <ls|gr""ep h>,cmd[6] = ",  start = 3 i = 6, flag = "
before cleaning arg = <ls|gr""ep h>, start = 3 i = 6
Mul single and double quote
 cmd = <ls|gr""ep h>, flag = ",strt=3,end=2,i=6
figur out end of quote <ls|gr""ep h>, f=", st=3, en=2, i= 6
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=6 


last end cmd[2]= |


fetching end cmd[5 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (1)
fix said 0 (end)

reached end cmd[5 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|gr""ep h>, f=", st=3, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <gr>, st=3, en=6
filling node with ~gr~
smasher loop 7=e,flag=i, s.start = 3, s.end = 6
smasher loop 8=p,flag=s, s.start = 7, s.end = 6
space_smash, smashed_arg = ep, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~gr~
~ep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=p,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
smasher loop 5=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = export, start = 0, end = 5
~export~
joining env 
smasher loop 0=b,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=h,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = bash, start = 0, end = 3
~bash~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=p,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
smasher loop 5=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = export, start = 0, end = 5
~export~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=p,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
smasher loop 5=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = export, start = 0, end = 5
~export~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=p,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
smasher loop 5=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = export, start = 0, end = 5
smasher loop 6= ,flag=i, s.start = 0, s.end = 5
smasher loop 7=3,flag=s, s.start = 7, s.end = 5
smasher loop 8=a,flag=s, s.start = 7, s.end = 5
space_smash, smashed_arg = 3a, start = 7, end = 8
~export~
~3a~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=p,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
smasher loop 5=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = export, start = 0, end = 5
~export~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=l,flag=s, s.start = 0, s.end = 0
smasher loop 2=e,flag=s, s.start = 0, s.end = 0
smasher loop 3=a,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = clear, start = 0, end = 4
~clear~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=n,flag=s, s.start = 0, s.end = 0
smasher loop 2=v,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = env, start = 0, end = 2
~env~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=l,flag=s, s.start = 0, s.end = 0
smasher loop 2=e,flag=s, s.start = 0, s.end = 0
smasher loop 3=a,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = clear, start = 0, end = 4
~clear~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=p,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
smasher loop 5=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = export, start = 0, end = 5
~export~
joining env 
smasher loop 0=b,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=h,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = bash, start = 0, end = 3
~bash~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=p,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
smasher loop 5=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = export, start = 0, end = 5
~export~
joining env 
smasher loop 0=b,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=h,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = bash, start = 0, end = 3
~bash~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=p,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
smasher loop 5=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = export, start = 0, end = 5
~export~
joining env 
smasher loop 0=b,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=h,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = bash, start = 0, end = 3
~bash~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=p,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
smasher loop 5=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = export, start = 0, end = 5
~export~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=n,flag=s, s.start = 0, s.end = 0
smasher loop 2=v,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = env, start = 0, end = 2
~env~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=d,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cd, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=t,flag=s, s.start = 3, s.end = 1
smasher loop 4=r,flag=s, s.start = 3, s.end = 1
smasher loop 5=a,flag=s, s.start = 3, s.end = 1
smasher loop 6=s,flag=s, s.start = 3, s.end = 1
smasher loop 7=j,flag=s, s.start = 3, s.end = 1
space_smash, smashed_arg = trasj, start = 3, end = 7
~cd~
~trasj~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=d,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cd, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=t,flag=s, s.start = 3, s.end = 1
smasher loop 4=r,flag=s, s.start = 3, s.end = 1
smasher loop 5=a,flag=s, s.start = 3, s.end = 1
smasher loop 6=s,flag=s, s.start = 3, s.end = 1
smasher loop 7=h,flag=s, s.start = 3, s.end = 1
space_smash, smashed_arg = trash, start = 3, end = 7
~cd~
~trash~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=p,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
smasher loop 5=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = export, start = 0, end = 5
~export~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=l,flag=s, s.start = 0, s.end = 0
smasher loop 2=e,flag=s, s.start = 0, s.end = 0
smasher loop 3=a,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = clear, start = 0, end = 4
~clear~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=p,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
smasher loop 5=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = export, start = 0, end = 5
~export~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=p,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
smasher loop 5=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = export, start = 0, end = 5
~export~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=p,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
smasher loop 5=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = export, start = 0, end = 5
~export~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=r,flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=s, s.start = 3, s.end = 2
smasher loop 6=",flag=", s.start = 3, s.end = 2
" " arg = <ls|gr""ep h>,cmd[6] = ",  start = 3 i = 6, flag = "
before cleaning arg = <ls|gr""ep h>, start = 3 i = 6
Mul single and double quote
 cmd = <ls|gr""ep h>, flag = ",strt=3,end=2,i=6
figur out end of quote <ls|gr""ep h>, f=", st=3, en=2, i= 6
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=6 


last end cmd[2]= |


fetching end cmd[5 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (1)
fix said 0 (end)

reached end cmd[5 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|gr""ep h>, f=", st=3, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <gr>, st=3, en=6
filling node with ~gr~
smasher loop 7=e,flag=i, s.start = 3, s.end = 6
smasher loop 8=p,flag=s, s.start = 7, s.end = 6
space_smash, smashed_arg = ep, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~gr~
~ep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=m,flag=s, s.start = 0, s.end = 0
smasher loop 2=d,flag=s, s.start = 0, s.end = 0
smasher loop 3=[,flag=s, s.start = 0, s.end = 0
smasher loop 4=t,flag=s, s.start = 0, s.end = 0
smasher loop 5=m,flag=s, s.start = 0, s.end = 0
smasher loop 6=p,flag=s, s.start = 0, s.end = 0
smasher loop 7=_,flag=s, s.start = 0, s.end = 0
smasher loop 8=c,flag=s, s.start = 0, s.end = 0
smasher loop 9=h,flag=s, s.start = 0, s.end = 0
smasher loop 10=e,flag=s, s.start = 0, s.end = 0
smasher loop 11=c,flag=s, s.start = 0, s.end = 0
smasher loop 12=k,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cmd[tmp_check, start = 0, end = 12
smasher loop 13= ,flag=i, s.start = 0, s.end = 12
smasher loop 14=+,flag=s, s.start = 14, s.end = 12
space_smash, smashed_arg = +, start = 14, end = 14
smasher loop 15= ,flag=i, s.start = 14, s.end = 14
smasher loop 16=1,flag=s, s.start = 16, s.end = 14
smasher loop 17=],flag=s, s.start = 16, s.end = 14
space_smash, smashed_arg = 1], start = 16, end = 17
~cmd[tmp_check~
~+~
~1]~
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3=g,flag=i, s.start = 2, s.end = 2
smasher loop 4=",flag=s, s.start = 3, s.end = 2
smasher loop 5=",flag=", s.start = 3, s.end = 2
" " arg = <ls|g""rep h>,cmd[5] = ",  start = 3 i = 5, flag = "
before cleaning arg = <ls|g""rep h>, start = 3 i = 5
Mul single and double quote
 cmd = <ls|g""rep h>, flag = ",strt=3,end=2,i=5
figur out end of quote <ls|g""rep h>, f=", st=3, en=2, i= 5
cas 3 no quote start,st = 3 en= 2


Case 3
s=3,e=2,i=5 


last end cmd[2]= |


fetching end cmd[4 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (1)
fix said 0 (end)

reached end cmd[4 + 1] = <">, flag = " start = 3

end figur out end of quote <ls|g""rep h>, f=", st=3, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <g>, st=3, en=5
filling node with ~g~
smasher loop 6=r,flag=i, s.start = 3, s.end = 5
smasher loop 7=e,flag=s, s.start = 6, s.end = 5
smasher loop 8=p,flag=s, s.start = 6, s.end = 5
space_smash, smashed_arg = rep, start = 6, end = 8
smasher loop 9= ,flag=i, s.start = 6, s.end = 8
smasher loop 10=h,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = h, start = 10, end = 10
~ls~
~|~
~g~
~rep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 



smasher loop 0=f,flag=i, s.start = 0, s.end = 0
smasher loop 1=d,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=f,flag=", s.start = 0, s.end = 0
" " arg = <fds"fd">,cmd[4] = f,  start = 0 i = 4, flag = "
smasher loop 5=d,flag=", s.start = 0, s.end = 0
" " arg = <fds"fd">,cmd[5] = d,  start = 0 i = 5, flag = "
smasher loop 6=",flag=", s.start = 0, s.end = 0
" " arg = <fds"fd">,cmd[6] = ",  start = 0 i = 6, flag = "
before cleaning arg = <fds"fd">, start = 0 i = 6
Mul single and double quote
 cmd = <fds"fd">, flag = ",strt=0,end=0,i=6
figur out end of quote <fds"fd">, f=", st=0, en=0, i= 6
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=6 


last end cmd[0]= f


fetching end cmd[5 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0)
fix said 0 (end)

reached end cmd[5 + 1] = <">, flag = " start = 0

end figur out end of quote <fds"fd">, f=", st=0, en=6, i= 6
filling node with ~fdsfd~
~fdsfd~
joining env 
smasher loop 0=f,flag=i, s.start = 0, s.end = 0
smasher loop 1=d,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=f,flag=", s.start = 0, s.end = 0
" " arg = <fds"fd" h>,cmd[4] = f,  start = 0 i = 4, flag = "
smasher loop 5=d,flag=", s.start = 0, s.end = 0
" " arg = <fds"fd" h>,cmd[5] = d,  start = 0 i = 5, flag = "
smasher loop 6=",flag=", s.start = 0, s.end = 0
" " arg = <fds"fd" h>,cmd[6] = ",  start = 0 i = 6, flag = "
before cleaning arg = <fds"fd" h>, start = 0 i = 6
Mul single and double quote
 cmd = <fds"fd" h>, flag = ",strt=0,end=0,i=6
figur out end of quote <fds"fd" h>, f=", st=0, en=0, i= 6
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=6 


last end cmd[0]= f


fetching end cmd[5 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0)
fix said 0 (end)

reached end cmd[5 + 1] = <">, flag = " start = 0

end figur out end of quote <fds"fd" h>, f=", st=0, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <fdsfd>, st=0, en=6
filling node with ~fdsfd~
smasher loop 7= ,flag=i, s.start = 0, s.end = 6
smasher loop 8=h,flag=s, s.start = 8, s.end = 6
space_smash, smashed_arg = h, start = 8, end = 8
~fdsfd~
~h~
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
smasher loop 5=f,flag=s, s.start = 5, s.end = 3
smasher loop 6=d,flag=s, s.start = 5, s.end = 3
smasher loop 7=s,flag=s, s.start = 5, s.end = 3
smasher loop 8=",flag=s, s.start = 5, s.end = 3
smasher loop 9=f,flag=", s.start = 5, s.end = 3
" " arg = <ls | fds"fd" h>,cmd[9] = f,  start = 5 i = 9, flag = "
smasher loop 10=d,flag=", s.start = 5, s.end = 3
" " arg = <ls | fds"fd" h>,cmd[10] = d,  start = 5 i = 10, flag = "
smasher loop 11=",flag=", s.start = 5, s.end = 3
" " arg = <ls | fds"fd" h>,cmd[11] = ",  start = 5 i = 11, flag = "
before cleaning arg = <ls | fds"fd" h>, start = 5 i = 11
Mul single and double quote
 cmd = <ls | fds"fd" h>, flag = ",strt=5,end=3,i=11
figur out end of quote <ls | fds"fd" h>, f=", st=5, en=3, i= 11
cas 3 no quote start,st = 5 en= 3


Case 3
s=5,e=3,i=11 


last end cmd[3]= |


fetching end cmd[10 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0)
fix said 0 (end)

reached end cmd[10 + 1] = <">, flag = " start = 5

end figur out end of quote <ls | fds"fd" h>, f=", st=5, en=11, i= 11
entering the source of all devil loop
Exiting Multiple merged_str = <fdsfd>, st=5, en=11
filling node with ~fdsfd~
smasher loop 12= ,flag=i, s.start = 5, s.end = 11
smasher loop 13=h,flag=s, s.start = 13, s.end = 11
space_smash, smashed_arg = h, start = 13, end = 13
~ls~
~|~
~fdsfd~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
" " arg = <ls | "fds"fd h>,cmd[4] =  ,  start = 5 i = 4, flag = "
smasher loop 5=",flag=", s.start = 5, s.end = 3
" " arg = <ls | "fds"fd h>,cmd[5] = ",  start = 5 i = 5, flag = "
smasher loop 7=d,flag=", s.start = 5, s.end = 3
" " arg = <ls | "fds"fd h>,cmd[7] = d,  start = 5 i = 7, flag = "
smasher loop 8=s,flag=", s.start = 5, s.end = 3
" " arg = <ls | "fds"fd h>,cmd[8] = s,  start = 5 i = 8, flag = "
smasher loop 9=",flag=", s.start = 5, s.end = 3
" " arg = <ls | "fds"fd h>,cmd[9] = ",  start = 5 i = 9, flag = "
before cleaning arg = <ls | "fds"fd h>, start = 5 i = 9
Mul single and double quote
 cmd = <ls | "fds"fd h>, flag = ",strt=5,end=3,i=9
figur out end of quote <ls | "fds"fd h>, f=", st=5, en=3, i= 9
calling case 2 Doesn't end with quote 
main cmd[9] = "  cmd[10] = f , start = 5, flag = "


Case 2
s=5,e=3,i=9 
after decrement s=5,e=3,i=8 

reached end cmd[8 + 1] = <">, flag = " start = 5



forcing fixing_edge_quote_start_case_2
fetching end cmd[9 + 1] = <f>, flag = "
fetching end cmd[9 + 2] = <d>, flag = "

reached end cmd[9 + 3] = < >, flag = " start = 5


special_special_case 2
s=5,e=12,i=11 
end figur out end of quote <ls | "fds"fd h>, f=", st=5, en=12, i= 11
entering the source of all devil loop
Exiting Multiple merged_str = <fdsfd>, st=5, en=12
filling node with ~fdsfd~
smasher loop 12= ,flag=i, s.start = 5, s.end = 12
smasher loop 13=h,flag=s, s.start = 13, s.end = 12
space_smash, smashed_arg = h, start = 13, end = 13
~ls~
~|~
~fdsfd~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
jojoining env 
ining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
" " arg = <ls | "GREP' h>,cmd[4] =  ,  start = 5 i = 4, flag = "
smasher loop 5=",flag=", s.start = 5, s.end = 3
" " arg = <ls | "GREP' h>,cmd[5] = ",  start = 5 i = 5, flag = "
smasher loop 7=R,flag=", s.start = 5, s.end = 3
" " arg = <ls | "GREP' h>,cmd[7] = R,  start = 5 i = 7, flag = "
smasher loop 8=E,flag=", s.start = 5, s.end = 3
" " arg = <ls | "GREP' h>,cmd[8] = E,  start = 5 i = 8, flag = "
smasher loop 9=P,flag=", s.start = 5, s.end = 3
" " arg = <ls | "GREP' h>,cmd[9] = P,  start = 5 i = 9, flag = "
smasher loop 10=',flag=", s.start = 5, s.end = 3
" " arg = <ls | "GREP' h>,cmd[10] = ',  start = 5 i = 10, flag = "
smasher loop 11= ,flag=", s.start = 5, s.end = 3
" " arg = <ls | "GREP' h>,cmd[11] =  ,  start = 5 i = 11, flag = "
smasher loop 12=h,flag=", s.start = 5, s.end = 3
" " arg = <ls | "GREP' h>,cmd[12] = h,  start = 5 i = 12, flag = "
Unclose " double quote, throwing an error
Will not visualize cmd this is an errored one
~ls~
~|~
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
" " arg = <ls | "GREP" h>,cmd[4] =  ,  start = 5 i = 4, flag = "
smasher loop 5=",flag=", s.start = 5, s.end = 3
" " arg = <ls | "GREP" h>,cmd[5] = ",  start = 5 i = 5, flag = "
smasher loop 7=R,flag=", s.start = 5, s.end = 3
" " arg = <ls | "GREP" h>,cmd[7] = R,  start = 5 i = 7, flag = "
smasher loop 8=E,flag=", s.start = 5, s.end = 3
" " arg = <ls | "GREP" h>,cmd[8] = E,  start = 5 i = 8, flag = "
smasher loop 9=P,flag=", s.start = 5, s.end = 3
" " arg = <ls | "GREP" h>,cmd[9] = P,  start = 5 i = 9, flag = "
smasher loop 10=",flag=", s.start = 5, s.end = 3
" " arg = <ls | "GREP" h>,cmd[10] = ",  start = 5 i = 10, flag = "
before cleaning arg = <ls | "GREP" h>, start = 5 i = 10
Mul single and double quote
 cmd = <ls | "GREP" h>, flag = ",strt=5,end=3,i=10
figur out end of quote <ls | "GREP" h>, f=", st=5, en=3, i= 10
calling case 2 Doesn't end with quote 
main cmd[10] = "  cmd[11] =   , start = 5, flag = "


Case 2
s=5,e=3,i=10 
after decrement s=5,e=3,i=9 

reached end cmd[9 + 1] = <">, flag = " start = 5



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = ls | "GREP" h, start = 5, end = 10
final_arg before expand = GREP, start = 5, end = 10
final_arg after filling normal case = GREP, start = 5, end = 10
end figur out end of quote <ls | "GREP" h>, f=", st=5, en=10, i= 10
entering the source of all devil loop
Exiting Multiple merged_str = <GREP>, st=5, en=10
filling node with ~GREP~
smasher loop 11= ,flag=i, s.start = 5, s.end = 10
smasher loop 12=h,flag=s, s.start = 12, s.end = 10
space_smash, smashed_arg = h, start = 12, end = 12
~ls~
~|~
~GREP~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=C,flag=i, s.start = 0, s.end = 0
smasher loop 1=L,flag=s, s.start = 0, s.end = 0
smasher loop 2=E,flag=s, s.start = 0, s.end = 0
smasher loop 3=A,flag=s, s.start = 0, s.end = 0
smasher loop 4=R,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = CLEAR, start = 0, end = 4
~CLEAR~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
~cat~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
~cat~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
~cat~
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=l,flag=s, s.start = 0, s.end = 0
smasher loop 2=a,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = claer, start = 0, end = 4
~claer~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=l,flag=s, s.start = 0, s.end = 0
smasher loop 2=e,flag=s, s.start = 0, s.end = 0
smasher loop 3=a,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = clear, start = 0, end = 4
~clear~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
smasher loop 5=c,flag=s, s.start = 5, s.end = 3
smasher loop 6=a,flag=s, s.start = 5, s.end = 3
smasher loop 7=t,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = cat, start = 5, end = 7
smasher loop 8= ,flag=i, s.start = 5, s.end = 7
smasher loop 9=<,flag=i, s.start = 9, s.end = 8
smasher loop 11=1,flag=i, s.start = 9, s.end = 9
space_smash, smashed_arg = 1, start = 11, end = 11
smasher loop 12= ,flag=i, s.start = 11, s.end = 11
smasher loop 13=<,flag=i, s.start = 13, s.end = 12
smasher loop 15= ,flag=i, s.start = 13, s.end = 13
smasher loop 16=2,flag=s, s.start = 16, s.end = 13
space_smash, smashed_arg = 2, start = 16, end = 16
smasher loop 17= ,flag=i, s.start = 16, s.end = 16
smasher loop 18=<,flag=i, s.start = 18, s.end = 17
smasher loop 20= ,flag=i, s.start = 18, s.end = 18
smasher loop 21=3,flag=s, s.start = 21, s.end = 18
space_smash, smashed_arg = 3, start = 21, end = 21
smasher loop 22= ,flag=i, s.start = 21, s.end = 21
smasher loop 23=|,flag=i, s.start = 23, s.end = 22
smasher loop 24= ,flag=i, s.start = 23, s.end = 23
smasher loop 25=l,flag=s, s.start = 25, s.end = 23
smasher loop 26=s,flag=s, s.start = 25, s.end = 23
space_smash, smashed_arg = ls, start = 25, end = 26
smasher loop 27= ,flag=i, s.start = 25, s.end = 26
smasher loop 28=|,flag=i, s.start = 28, s.end = 27
smasher loop 29= ,flag=i, s.start = 28, s.end = 28
smasher loop 30=p,flag=s, s.start = 30, s.end = 28
smasher loop 31=s,flag=s, s.start = 30, s.end = 28
space_smash, smashed_arg = ps, start = 30, end = 31
smasher loop 32= ,flag=i, s.start = 30, s.end = 31
smasher loop 33=|,flag=i, s.start = 33, s.end = 32
smasher loop 34= ,flag=i, s.start = 33, s.end = 33
smasher loop 35=p,flag=s, s.start = 35, s.end = 33
smasher loop 36=s,flag=s, s.start = 35, s.end = 33
space_smash, smashed_arg = ps, start = 35, end = 36
~ls~
~|~
~cat~
~<<~
~1~
~<<~
~2~
~<<~
~3~
~|~
~ls~
~|~
~ps~
~|~
~ps~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joinijoining env 
joining env 
joining env 
ng env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
smasher loop 9=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fds, start = 7, end = 9
~cat~
~<<~
~fds~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
smasher loop 9=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fds, start = 7, end = 9
~cat~
~<<~
~fds~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
smasher loop 8= ,flag=i, s.start = 7, s.end = 7
smasher loop 9=|,flag=i, s.start = 9, s.end = 8
smasher loop 10= ,flag=i, s.start = 9, s.end = 9
smasher loop 11=l,flag=s, s.start = 11, s.end = 9
smasher loop 12=s,flag=s, s.start = 11, s.end = 9
space_smash, smashed_arg = ls, start = 11, end = 12
~cat~
~<<~
~1~
~|~
~ls~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
smasher loop 8= ,flag=i, s.start = 7, s.end = 7
smasher loop 9=<,flag=i, s.start = 9, s.end = 8
smasher loop 11= ,flag=i, s.start = 9, s.end = 9
smasher loop 12=2,flag=s, s.start = 12, s.end = 9
space_smash, smashed_arg = 2, start = 12, end = 12
smasher loop 13= ,flag=i, s.start = 12, s.end = 12
smasher loop 14=<,flag=i, s.start = 14, s.end = 13
smasher loop 16= ,flag=i, s.start = 14, s.end = 14
smasher loop 17=3,flag=s, s.start = 17, s.end = 14
space_smash, smashed_arg = 3, start = 17, end = 17
smasher loop 18= ,flag=i, s.start = 17, s.end = 17
smasher loop 19=<,flag=i, s.start = 19, s.end = 18
smasher loop 21= ,flag=i, s.start = 19, s.end = 19
smasher loop 22=4,flag=s, s.start = 22, s.end = 19
space_smash, smashed_arg = 4, start = 22, end = 22
smasher loop 23= ,flag=i, s.start = 22, s.end = 22
smasher loop 24=<,flag=i, s.start = 24, s.end = 23
smasher loop 26= ,flag=i, s.start = 24, s.end = 24
smasher loop 27=5,flag=s, s.start = 27, s.end = 24
space_smash, smashed_arg = 5, start = 27, end = 27
smasher loop 28=|,flag=i, s.start = 27, s.end = 27
smasher loop 29= ,flag=i, s.start = 28, s.end = 28
smasher loop 30=l,flag=s, s.start = 30, s.end = 28
smasher loop 31=s,flag=s, s.start = 30, s.end = 28
space_smash, smashed_arg = ls, start = 30, end = 31
~cat~
~<<~
~1~
~<<~
~2~
~<<~
~3~
~<<~
~4~
~<<~
~5~
~|~
~ls~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=d,flag=s, s.start = 7, s.end = 4
smasher loop 8=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = ds, start = 7, end = 8
~cat~
~<<~
~ds~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=<,flag=i, s.start = 0, s.end = 0
smasher loop 2= ,flag=i, s.start = 0, s.end = 0
smasher loop 3=a,flag=s, s.start = 3, s.end = 0
space_smash, smashed_arg = a, start = 3, end = 3
~<<~
~a~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
smasher loop 8= ,flag=i, s.start = 7, s.end = 7
smasher loop 9=<,flag=i, s.start = 9, s.end = 8
smasher loop 11= ,flag=i, s.start = 9, s.end = 9
smasher loop 12=2,flag=s, s.start = 12, s.end = 9
space_smash, smashed_arg = 2, start = 12, end = 12
smasher loop 13= ,flag=i, s.start = 12, s.end = 12
smasher loop 14=<,flag=i, s.start = 14, s.end = 13
smasher loop 16= ,flag=i, s.start = 14, s.end = 14
smasher loop 17=3,flag=s, s.start = 17, s.end = 14
space_smash, smashed_arg = 3, start = 17, end = 17
smasher loop 18= ,flag=i, s.start = 17, s.end = 17
smasher loop 19=<,flag=i, s.start = 19, s.end = 18
smasher loop 21= ,flag=i, s.start = 19, s.end = 19
smasher loop 22=4,flag=s, s.start = 22, s.end = 19
space_smash, smashed_arg = 4, start = 22, end = 22
~cat~
~<<~
~1~
~<<~
~2~
~<<~
~3~
~<<~
~4~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
smasher loop 5=c,flag=s, s.start = 5, s.end = 3
smasher loop 6=a,flag=s, s.start = 5, s.end = 3
smasher loop 7=t,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = cat, start = 5, end = 7
smasher loop 8= ,flag=i, s.start = 5, s.end = 7
smasher loop 9=<,flag=i, s.start = 9, s.end = 8
smasher loop 11= ,flag=i, s.start = 9, s.end = 9
smasher loop 12=1,flag=s, s.start = 12, s.end = 9
space_smash, smashed_arg = 1, start = 12, end = 12
smasher loop 13= ,flag=i, s.start = 12, s.end = 12
smasher loop 14=<,flag=i, s.start = 14, s.end = 13
smasher loop 16= ,flag=i, s.start = 14, s.end = 14
smasher loop 17=2,flag=s, s.start = 17, s.end = 14
space_smash, smashed_arg = 2, start = 17, end = 17
smasher loop 18=<,flag=i, s.start = 17, s.end = 17
smasher loop 20= ,flag=i, s.start = 18, s.end = 18
smasher loop 21=3,flag=s, s.start = 21, s.end = 18
space_smash, smashed_arg = 3, start = 21, end = 21
smasher loop 22=|,flag=i, s.start = 21, s.end = 21
smasher loop 23= ,flag=i, s.start = 22, s.end = 22
smasher loop 24=l,flag=s, s.start = 24, s.end = 22
smasher loop 25=s,flag=s, s.start = 24, s.end = 22
space_smash, smashed_arg = ls, start = 24, end = 25
~ls~
~|~
~cat~
~<<~
~1~
~<<~
~2~
~<<~
~3~
~|~
~ls~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
joinijoining env 
joining env 
ng env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=<,flag=i, s.start = 0, s.end = 0
smasher loop 1= ,flag=i, s.start = 0, s.end = 0
smasher loop 2=1,flag=s, s.start = 2, s.end = 0
space_smash, smashed_arg = 1, start = 2, end = 2
smasher loop 3= ,flag=i, s.start = 2, s.end = 2
smasher loop 4=c,flag=s, s.start = 4, s.end = 2
smasher loop 5=a,flag=s, s.start = 4, s.end = 2
smasher loop 6=t,flag=s, s.start = 4, s.end = 2
space_smash, smashed_arg = cat, start = 4, end = 6
~<~
~1~
~cat~
count_outliar_redire i = 0, ? i == -1 ok:error

Outliar redirects cmds 2
if 2
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=;,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=d,flag=s, s.start = 0, s.end = 0
smasher loop 4=k,flag=s, s.start = 0, s.end = 0
smasher loop 5=f,flag=s, s.start = 0, s.end = 0
smasher loop 6=m,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = l;sdkfm, start = 0, end = 6
~l;sdkfm~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3=<,flag=i, s.start = 0, s.end = 2
smasher loop 5=2,flag=i, s.start = 3, s.end = 3
space_smash, smashed_arg = 2, start = 5, end = 5
~cat~
~<<~
~2~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=2,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 2, start = 7, end = 7
~cat~
~<<~
~2~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=i,flag=s, s.start = 0, s.end = 0
smasher loop 2=x,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = eixt, start = 0, end = 3
~eixt~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=2,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 2, start = 7, end = 7
~cat~
~<<~
~2~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=3,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 3, start = 7, end = 7
~cat~
~<<~
~3~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=2,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 2, start = 7, end = 7
~cat~
~<<~
~2~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=2,flag=s, s.start = 7, s.end = 4
smasher loop 8=3,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 23, start = 7, end = 8
~cat~
~<<~
~23~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=3,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 3, start = 7, end = 7
~cat~
~<<~
~3~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6=1,flag=i, s.start = 4, s.end = 4
space_smash, smashed_arg = 1, start = 6, end = 6
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=.,flag=i, s.start = 0, s.end = 0
smasher loop 1=/,flag=s, s.start = 0, s.end = 0
smasher loop 2=m,flag=s, s.start = 0, s.end = 0
smasher loop 3=i,flag=s, s.start = 0, s.end = 0
smasher loop 4=n,flag=s, s.start = 0, s.end = 0
smasher loop 5=i,flag=s, s.start = 0, s.end = 0
smasher loop 6=s,flag=s, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 0, s.end = 0
smasher loop 8=e,flag=s, s.start = 0, s.end = 0
smasher loop 9=l,flag=s, s.start = 0, s.end = 0
smasher loop 10=l,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ./minishell, start = 0, end = 10
~./minishell~
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=2,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 2, start = 7, end = 7
~cat~
~<<~
~2~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6=1,flag=i, s.start = 4, s.end = 4
space_smash, smashed_arg = 1, start = 6, end = 6
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6=1,flag=i, s.start = 4, s.end = 4
space_smash, smashed_arg = 1, start = 6, end = 6
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6=1,flag=i, s.start = 4, s.end = 4
space_smash, smashed_arg = 1, start = 6, end = 6
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6=1,flag=i, s.start = 4, s.end = 4
space_smash, smashed_arg = 1, start = 6, end = 6
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6=1,flag=i, s.start = 4, s.end = 4
space_smash, smashed_arg = 1, start = 6, end = 6
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6=1,flag=i, s.start = 4, s.end = 4
space_smash, smashed_arg = 1, start = 6, end = 6
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 5= ,flag=i, s.start = 4, s.end = 4
smasher loop 6=1,flag=s, s.start = 6, s.end = 4
space_smash, smashed_arg = 1, start = 6, end = 6
~cat~
~<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error

Outliar redirects cmds 0
count_outliar_redire i = 0, ? i == -1 ok:error

Outliar redirects cmds 1
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=2,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 2, start = 7, end = 7
~cat~
~<<~
~2~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
smasher loop 8=2,flag=s, s.start = 7, s.end = 4
smasher loop 9=1,flag=s, s.start = 7, s.end = 4
smasher loop 10=4,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1214, start = 7, end = 10
smasher loop 11= ,flag=i, s.start = 7, s.end = 10
smasher loop 12=<,flag=i, s.start = 12, s.end = 11
smasher loop 14= ,flag=i, s.start = 12, s.end = 12
smasher loop 15=d,flag=s, s.start = 15, s.end = 12
smasher loop 16=s,flag=s, s.start = 15, s.end = 12
space_smash, smashed_arg = ds, start = 15, end = 16
smasher loop 17= ,flag=i, s.start = 15, s.end = 16
smasher loop 18=<,flag=i, s.start = 18, s.end = 17
smasher loop 20= ,flag=i, s.start = 18, s.end = 18
smasher loop 21=f,flag=s, s.start = 21, s.end = 18
smasher loop 22=d,flag=s, s.start = 21, s.end = 18
smasher loop 23=s,flag=s, s.start = 21, s.end = 18
space_smash, smashed_arg = fds, start = 21, end = 23
smasher loop 24= ,flag=i, s.start = 21, s.end = 23
smasher loop 25=<,flag=i, s.start = 25, s.end = 24
smasher loop 27= ,flag=i, s.start = 25, s.end = 25
smasher loop 28=d,flag=s, s.start = 28, s.end = 25
space_smash, smashed_arg = d, start = 28, end = 28
~cat~
~<<~
~1214~
~<<~
~ds~
~<<~
~fds~
~<<~
~d~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
smasher loop 5=c,flag=s, s.start = 5, s.end = 3
smasher loop 6=a,flag=s, s.start = 5, s.end = 3
smasher loop 7=t,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = cat, start = 5, end = 7
smasher loop 8= ,flag=i, s.start = 5, s.end = 7
smasher loop 9=<,flag=i, s.start = 9, s.end = 8
smasher loop 11= ,flag=i, s.start = 9, s.end = 9
smasher loop 12=s,flag=s, s.start = 12, s.end = 9
smasher loop 13=d,flag=s, s.start = 12, s.end = 9
smasher loop 14=f,flag=s, s.start = 12, s.end = 9
smasher loop 15=k,flag=s, s.start = 12, s.end = 9
smasher loop 16=j,flag=s, s.start = 12, s.end = 9
smasher loop 17=s,flag=s, s.start = 12, s.end = 9
smasher loop 18=a,flag=s, s.start = 12, s.end = 9
smasher loop 19=d,flag=s, s.start = 12, s.end = 9
smasher loop 20=n,flag=s, s.start = 12, s.end = 9
space_smash, smashed_arg = sdfkjsadn, start = 12, end = 20
smasher loop 21= ,flag=i, s.start = 12, s.end = 20
smasher loop 22=<,flag=i, s.start = 22, s.end = 21
smasher loop 24= ,flag=i, s.start = 22, s.end = 22
smasher loop 25=a,flag=s, s.start = 25, s.end = 22
smasher loop 26=s,flag=s, s.start = 25, s.end = 22
smasher loop 27=d,flag=s, s.start = 25, s.end = 22
smasher loop 28=f,flag=s, s.start = 25, s.end = 22
smasher loop 29=k,flag=s, s.start = 25, s.end = 22
smasher loop 30=j,flag=s, s.start = 25, s.end = 22
smasher loop 31=n,flag=s, s.start = 25, s.end = 22
space_smash, smashed_arg = asdfkjn, start = 25, end = 31
smasher loop 32= ,flag=i, s.start = 25, s.end = 31
smasher loop 33=<,flag=i, s.start = 33, s.end = 32
smasher loop 35= ,flag=i, s.start = 33, s.end = 33
smasher loop 36=f,flag=s, s.start = 36, s.end = 33
smasher loop 37=s,flag=s, s.start = 36, s.end = 33
smasher loop 38=d,flag=s, s.start = 36, s.end = 33
smasher loop 39=a,flag=s, s.start = 36, s.end = 33
smasher loop 40=i,flag=s, s.start = 36, s.end = 33
smasher loop 41=k,flag=s, s.start = 36, s.end = 33
smasher loop 42=f,flag=s, s.start = 36, s.end = 33
smasher loop 43=j,flag=s, s.start = 36, s.end = 33
smasher loop 44=n,flag=s, s.start = 36, s.end = 33
space_smash, smashed_arg = fsdaikfjn, start = 36, end = 44
smasher loop 45=|,flag=i, s.start = 36, s.end = 44
smasher loop 46=l,flag=i, s.start = 45, s.end = 45
smasher loop 47=s,flag=s, s.start = 46, s.end = 45
space_smash, smashed_arg = ls, start = 46, end = 47
~ls~
~|~
~cat~
~<<~
~sdfkjsadn~
~<<~
~asdfkjn~
~<<~
~fsdaikfjn~
~|~
~ls~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
smasher loop 8= ,flag=i, s.start = 7, s.end = 7
smasher loop 9=<,flag=i, s.start = 9, s.end = 8
smasher loop 11= ,flag=i, s.start = 9, s.end = 9
smasher loop 12=s,flag=s, s.start = 12, s.end = 9
space_smash, smashed_arg = s, start = 12, end = 12
smasher loop 13= ,flag=i, s.start = 12, s.end = 12
smasher loop 14=<,flag=i, s.start = 14, s.end = 13
smasher loop 16= ,flag=i, s.start = 14, s.end = 14
smasher loop 17=d,flag=s, s.start = 17, s.end = 14
smasher loop 18=s,flag=s, s.start = 17, s.end = 14
space_smash, smashed_arg = ds, start = 17, end = 18
~cat~
~<<~
~1~
~<<~
~s~
~<<~
~ds~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=r,flag=s, s.start = 5, s.end = 3
smasher loop 6=e,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = re, start = 5, end = 6
~make~
~re~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
smasher loop 8= ,flag=i, s.start = 7, s.end = 7
smasher loop 9=<,flag=i, s.start = 9, s.end = 8
smasher loop 11= ,flag=i, s.start = 9, s.end = 9
smasher loop 12=2,flag=s, s.start = 12, s.end = 9
space_smash, smashed_arg = 2, start = 12, end = 12
smasher loop 13= ,flag=i, s.start = 12, s.end = 12
smasher loop 14=<,flag=i, s.start = 14, s.end = 13
smasher loop 16= ,flag=i, s.start = 14, s.end = 14
smasher loop 17=3,flag=s, s.start = 17, s.end = 14
space_smash, smashed_arg = 3, start = 17, end = 17
~cat~
~<<~
~1~
~<<~
~2~
~<<~
~3~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
smasher loop 5=c,flag=s, s.start = 5, s.end = 3
smasher loop 6=a,flag=s, s.start = 5, s.end = 3
smasher loop 7=t,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = cat, start = 5, end = 7
smasher loop 8= ,flag=i, s.start = 5, s.end = 7
smasher loop 9=<,flag=i, s.start = 9, s.end = 8
smasher loop 11=r,flag=i, s.start = 9, s.end = 9
smasher loop 12=e,flag=s, s.start = 11, s.end = 9
smasher loop 13=w,flag=s, s.start = 11, s.end = 9
smasher loop 14=d,flag=s, s.start = 11, s.end = 9
space_smash, smashed_arg = rewd, start = 11, end = 14
smasher loop 15= ,flag=i, s.start = 11, s.end = 14
smasher loop 16=<,flag=i, s.start = 16, s.end = 15
smasher loop 18=d,flag=i, s.start = 16, s.end = 16
smasher loop 19=s,flag=s, s.start = 18, s.end = 16
smasher loop 20=f,flag=s, s.start = 18, s.end = 16
smasher loop 21=a,flag=s, s.start = 18, s.end = 16
space_smash, smashed_arg = dsfa, start = 18, end = 21
smasher loop 22= ,flag=i, s.start = 18, s.end = 21
smasher loop 23=<,flag=i, s.start = 23, s.end = 22
smasher loop 25=S,flag=i, s.start = 23, s.end = 23
smasher loop 26=d,flag=s, s.start = 25, s.end = 23
smasher loop 27=a,flag=s, s.start = 25, s.end = 23
smasher loop 28=s,flag=s, s.start = 25, s.end = 23
smasher loop 29=d,flag=s, s.start = 25, s.end = 23
space_smash, smashed_arg = Sdasd, start = 25, end = 29
smasher loop 30= ,flag=i, s.start = 25, s.end = 29
smasher loop 31=<,flag=i, s.start = 31, s.end = 30
smasher loop 33=D,flag=i, s.start = 31, s.end = 31
smasher loop 34=s,flag=s, s.start = 33, s.end = 31
smasher loop 35=a,flag=s, s.start = 33, s.end = 31
smasher loop 36=d,flag=s, s.start = 33, s.end = 31
space_smash, smashed_arg = Dsad, start = 33, end = 36
smasher loop 37= ,flag=i, s.start = 33, s.end = 36
smasher loop 38=|,flag=i, s.start = 38, s.end = 37
smasher loop 39= ,flag=i, s.start = 38, s.end = 38
smasher loop 40=l,flag=s, s.start = 40, s.end = 38
smasher loop 41=s,flag=s, s.start = 40, s.end = 38
space_smash, smashed_arg = ls, start = 40, end = 41
smasher loop 42= ,flag=i, s.start = 40, s.end = 41
smasher loop 43=|,flag=i, s.start = 43, s.end = 42
smasher loop 44= ,flag=i, s.start = 43, s.end = 43
smasher loop 45=c,flag=s, s.start = 45, s.end = 43
smasher loop 46=a,flag=s, s.start = 45, s.end = 43
smasher loop 47=t,flag=s, s.start = 45, s.end = 43
space_smash, smashed_arg = cat, start = 45, end = 47
smasher loop 48=<,flag=i, s.start = 45, s.end = 47
smasher loop 50=f,flag=i, s.start = 48, s.end = 48
smasher loop 51=s,flag=s, s.start = 50, s.end = 48
smasher loop 52=d,flag=s, s.start = 50, s.end = 48
smasher loop 53=a,flag=s, s.start = 50, s.end = 48
smasher loop 54=f,flag=s, s.start = 50, s.end = 48
space_smash, smashed_arg = fsdaf, start = 50, end = 54
smasher loop 55= ,flag=i, s.start = 50, s.end = 54
smasher loop 56=<,flag=i, s.start = 56, s.end = 55
smasher loop 58=d,flag=i, s.start = 56, s.end = 56
smasher loop 59=d,flag=s, s.start = 58, s.end = 56
space_smash, smashed_arg = dd, start = 58, end = 59
smasher loop 60=|,flag=i, s.start = 58, s.end = 59
smasher loop 61= ,flag=i, s.start = 60, s.end = 60
smasher loop 62=l,flag=s, s.start = 62, s.end = 60
smasher loop 63=s,flag=s, s.start = 62, s.end = 60
space_smash, smashed_arg = ls, start = 62, end = 63
~ls~
~|~
~cat~
~<<~
~rewd~
~<<~
~dsfa~
~<<~
~Sdasd~
~<<~
~Dsad~
~|~
~ls~
~|~
~cat~
~<<~
~fsdaf~
~<<~
~dd~
~|~
~ls~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
joining env 
joining env 
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=3,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 3, start = 7, end = 7
~cat~
~<<~
~3~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
smasher loop 5=c,flag=s, s.start = 5, s.end = 3
smasher loop 6=a,flag=s, s.start = 5, s.end = 3
smasher loop 7=t,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = cat, start = 5, end = 7
smasher loop 8= ,flag=i, s.start = 5, s.end = 7
smasher loop 9=<,flag=i, s.start = 9, s.end = 8
smasher loop 11= ,flag=i, s.start = 9, s.end = 9
smasher loop 12=d,flag=s, s.start = 12, s.end = 9
space_smash, smashed_arg = d, start = 12, end = 12
smasher loop 13= ,flag=i, s.start = 12, s.end = 12
smasher loop 14=|,flag=i, s.start = 14, s.end = 13
smasher loop 15= ,flag=i, s.start = 14, s.end = 14
smasher loop 16=l,flag=s, s.start = 16, s.end = 14
smasher loop 17=s,flag=s, s.start = 16, s.end = 14
space_smash, smashed_arg = ls, start = 16, end = 17
~ls~
~|~
~cat~
~<<~
~d~
~|~
~ls~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
smasher loop 8= ,flag=i, s.start = 7, s.end = 7
smasher loop 9=<,flag=i, s.start = 9, s.end = 8
smasher loop 11= ,flag=i, s.start = 9, s.end = 9
smasher loop 12=2,flag=s, s.start = 12, s.end = 9
space_smash, smashed_arg = 2, start = 12, end = 12
~cat~
~<<~
~1~
~<<~
~2~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
~ls~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
~echo~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
smasher loop 8= ,flag=i, s.start = 7, s.end = 7
smasher loop 9=<,flag=i, s.start = 9, s.end = 8
smasher loop 11= ,flag=i, s.start = 9, s.end = 9
smasher loop 12=2,flag=s, s.start = 12, s.end = 9
space_smash, smashed_arg = 2, start = 12, end = 12
~cat~
~<<~
~1~
~<<~
~2~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=s,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = sd, start = 7, end = 8
~cat~
~<<~
~sd~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fd, start = 7, end = 8
~cat~
~<<~
~fd~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
smasher loop 5=c,flag=s, s.start = 5, s.end = 3
smasher loop 6=a,flag=s, s.start = 5, s.end = 3
smasher loop 7=t,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = cat, start = 5, end = 7
smasher loop 8= ,flag=i, s.start = 5, s.end = 7
smasher loop 9=<,flag=i, s.start = 9, s.end = 8
smasher loop 11= ,flag=i, s.start = 9, s.end = 9
smasher loop 12=f,flag=s, s.start = 12, s.end = 9
smasher loop 13=d,flag=s, s.start = 12, s.end = 9
space_smash, smashed_arg = fd, start = 12, end = 13
smasher loop 14=|,flag=i, s.start = 12, s.end = 13
smasher loop 15= ,flag=i, s.start = 14, s.end = 14
smasher loop 16=l,flag=s, s.start = 16, s.end = 14
smasher loop 17=s,flag=s, s.start = 16, s.end = 14
space_smash, smashed_arg = ls, start = 16, end = 17
~ls~
~|~
~cat~
~<<~
~fd~
~|~
~ls~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
smasher loop 8= ,flag=i, s.start = 7, s.end = 7
smasher loop 9=|,flag=i, s.start = 9, s.end = 8
smasher loop 10= ,flag=i, s.start = 9, s.end = 9
smasher loop 11=l,flag=s, s.start = 11, s.end = 9
smasher loop 12=s,flag=s, s.start = 11, s.end = 9
space_smash, smashed_arg = ls, start = 11, end = 12
~cat~
~<<~
~1~
~|~
~ls~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
smasher loop 8= ,flag=i, s.start = 7, s.end = 7
smasher loop 9=|,flag=i, s.start = 9, s.end = 8
smasher loop 10= ,flag=i, s.start = 9, s.end = 9
smasher loop 11=l,flag=s, s.start = 11, s.end = 9
smasher loop 12=s,flag=s, s.start = 11, s.end = 9
space_smash, smashed_arg = ls, start = 11, end = 12
~cat~
~<<~
~1~
~|~
~ls~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
smasher loop 8= ,flag=i, s.start = 7, s.end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
smasher loop 8= ,flag=i, s.start = 7, s.end = 7
smasher loop 9=|,flag=i, s.start = 9, s.end = 8
smasher loop 10= ,flag=i, s.start = 9, s.end = 9
smasher loop 11=l,flag=s, s.start = 11, s.end = 9
smasher loop 12=s,flag=s, s.start = 11, s.end = 9
space_smash, smashed_arg = ls, start = 11, end = 12
~cat~
~<<~
~1~
~|~
~ls~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=a,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
smasher loop 2=d,flag=s, s.start = 0, s.end = 0
smasher loop 3=k,flag=s, s.start = 0, s.end = 0
smasher loop 4=j,flag=s, s.start = 0, s.end = 0
smasher loop 5=l,flag=s, s.start = 0, s.end = 0
smasher loop 6=f,flag=s, s.start = 0, s.end = 0
smasher loop 7=b,flag=s, s.start = 0, s.end = 0
smasher loop 8=s,flag=s, s.start = 0, s.end = 0
smasher loop 9=a,flag=s, s.start = 0, s.end = 0
smasher loop 10=d,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = asdkjlfbsad, start = 0, end = 10
~asdkjlfbsad~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~127~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=u,flag=i, s.start = 0, s.end = 0
smasher loop 1=n,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
smasher loop 4=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = unset, start = 0, end = 4
smasher loop 5= ,flag=i, s.start = 0, s.end = 4
smasher loop 6=a,flag=s, s.start = 6, s.end = 4
space_smash, smashed_arg = a, start = 6, end = 6
~unset~
~a~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=u,flag=i, s.start = 0, s.end = 0
smasher loop 1=n,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
smasher loop 4=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = unset, start = 0, end = 4
smasher loop 5= ,flag=i, s.start = 0, s.end = 4
smasher loop 6=%,flag=s, s.start = 6, s.end = 4
smasher loop 7=#,flag=s, s.start = 6, s.end = 4
space_smash, smashed_arg = %#, start = 6, end = 7
~unset~
~%#~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~1~
joining env 
smasher loop 0=u,flag=i, s.start = 0, s.end = 0
smasher loop 1=n,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
smasher loop 4=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = unset, start = 0, end = 4
smasher loop 5= ,flag=i, s.start = 0, s.end = 4
smasher loop 6=a,flag=s, s.start = 6, s.end = 4
smasher loop 7=s,flag=s, s.start = 6, s.end = 4
smasher loop 8=d,flag=s, s.start = 6, s.end = 4
smasher loop 9=k,flag=s, s.start = 6, s.end = 4
smasher loop 10=j,flag=s, s.start = 6, s.end = 4
smasher loop 11=f,flag=s, s.start = 6, s.end = 4
smasher loop 12=n,flag=s, s.start = 6, s.end = 4
smasher loop 13=s,flag=s, s.start = 6, s.end = 4
space_smash, smashed_arg = asdkjfns, start = 6, end = 13
~unset~
~asdkjfns~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=b,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=h,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = bash, start = 0, end = 3
~bash~
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
~ls~
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=|,flag=i, s.start = 3, s.end = 2
smasher loop 4= ,flag=i, s.start = 3, s.end = 3
smasher loop 5=c,flag=s, s.start = 5, s.end = 3
smasher loop 6=a,flag=s, s.start = 5, s.end = 3
smasher loop 7=t,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = cat, start = 5, end = 7
smasher loop 8= ,flag=i, s.start = 5, s.end = 7
smasher loop 9=<,flag=i, s.start = 9, s.end = 8
smasher loop 11= ,flag=i, s.start = 9, s.end = 9
smasher loop 12=a,flag=s, s.start = 12, s.end = 9
smasher loop 13=s,flag=s, s.start = 12, s.end = 9
smasher loop 14=d,flag=s, s.start = 12, s.end = 9
smasher loop 15=f,flag=s, s.start = 12, s.end = 9
smasher loop 16=l,flag=s, s.start = 12, s.end = 9
smasher loop 17=k,flag=s, s.start = 12, s.end = 9
smasher loop 18=j,flag=s, s.start = 12, s.end = 9
smasher loop 19=s,flag=s, s.start = 12, s.end = 9
smasher loop 20=n,flag=s, s.start = 12, s.end = 9
smasher loop 21=d,flag=s, s.start = 12, s.end = 9
smasher loop 22=f,flag=s, s.start = 12, s.end = 9
space_smash, smashed_arg = asdflkjsndf, start = 12, end = 22
smasher loop 23= ,flag=i, s.start = 12, s.end = 22
smasher loop 24=|,flag=i, s.start = 24, s.end = 23
smasher loop 25= ,flag=i, s.start = 24, s.end = 24
smasher loop 26=l,flag=s, s.start = 26, s.end = 24
smasher loop 27=s,flag=s, s.start = 26, s.end = 24
space_smash, smashed_arg = ls, start = 26, end = 27
~ls~
~|~
~cat~
~<<~
~asdflkjsndf~
~|~
~ls~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
~cat~
~<<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=s,flag=s, s.start = 7, s.end = 4
smasher loop 9=d,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fsd, start = 7, end = 9
~cat~
~<<~
~fsd~
count_outliar_redire i = -1, ? i == -1 ok:error



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
smasher loop 9=d,flag=s, s.start = 7, s.end = 4
smasher loop 10=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fdds, start = 7, end = 10
~cat~
~<<~
~fdds~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
smasher loop 9=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fds, start = 7, end = 9
~cat~
~<<~
~fds~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6=s,flag=i, s.start = 4, s.end = 4
smasher loop 7=a,flag=s, s.start = 6, s.end = 4
smasher loop 8=d,flag=s, s.start = 6, s.end = 4
smasher loop 9=k,flag=s, s.start = 6, s.end = 4
smasher loop 10=j,flag=s, s.start = 6, s.end = 4
smasher loop 11=f,flag=s, s.start = 6, s.end = 4
smasher loop 12=l,flag=s, s.start = 6, s.end = 4
space_smash, smashed_arg = sadkjfl, start = 6, end = 12
~cat~
~<<~
~sadkjfl~
count_outliar_redire i = -1, ? i == -1 ok:error



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6=f,flag=i, s.start = 4, s.end = 4
smasher loop 7=s,flag=s, s.start = 6, s.end = 4
smasher loop 8=d,flag=s, s.start = 6, s.end = 4
smasher loop 9=f,flag=s, s.start = 6, s.end = 4
space_smash, smashed_arg = fsdf, start = 6, end = 9
~cat~
~<<~
~fsdf~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
smasher loop 7= ,flag=i, s.start = 5, s.end = 6
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=a,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
smasher loop 2=d,flag=s, s.start = 0, s.end = 0
smasher loop 3=;,flag=s, s.start = 0, s.end = 0
smasher loop 4=k,flag=s, s.start = 0, s.end = 0
smasher loop 5=j,flag=s, s.start = 0, s.end = 0
smasher loop 6=l,flag=s, s.start = 0, s.end = 0
smasher loop 7=n,flag=s, s.start = 0, s.end = 0
smasher loop 8=s,flag=s, s.start = 0, s.end = 0
smasher loop 9=d,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = asd;kjlnsd, start = 0, end = 9
~asd;kjlnsd~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~127~
joining env 
smasher loop 0=u,flag=i, s.start = 0, s.end = 0
smasher loop 1=n,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
smasher loop 4=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = unset, start = 0, end = 4
smasher loop 5= ,flag=i, s.start = 0, s.end = 4
~unset~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=2,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = 2, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 5
smasher loop 7=3,flag=s, s.start = 7, s.end = 5
space_smash, smashed_arg = 3, start = 7, end = 7
~exit~
~2~
~3~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~1~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=u,flag=i, s.start = 0, s.end = 0
smasher loop 1=n,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
smasher loop 4=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = unset, start = 0, end = 4
smasher loop 5= ,flag=i, s.start = 0, s.end = 4
smasher loop 6=$,flag=s, s.start = 6, s.end = 4
smasher loop 7=#,flag=s, s.start = 6, s.end = 4
smasher loop 8=!,flag=s, s.start = 6, s.end = 4
space_smash, smashed_arg = $#!, start = 6, end = 8
~unset~
~$#!~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~1~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=s,flag=s, s.start = 7, s.end = 4
smasher loop 8=a,flag=s, s.start = 7, s.end = 4
smasher loop 9=d,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = sad, start = 7, end = 9
~cat~
~<<~
~sad~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=1,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 1, start = 7, end = 7
smasher loop 8= ,flag=i, s.start = 7, s.end = 7
smasher loop 9=<,flag=i, s.start = 9, s.end = 8
smasher loop 11= ,flag=i, s.start = 9, s.end = 9
smasher loop 12=2,flag=s, s.start = 12, s.end = 9
space_smash, smashed_arg = 2, start = 12, end = 12
smasher loop 13= ,flag=i, s.start = 12, s.end = 12
smasher loop 14=<,flag=i, s.start = 14, s.end = 13
smasher loop 16= ,flag=i, s.start = 14, s.end = 14
smasher loop 17=3,flag=s, s.start = 17, s.end = 14
space_smash, smashed_arg = 3, start = 17, end = 17
~cat~
~<<~
~1~
~<<~
~2~
~<<~
~3~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = s, start = 7, end = 7
~cat~
~<<~
~s~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = s, start = 7, end = 7
~cat~
~<<~
~s~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=s,flag=s, s.start = 7, s.end = 4
smasher loop 9=d,flag=s, s.start = 7, s.end = 4
smasher loop 10=f,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fsdf, start = 7, end = 10
~cat~
~<<~
~fsdf~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~49~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=s,flag=s, s.start = 7, s.end = 4
smasher loop 9=d,flag=s, s.start = 7, s.end = 4
smasher loop 10=f,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fsdf, start = 7, end = 10
~cat~
~<<~
~fsdf~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~49~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fd, start = 7, end = 8
~cat~
~<<~
~fd~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~49~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
smasher loop 9=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fds, start = 7, end = 9
~cat~
~<<~
~fds~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~3~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
smasher loop 9=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fds, start = 7, end = 9
~cat~
~<<~
~fds~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~3~
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
smasher loop 9=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fds, start = 7, end = 9
~cat~
~<<~
~fds~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~3~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
smasher loop 9=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fds, start = 7, end = 9
~cat~
~<<~
~fds~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
smasher loop 9=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fds, start = 7, end = 9
~cat~
~<<~
~fds~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
smasher loop 9=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fds, start = 7, end = 9
~cat~
~<<~
~fds~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~49~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
smasher loop 9=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fds, start = 7, end = 9
~cat~
~<<~
~fds~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~49~
joining env 
smasher loop 0=u,flag=i, s.start = 0, s.end = 0
smasher loop 1=n,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
smasher loop 4=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = unset, start = 0, end = 4
smasher loop 5= ,flag=i, s.start = 0, s.end = 4
smasher loop 6=^,flag=s, s.start = 6, s.end = 4
smasher loop 7=$,flag=s, s.start = 6, s.end = 4
smasher loop 8=%,flag=s, s.start = 6, s.end = 4
space_smash, smashed_arg = ^$%, start = 6, end = 8
~unset~
~^$%~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~1~
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6=v,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 6, s.end = 4
smasher loop 8=s,flag=s, s.start = 6, s.end = 4
smasher loop 9=d,flag=s, s.start = 6, s.end = 4
space_smash, smashed_arg = vfsd, start = 6, end = 9
~cat~
~<<~
~vfsd~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~4~
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=s,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
smasher loop 9=f,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = sdf, start = 7, end = 9
~cat~
~<<~
~sdf~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~4~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6=s,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 6, s.end = 4
space_smash, smashed_arg = sf, start = 6, end = 7
smasher loop 8= ,flag=i, s.start = 6, s.end = 7
smasher loop 9=d,flag=s, s.start = 9, s.end = 7
smasher loop 10=f,flag=s, s.start = 9, s.end = 7
smasher loop 11=s,flag=s, s.start = 9, s.end = 7
smasher loop 12=d,flag=s, s.start = 9, s.end = 7
smasher loop 13=a,flag=s, s.start = 9, s.end = 7
space_smash, smashed_arg = dfsda, start = 9, end = 13
~cat~
~<<~
~sf~
~dfsda~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=/,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $/, start = 5, end = 6
~echo~
~$/~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6=s,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 6, s.end = 4
space_smash, smashed_arg = sf, start = 6, end = 7
smasher loop 8= ,flag=i, s.start = 6, s.end = 7
smasher loop 9=d,flag=s, s.start = 9, s.end = 7
smasher loop 10=f,flag=s, s.start = 9, s.end = 7
smasher loop 11=s,flag=s, s.start = 9, s.end = 7
smasher loop 12=d,flag=s, s.start = 9, s.end = 7
smasher loop 13=a,flag=s, s.start = 9, s.end = 7
space_smash, smashed_arg = dfsda, start = 9, end = 13
~cat~
~<<~
~sf~
~dfsda~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~29~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6=s,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 6, s.end = 4
space_smash, smashed_arg = sf, start = 6, end = 7
smasher loop 8= ,flag=i, s.start = 6, s.end = 7
smasher loop 9=d,flag=s, s.start = 9, s.end = 7
smasher loop 10=f,flag=s, s.start = 9, s.end = 7
smasher loop 11=s,flag=s, s.start = 9, s.end = 7
smasher loop 12=d,flag=s, s.start = 9, s.end = 7
smasher loop 13=a,flag=s, s.start = 9, s.end = 7
space_smash, smashed_arg = dfsda, start = 9, end = 13
~cat~
~<<~
~sf~
~dfsda~
count_outliar_redire i = -1, ? i == -1 ok:error



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=s,flag=s, s.start = 7, s.end = 4
smasher loop 8=a,flag=s, s.start = 7, s.end = 4
smasher loop 9=d,flag=s, s.start = 7, s.end = 4
smasher loop 10=f,flag=s, s.start = 7, s.end = 4
smasher loop 11=s,flag=s, s.start = 7, s.end = 4
smasher loop 12=d,flag=s, s.start = 7, s.end = 4
smasher loop 13=a,flag=s, s.start = 7, s.end = 4
smasher loop 14=f,flag=s, s.start = 7, s.end = 4
smasher loop 15=n,flag=s, s.start = 7, s.end = 4
smasher loop 16=j,flag=s, s.start = 7, s.end = 4
smasher loop 17=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = sadfsdafnjs, start = 7, end = 17
~cat~
~<<~
~sadfsdafnjs~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 1=/,flag=s, s.start = 0, s.end = 0
smasher loop 2=m,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
smasher loop 4=m,flag=s, s.start = 0, s.end = 0
smasher loop 5=_,flag=s, s.start = 0, s.end = 0
smasher loop 6=c,flag=s, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 0, s.end = 0
smasher loop 8=e,flag=s, s.start = 0, s.end = 0
smasher loop 9=c,flag=s, s.start = 0, s.end = 0
smasher loop 10=k,flag=s, s.start = 0, s.end = 0
smasher loop 11=.,flag=s, s.start = 0, s.end = 0
smasher loop 12=s,flag=s, s.start = 0, s.end = 0
smasher loop 13=h,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ./mem_check.sh, start = 0, end = 13
smasher loop 14= ,flag=i, s.start = 0, s.end = 13
~./mem_check.sh~
joining env 
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=l,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
smasher loop 4=a,flag=s, s.start = 0, s.end = 0
smasher loop 5=r,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cclear, start = 0, end = 5
~cclear~
joining env 
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
smasher loop 2=d,flag=s, s.start = 0, s.end = 0
smasher loop 3=m,flag=s, s.start = 0, s.end = 0
smasher loop 4=l,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = csdml, start = 0, end = 4
~csdml~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=l,flag=s, s.start = 0, s.end = 0
smasher loop 2=e,flag=s, s.start = 0, s.end = 0
smasher loop 3=a,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = clear, start = 0, end = 4
~clear~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=d,flag=s, s.start = 7, s.end = 4
smasher loop 8=f,flag=s, s.start = 7, s.end = 4
smasher loop 9=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = dfs, start = 7, end = 9
~cat~
~<<~
~dfs~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=a,flag=i, s.start = 0, s.end = 0
smasher loop 1=m,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = amke, start = 0, end = 3
~amke~
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
~ls~
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=s,flag=s, s.start = 7, s.end = 4
smasher loop 9=d,flag=s, s.start = 7, s.end = 4
smasher loop 10=f,flag=s, s.start = 7, s.end = 4
smasher loop 11=s,flag=s, s.start = 7, s.end = 4
smasher loop 12=d,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fsdfsd, start = 7, end = 12
~cat~
~<<~
~fsdfsd~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=l,flag=s, s.start = 0, s.end = 0
smasher loop 2=e,flag=s, s.start = 0, s.end = 0
smasher loop 3=a,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = clear, start = 0, end = 4
~clear~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=d,flag=s, s.start = 7, s.end = 4
smasher loop 8=f,flag=s, s.start = 7, s.end = 4
smasher loop 9=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = dfs, start = 7, end = 9
~cat~
~<<~
~dfs~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=d,flag=s, s.start = 7, s.end = 4
smasher loop 8=c,flag=s, s.start = 7, s.end = 4
smasher loop 9=f,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = dcf, start = 7, end = 9
~cat~
~<<~
~dcf~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=2,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = 2, start = 7, end = 7
~cat~
~<<~
~2~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
~ls~
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
~ls~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
~ls~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=l,flag=s, s.start = 0, s.end = 0
smasher loop 2=e,flag=s, s.start = 0, s.end = 0
smasher loop 3=a,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = clear, start = 0, end = 4
~clear~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 


last end cmd[0]= e


fetching end cmd[3 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (1)
fix said 1 (not end)
fetching end cmd[3 + 2] = <o>, flag = "
not end cmd[3 + 2] = <o>, flag = "
fetching end cmd[3 + 3] = < >, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0)
fix said 0 (end)

reached end cmd[3 + 3] = < >, flag = " start = 0

end figur out end of quote <ech""o hi>, f=", st=0, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 7=h,flag=i, s.start = 0, s.end = 6
smasher loop 8=i,flag=s, s.start = 7, s.end = 6
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=",flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=", s.start = 0, s.end = 0
" " arg = <ec""ho hi>,cmd[3] = ",  start = 0 i = 3, flag = "
before cleaning arg = <ec""ho hi>, start = 0 i = 3
Mul single and double quote
 cmd = <ec""ho hi>, flag = ",strt=0,end=0,i=3
figur out end of quote <ec""ho hi>, f=", st=0, en=0, i= 3
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=3 


last end cmd[0]= e


fetching end cmd[2 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (1)
fix said 1 (not end)
fetching end cmd[2 + 2] = <h>, flag = "
not end cmd[2 + 2] = <h>, flag = "
fetching end cmd[2 + 3] = <o>, flag = "
not end cmd[2 + 3] = <o>, flag = "
fetching end cmd[2 + 4] = < >, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0)
fix said 0 (end)

reached end cmd[2 + 4] = < >, flag = " start = 0

end figur out end of quote <ec""ho hi>, f=", st=0, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 7=h,flag=i, s.start = 0, s.end = 6
smasher loop 8=i,flag=s, s.start = 7, s.end = 6
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=d,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cd, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=t,flag=s, s.start = 3, s.end = 1
smasher loop 4=r,flag=s, s.start = 3, s.end = 1
smasher loop 5=a,flag=s, s.start = 3, s.end = 1
smasher loop 6=s,flag=s, s.start = 3, s.end = 1
smasher loop 7=h,flag=s, s.start = 3, s.end = 1
smasher loop 8=/,flag=s, s.start = 3, s.end = 1
space_smash, smashed_arg = trash/, start = 3, end = 8
~cd~
~trash/~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3= ,flag=i, s.start = 2, s.end = 2
smasher loop 4=g,flag=s, s.start = 4, s.end = 2
smasher loop 5=r,flag=s, s.start = 4, s.end = 2
smasher loop 6=e,flag=s, s.start = 4, s.end = 2
smasher loop 7=p,flag=s, s.start = 4, s.end = 2
space_smash, smashed_arg = grep, start = 4, end = 7
smasher loop 8= ,flag=i, s.start = 4, s.end = 7
smasher loop 9=h,flag=s, s.start = 9, s.end = 7
space_smash, smashed_arg = h, start = 9, end = 9
smasher loop 10=|,flag=i, s.start = 9, s.end = 9
smasher loop 11= ,flag=i, s.start = 10, s.end = 10
smasher loop 12=l,flag=s, s.start = 12, s.end = 10
smasher loop 13=",flag=s, s.start = 12, s.end = 10
smasher loop 14=",flag=", s.start = 12, s.end = 10
" " arg = <ls| grep h| l""s  | l""s>,cmd[14] = ",  start = 12 i = 14, flag = "
before cleaning arg = <ls| grep h| l""s  | l""s>, start = 12 i = 14
Mul single and double quote
 cmd = <ls| grep h| l""s  | l""s>, flag = ",strt=12,end=10,i=14
figur out end of quote <ls| grep h| l""s  | l""s>, f=", st=12, en=10, i= 14
cas 3 no quote start,st = 12 en= 10


Case 3
s=12,e=10,i=14 


last end cmd[10]= |


fetching end cmd[13 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (1)
fix said 0 (end)

reached end cmd[13 + 1] = <">, flag = " start = 12

end figur out end of quote <ls| grep h| l""s  | l""s>, f=", st=12, en=14, i= 14
entering the source of all devil loop
Exiting Multiple merged_str = <l>, st=12, en=14
filling node with ~l~
smasher loop 15=s,flag=i, s.start = 12, s.end = 14
space_smash, smashed_arg = s, start = 15, end = 15
smasher loop 16= ,flag=i, s.start = 15, s.end = 15
smasher loop 17= ,flag=i, s.start = 18, s.end = 16
smasher loop 18=|,flag=i, s.start = 18, s.end = 17
smasher loop 19= ,flag=i, s.start = 18, s.end = 18
smasher loop 20=l,flag=s, s.start = 20, s.end = 18
smasher loop 21=",flag=s, s.start = 20, s.end = 18
smasher loop 22=",flag=", s.start = 20, s.end = 18
" " arg = <ls| grep h| l""s  | l""s>,cmd[22] = ",  start = 20 i = 22, flag = "
before cleaning arg = <ls| grep h| l""s  | l""s>, start = 20 i = 22
Mul single and double quote
 cmd = <ls| grep h| l""s  | l""s>, flag = ",strt=20,end=18,i=22
figur out end of quote <ls| grep h| l""s  | l""s>, f=", st=20, en=18, i= 22
cas 3 no quote start,st = 20 en= 18


Case 3
s=20,e=18,i=22 


last end cmd[18]= |


fetching end cmd[21 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (1)
fix said 1 (not end)
fetching end cmd[21 + 2] = <s>, flag = "
not end cmd[21 + 2] = <s>, flag = "
fetching end cmd[21 + 3] = < >, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0), reached end of str
fix said 0 (end)

reached end cmd[21 + 3] = < >, flag = " start = 20

end figur out end of quote <ls| grep h| l""s  | l""s>, f=", st=20, en=24, i= 24
filling node with ~ls~
~ls~
~|~
~grep~
~h~
~|~
~l~
~s~
~|~
~ls~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
joining env 
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=|,flag=i, s.start = 0, s.end = 1
smasher loop 3= ,flag=i, s.start = 2, s.end = 2
smasher loop 4=g,flag=s, s.start = 4, s.end = 2
smasher loop 5=r,flag=s, s.start = 4, s.end = 2
smasher loop 6=e,flag=s, s.start = 4, s.end = 2
smasher loop 7=p,flag=s, s.start = 4, s.end = 2
space_smash, smashed_arg = grep, start = 4, end = 7
smasher loop 8= ,flag=i, s.start = 4, s.end = 7
smasher loop 9=h,flag=s, s.start = 9, s.end = 7
space_smash, smashed_arg = h, start = 9, end = 9
smasher loop 10=|,flag=i, s.start = 9, s.end = 9
smasher loop 11= ,flag=i, s.start = 10, s.end = 10
smasher loop 12=l,flag=s, s.start = 12, s.end = 10
smasher loop 13=",flag=s, s.start = 12, s.end = 10
smasher loop 14=",flag=", s.start = 12, s.end = 10
" " arg = <ls| grep h| l""s  | l""s>,cmd[14] = ",  start = 12 i = 14, flag = "
before cleaning arg = <ls| grep h| l""s  | l""s>, start = 12 i = 14
Mul single and double quote
 cmd = <ls| grep h| l""s  | l""s>, flag = ",strt=12,end=10,i=14
figur out end of quote <ls| grep h| l""s  | l""s>, f=", st=12, en=10, i= 14
cas 3 no quote start,st = 12 en= 10


Case 3
s=12,e=10,i=14 


last end cmd[10]= |


fetching end cmd[13 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (1)
fix said 0 (end)

reached end cmd[13 + 1] = <">, flag = " start = 12

end figur out end of quote <ls| grep h| l""s  | l""s>, f=", st=12, en=14, i= 14
entering the source of all devil loop
Exiting Multiple merged_str = <l>, st=12, en=14
filling node with ~l~
smasher loop 15=s,flag=i, s.start = 12, s.end = 14
space_smash, smashed_arg = s, start = 15, end = 15
smasher loop 16= ,flag=i, s.start = 15, s.end = 15
smasher loop 17= ,flag=i, s.start = 18, s.end = 16
smasher loop 18=|,flag=i, s.start = 18, s.end = 17
smasher loop 19= ,flag=i, s.start = 18, s.end = 18
smasher loop 20=l,flag=s, s.start = 20, s.end = 18
smasher loop 21=",flag=s, s.start = 20, s.end = 18
smasher loop 22=",flag=", s.start = 20, s.end = 18
" " arg = <ls| grep h| l""s  | l""s>,cmd[22] = ",  start = 20 i = 22, flag = "
before cleaning arg = <ls| grep h| l""s  | l""s>, start = 20 i = 22
Mul single and double quote
 cmd = <ls| grep h| l""s  | l""s>, flag = ",strt=20,end=18,i=22
figur out end of quote <ls| grep h| l""s  | l""s>, f=", st=20, en=18, i= 22
cas 3 no quote start,st = 20 en= 18


Case 3
s=20,e=18,i=22 


last end cmd[18]= |


fetching end cmd[21 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (1)
fix said 1 (not end)
fetching end cmd[21 + 2] = <s>, flag = "
not end cmd[21 + 2] = <s>, flag = "
fetching end cmd[21 + 3] = < >, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0), reached end of str
fix said 0 (end)

reached end cmd[21 + 3] = < >, flag = " start = 20

end figur out end of quote <ls| grep h| l""s  | l""s>, f=", st=20, en=24, i= 24
filling node with ~ls~
~ls~
~|~
~grep~
~h~
~|~
~l~
~s~
~|~
~ls~
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
joining env 
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=l,flag=s, s.start = 0, s.end = 0
smasher loop 2=e,flag=s, s.start = 0, s.end = 0
smasher loop 3=a,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = clear, start = 0, end = 4
~clear~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
smasher loop 3=i,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exti, start = 0, end = 3
~exti~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
smasher loop 2=",flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=", s.start = 0, s.end = 0
" " arg = <ls"" | grep h>,cmd[3] = ",  start = 0 i = 3, flag = "
before cleaning arg = <ls"" | grep h>, start = 0 i = 3
Mul single and double quote
 cmd = <ls"" | grep h>, flag = ",strt=0,end=0,i=3
figur out end of quote <ls"" | grep h>, f=", st=0, en=0, i= 3
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=3 


last end cmd[0]= l


fetching end cmd[2 + 1] = <">, flag = "
fixing start qutoe 3
inside middle_csase
middle case returned (0)
fix said 0 (end)

reached end cmd[2 + 1] = <">, flag = " start = 0

end figur out end of quote <ls"" | grep h>, f=", st=0, en=3, i= 3
entering the source of all devil loop
Exiting Multiple merged_str = <ls>, st=0, en=3
filling node with ~ls~
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=|,flag=i, s.start = 5, s.end = 4
smasher loop 6= ,flag=i, s.start = 5, s.end = 5
smasher loop 7=g,flag=s, s.start = 7, s.end = 5
smasher loop 8=r,flag=s, s.start = 7, s.end = 5
smasher loop 9=e,flag=s, s.start = 7, s.end = 5
smasher loop 10=p,flag=s, s.start = 7, s.end = 5
space_smash, smashed_arg = grep, start = 7, end = 10
smasher loop 11= ,flag=i, s.start = 7, s.end = 10
smasher loop 12=h,flag=s, s.start = 12, s.end = 10
space_smash, smashed_arg = h, start = 12, end = 12
~ls~
~|~
~grep~
~h~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=d,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cd, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=t,flag=s, s.start = 3, s.end = 1
smasher loop 4=r,flag=s, s.start = 3, s.end = 1
smasher loop 5=a,flag=s, s.start = 3, s.end = 1
smasher loop 6=s,flag=s, s.start = 3, s.end = 1
smasher loop 7=h,flag=s, s.start = 3, s.end = 1
smasher loop 8=/,flag=s, s.start = 3, s.end = 1
space_smash, smashed_arg = trash/, start = 3, end = 8
~cd~
~trash/~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
smasher loop 7= ,flag=i, s.start = 5, s.end = 6
smasher loop 8=>,flag=i, s.start = 8, s.end = 7
smasher loop 9= ,flag=i, s.start = 8, s.end = 8
smasher loop 10=1,flag=s, s.start = 10, s.end = 8
space_smash, smashed_arg = 1, start = 10, end = 10
~echo~
~hi~
~>~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error

Outliar redirects cmds 0
count_outliar_redire i = -1, ? i == -1 ok:error

Outliar redirects cmds 0
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 5= ,flag=i, s.start = 4, s.end = 4
smasher loop 6=1,flag=s, s.start = 6, s.end = 4
space_smash, smashed_arg = 1, start = 6, end = 6
~cat~
~<~
~1~
count_outliar_redire i = -1, ? i == -1 ok:error

Outliar redirects cmds 0
count_outliar_redire i = 0, ? i == -1 ok:error

Outliar redirects cmds 1
joining env 
smasher loop 0=<,flag=i, s.start = 0, s.end = 0
smasher loop 1= ,flag=i, s.start = 0, s.end = 0
smasher loop 2=1,flag=s, s.start = 2, s.end = 0
space_smash, smashed_arg = 1, start = 2, end = 2
smasher loop 3= ,flag=i, s.start = 2, s.end = 2
smasher loop 4=c,flag=s, s.start = 4, s.end = 2
smasher loop 5=a,flag=s, s.start = 4, s.end = 2
smasher loop 6=t,flag=s, s.start = 4, s.end = 2
space_smash, smashed_arg = cat, start = 4, end = 6
~<~
~1~
~cat~
count_outliar_redire i = 0, ? i == -1 ok:error

Outliar redirects cmds 2
if 2
joining env 
smasher loop 0=<,flag=i, s.start = 0, s.end = 0
smasher loop 1= ,flag=i, s.start = 0, s.end = 0
smasher loop 2=4,flag=s, s.start = 2, s.end = 0
space_smash, smashed_arg = 4, start = 2, end = 2
smasher loop 3= ,flag=i, s.start = 2, s.end = 2
smasher loop 4=c,flag=s, s.start = 4, s.end = 2
smasher loop 5=a,flag=s, s.start = 4, s.end = 2
smasher loop 6=t,flag=s, s.start = 4, s.end = 2
space_smash, smashed_arg = cat, start = 4, end = 6
~<~
~4~
~cat~
count_outliar_redire i = 0, ? i == -1 ok:error

Outliar redirects cmds 2
if 2
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~1~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=<,flag=i, s.start = 0, s.end = 0
smasher loop 1= ,flag=i, s.start = 0, s.end = 0
smasher loop 2=1,flag=s, s.start = 2, s.end = 0
space_smash, smashed_arg = 1, start = 2, end = 2
smasher loop 3= ,flag=i, s.start = 2, s.end = 2
smasher loop 4=c,flag=s, s.start = 4, s.end = 2
smasher loop 5=a,flag=s, s.start = 4, s.end = 2
smasher loop 6=t,flag=s, s.start = 4, s.end = 2
space_smash, smashed_arg = cat, start = 4, end = 6
smasher loop 7= ,flag=i, s.start = 4, s.end = 6
smasher loop 8=2,flag=s, s.start = 8, s.end = 6
space_smash, smashed_arg = 2, start = 8, end = 8
~<~
~1~
~cat~
~2~
count_outliar_redire i = 0, ? i == -1 ok:error

Outliar redirects cmds 3
if 2
we are gonna miss with this command 
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
~ls~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=d,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cd, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=t,flag=s, s.start = 3, s.end = 1
smasher loop 4=r,flag=s, s.start = 3, s.end = 1
smasher loop 5=a,flag=s, s.start = 3, s.end = 1
smasher loop 6=s,flag=s, s.start = 3, s.end = 1
smasher loop 7=h,flag=s, s.start = 3, s.end = 1
smasher loop 8=/,flag=s, s.start = 3, s.end = 1
space_smash, smashed_arg = trash/, start = 3, end = 8
~cd~
~trash/~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=d,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cd, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=t,flag=s, s.start = 3, s.end = 1
smasher loop 4=r,flag=s, s.start = 3, s.end = 1
smasher loop 5=a,flag=s, s.start = 3, s.end = 1
smasher loop 6=s,flag=s, s.start = 3, s.end = 1
smasher loop 7=h,flag=s, s.start = 3, s.end = 1
smasher loop 8=/,flag=s, s.start = 3, s.end = 1
space_smash, smashed_arg = trash/, start = 3, end = 8
~cd~
~trash/~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=d,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cd, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=t,flag=s, s.start = 3, s.end = 1
smasher loop 4=r,flag=s, s.start = 3, s.end = 1
smasher loop 5=a,flag=s, s.start = 3, s.end = 1
smasher loop 6=s,flag=s, s.start = 3, s.end = 1
smasher loop 7=h,flag=s, s.start = 3, s.end = 1
smasher loop 8=/,flag=s, s.start = 3, s.end = 1
space_smash, smashed_arg = trash/, start = 3, end = 8
~cd~
~trash/~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=d,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cd, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=t,flag=s, s.start = 3, s.end = 1
smasher loop 4=r,flag=s, s.start = 3, s.end = 1
smasher loop 5=a,flag=s, s.start = 3, s.end = 1
smasher loop 6=s,flag=s, s.start = 3, s.end = 1
smasher loop 7=h,flag=s, s.start = 3, s.end = 1
smasher loop 8=/,flag=s, s.start = 3, s.end = 1
space_smash, smashed_arg = trash/, start = 3, end = 8
~cd~
~trash/~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
~ls~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=d,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cd, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=t,flag=s, s.start = 3, s.end = 1
smasher loop 4=r,flag=s, s.start = 3, s.end = 1
smasher loop 5=a,flag=s, s.start = 3, s.end = 1
smasher loop 6=s,flag=s, s.start = 3, s.end = 1
smasher loop 7=h,flag=s, s.start = 3, s.end = 1
smasher loop 8=/,flag=s, s.start = 3, s.end = 1
space_smash, smashed_arg = trash/, start = 3, end = 8
~cd~
~trash/~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=b,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=h,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = bash, start = 0, end = 3
~bash~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
~ls~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=d,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cd, start = 0, end = 1
smasher loop 2= ,flag=i, s.start = 0, s.end = 1
smasher loop 3=t,flag=s, s.start = 3, s.end = 1
smasher loop 4=r,flag=s, s.start = 3, s.end = 1
smasher loop 5=a,flag=s, s.start = 3, s.end = 1
smasher loop 6=s,flag=s, s.start = 3, s.end = 1
smasher loop 7=h,flag=s, s.start = 3, s.end = 1
smasher loop 8=/,flag=s, s.start = 3, s.end = 1
space_smash, smashed_arg = trash/, start = 3, end = 8
~cd~
~trash/~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~






smasher loop 0=e,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = e, start = 0, end = 0
~e~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~127~
joining env 
smasher loop 0=b,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=h,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = bash, start = 0, end = 3
~bash~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=d,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=j,flag=s, s.start = 0, s.end = 0
smasher loop 4=k,flag=s, s.start = 0, s.end = 0
smasher loop 5=n,flag=s, s.start = 0, s.end = 0
smasher loop 6=c,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ldsjknc, start = 0, end = 6
~ldsjknc~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~127~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=s,flag=i, s.start = 0, s.end = 0
smasher loop 1=d,flag=s, s.start = 0, s.end = 0
smasher loop 2=a,flag=s, s.start = 0, s.end = 0
smasher loop 3=f,flag=s, s.start = 0, s.end = 0
smasher loop 4=s,flag=s, s.start = 0, s.end = 0
smasher loop 5=d,flag=s, s.start = 0, s.end = 0
smasher loop 6=f,flag=s, s.start = 0, s.end = 0
smasher loop 7=s,flag=s, s.start = 0, s.end = 0
smasher loop 8=d,flag=s, s.start = 0, s.end = 0
smasher loop 9=a,flag=s, s.start = 0, s.end = 0
smasher loop 10=f,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = sdafsdfsdaf, start = 0, end = 10
~sdafsdfsdaf~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~127~
joining env 
smasher loop 0=g,flag=i, s.start = 0, s.end = 0
smasher loop 1=r,flag=s, s.start = 0, s.end = 0
smasher loop 2=e,flag=s, s.start = 0, s.end = 0
smasher loop 3=p,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = grep, start = 0, end = 3
~grep~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
~cat~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
~cat~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
~cat~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~1~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=s,flag=i, s.start = 0, s.end = 0
smasher loop 1=d,flag=s, s.start = 0, s.end = 0
smasher loop 2=f,flag=s, s.start = 0, s.end = 0
smasher loop 3=a,flag=s, s.start = 0, s.end = 0
smasher loop 4=d,flag=s, s.start = 0, s.end = 0
smasher loop 5=f,flag=s, s.start = 0, s.end = 0
smasher loop 6=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = sdfadfs, start = 0, end = 6
~sdfadfs~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~127~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=s,flag=s, s.start = 7, s.end = 4
smasher loop 8=a,flag=s, s.start = 7, s.end = 4
smasher loop 9=d,flag=s, s.start = 7, s.end = 4
smasher loop 10=f,flag=s, s.start = 7, s.end = 4
smasher loop 11=s,flag=s, s.start = 7, s.end = 4
smasher loop 12=d,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = sadfsd, start = 7, end = 12
~cat~
~<<~
~sadfsd~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=s,flag=s, s.start = 7, s.end = 4
smasher loop 8=a,flag=s, s.start = 7, s.end = 4
smasher loop 9=d,flag=s, s.start = 7, s.end = 4
smasher loop 10=f,flag=s, s.start = 7, s.end = 4
smasher loop 11=s,flag=s, s.start = 7, s.end = 4
smasher loop 12=d,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = sadfsd, start = 7, end = 12
~cat~
~<<~
~sadfsd~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=d,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = d, start = 7, end = 7
~cat~
~<<~
~d~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=e,flag=s, s.start = 7, s.end = 4
smasher loop 8=x,flag=s, s.start = 7, s.end = 4
smasher loop 9=i,flag=s, s.start = 7, s.end = 4
smasher loop 10=t,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = exit, start = 7, end = 10
~cat~
~<<~
~exit~
count_outliar_redire i = -1, ? i == -1 ok:error
joining env 



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~1~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
smasher loop 9=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fds, start = 7, end = 9
~cat~
~<<~
~fds~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
smasher loop 9=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fds, start = 7, end = 9
~cat~
~<<~
~fds~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=s,flag=s, s.start = 7, s.end = 4
smasher loop 8=f,flag=s, s.start = 7, s.end = 4
smasher loop 9=d,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = sfd, start = 7, end = 9
~cat~
~<<~
~sfd~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
~cat~
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
~cat~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=h,flag=s, s.start = 5, s.end = 3
smasher loop 6=i,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
~cat~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
~cat~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~1~
joining env 
smasher loop 0=b,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=h,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = bash, start = 0, end = 3
~bash~
joining env 
smasher loop 0=b,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=s,flag=s, s.start = 0, s.end = 0
smasher loop 3=h,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = bash, start = 0, end = 3
~bash~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
~cat~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~1~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=s,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
smasher loop 9=f,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = sdf, start = 7, end = 9
~cat~
~<<~
~sdf~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
smasher loop 4=\,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit\, start = 0, end = 4
~exit\~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~1~
joining env 
smasher loop 0=a,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
smasher loop 2=d,flag=s, s.start = 0, s.end = 0
smasher loop 3=f,flag=s, s.start = 0, s.end = 0
smasher loop 4=l,flag=s, s.start = 0, s.end = 0
smasher loop 5=n,flag=s, s.start = 0, s.end = 0
smasher loop 6=s,flag=s, s.start = 0, s.end = 0
smasher loop 7=d,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = asdflnsd, start = 0, end = 7
~asdflnsd~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~127~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
~cat~
~<<~
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=s,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
smasher loop 9=f,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = sdf, start = 7, end = 9
~cat~
~<<~
~sdf~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=d,flag=s, s.start = 7, s.end = 4
smasher loop 8=s,flag=s, s.start = 7, s.end = 4
smasher loop 9=f,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = dsf, start = 7, end = 9
~cat~
~<<~
~dsf~
count_outliar_redire i = -1, ? i == -1 ok:error



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=c,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = cd, start = 7, end = 8
~cat~
~<<~
~cd~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fd, start = 7, end = 8
~cat~
~<<~
~fd~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
smasher loop 9=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fds, start = 7, end = 9
~cat~
~<<~
~fds~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = c, start = 0, end = 0
~c~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
smasher loop 9=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fds, start = 7, end = 9
~cat~
~<<~
~fds~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
smasher loop 9=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fds, start = 7, end = 9
~cat~
~<<~
~fds~
count_outliar_redire i = -1, ? i == -1 ok:error



smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=r,flag=s, s.start = 5, s.end = 3
smasher loop 6=e,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = re, start = 5, end = 6
~make~
~re~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=f,flag=s, s.start = 7, s.end = 4
smasher loop 8=d,flag=s, s.start = 7, s.end = 4
smasher loop 9=s,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = fds, start = 7, end = 9
~cat~
~<<~
~fds~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~1~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~1~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
~cat~
~<<~
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4=<,flag=i, s.start = 4, s.end = 3
smasher loop 6= ,flag=i, s.start = 4, s.end = 4
smasher loop 7=d,flag=s, s.start = 7, s.end = 4
smasher loop 8=s,flag=s, s.start = 7, s.end = 4
smasher loop 9=f,flag=s, s.start = 7, s.end = 4
space_smash, smashed_arg = dsf, start = 7, end = 9
~cat~
~<<~
~dsf~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~0~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~1~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = cat, start = 0, end = 2
smasher loop 3= ,flag=i, s.start = 0, s.end = 2
smasher loop 4= ,flag=i, s.start = 5, s.end = 3
smasher loop 5=<,flag=i, s.start = 5, s.end = 4
smasher loop 7= ,flag=i, s.start = 5, s.end = 5
smasher loop 8=s,flag=s, s.start = 8, s.end = 5
smasher loop 9=d,flag=s, s.start = 8, s.end = 5
smasher loop 10=f,flag=s, s.start = 8, s.end = 5
space_smash, smashed_arg = sdf, start = 8, end = 10
~cat~
~<<~
~sdf~
count_outliar_redire i = -1, ? i == -1 ok:error
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 3
smasher loop 5=$,flag=s, s.start = 5, s.end = 3
smasher loop 6=?,flag=s, s.start = 5, s.end = 3
space_smash, smashed_arg = $?, start = 5, end = 6
~echo~
~130~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
