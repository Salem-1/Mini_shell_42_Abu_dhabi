egetting env vars
var[0] = USER=ahsalem
var[1] = MallocNanoZone=0
var[2] = PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/munki:/Applications/Visual Studio Code.app/Contents/Resources/app/bin:/Applications/Visual Studio Code.app/Contents/Resources/app/bin
var[3] = LOGNAME=ahsalem
var[4] = SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.1OZH8peqyC/Listeners
var[5] = HOME=/Users/ahsalem
var[6] = SHELL=/bin/zsh
var[7] = __CF_USER_TEXT_ENCODING=0x18D01:0x0:0x0
var[8] = TMPDIR=/var/folders/zz/zyxvpxvq6csfxvn_n000cd04003381/T/
var[9] = XPC_SERVICE_NAME=0
var[10] = XPC_FLAGS=0x0
var[11] = ORIGINAL_XDG_CURRENT_DESKTOP=undefined
var[12] = SHLVL=1
var[13] = PWD=/Users/ahsalem/projects/minishell/before_norm_version/minishell_code
var[14] = OLDPWD=/Users/ahsalem/projects/minishell/before_norm_version/minishell_code
var[15] = TERM_PROGRAM=vscode
var[16] = TERM_PROGRAM_VERSION=1.72.2
var[17] = LANG=en_US.UTF-8
var[18] = COLORTERM=truecolor
var[19] = GIT_ASKPASS=/goinfre/ahsalem/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass.sh
var[20] = VSCODE_GIT_ASKPASS_NODE=/goinfre/ahsalem/Visual Studio Code.app/Contents/Frameworks/Code Helper.app/Contents/MacOS/Code Helper
var[21] = VSCODE_GIT_ASKPASS_EXTRA_ARGS=--ms-enable-electron-run-as-node
var[22] = VSCODE_GIT_ASKPASS_MAIN=/goinfre/ahsalem/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass-main.js
var[23] = VSCODE_GIT_IPC_HANDLE=/var/folders/zz/zyxvpxvq6csfxvn_n000cd04003381/T/vscode-git-48beb9fdc6.sock
var[24] = VSCODE_INJECTION=1
var[25] = ZDOTDIR=/Users/ahsalem
var[26] = USER_ZDOTDIR=/Users/ahsalem
var[27] = TERM=xterm-256color
var[28] = _=/Users/ahsalem/projects/minishell/before_norm_version/minishell_code/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=h,flag=s, s.start = 0, s.end = 0
smasher loop 5=i,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echohi, start = 0, end = 5
~echohi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "
fetching end cmd[1 + 5] = < >, flag = "
fetching end cmd[1 + 6] = <h>, flag = "
fetching end cmd[1 + 7] = <i>, flag = "
end figur out end of quote <""echo hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "
end figur out end of quote <"echo" hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 2 no quote start,st = 0 en= 0


Case
s=0,e=0,i=5 
end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <ech"o" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <ech"o" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <ech"o" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <ech"o" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <ech"o" hi>, f=", st=0, en=0, i= 5
cas 2 no quote start,st = 0 en= 0


Case
s=0,e=0,i=5 
end figur out end of quote <ech"o" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=",flag=s, s.start = 0, s.end = 0
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <ec"ho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <ec"ho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <ec"ho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <ec"ho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <ec"ho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <ec"ho" hi>, f=", st=0, en=0, i= 5
cas 2 no quote start,st = 0 en= 0


Case
s=0,e=0,i=5 
end figur out end of quote <ec"ho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi>, f=", st=0, en=0, i= 5
cas 2 no quote start,st = 0 en= 0


Case
s=0,e=0,i=5 
end figur out end of quote <e"cho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "
end figur out end of quote <"echo" hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi>, f=", st=0, en=0, i= 5
cas 2 no quote start,st = 0 en= 0


Case
s=0,e=0,i=5 
end figur out end of quote <e"cho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
getting env vars
var[0] = USER=ahsalem
var[1] = MallocNanoZone=0
var[2] = PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/munki:/Applications/Visual Studio Code.app/Contents/Resources/app/bin:/Applications/Visual Studio Code.app/Contents/Resources/app/bin
var[3] = LOGNAME=ahsalem
var[4] = SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.1OZH8peqyC/Listeners
var[5] = HOME=/Users/ahsalem
var[6] = SHELL=/bin/zsh
var[7] = __CF_USER_TEXT_ENCODING=0x18D01:0x0:0x0
var[8] = TMPDIR=/var/folders/zz/zyxvpxvq6csfxvn_n000cd04003381/T/
var[9] = XPC_SERVICE_NAME=0
var[10] = XPC_FLAGS=0x0
var[11] = ORIGINAL_XDG_CURRENT_DESKTOP=undefined
var[12] = SHLVL=1
var[13] = PWD=/Users/ahsalem/projects/minishell/before_norm_version/minishell_code
var[14] = OLDPWD=/Users/ahsalem/projects/minishell/before_norm_version/minishell_code
var[15] = TERM_PROGRAM=vscode
var[16] = TERM_PROGRAM_VERSION=1.72.2
var[17] = LANG=en_US.UTF-8
var[18] = COLORTERM=truecolor
var[19] = GIT_ASKPASS=/goinfre/ahsalem/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass.sh
var[20] = VSCODE_GIT_ASKPASS_NODE=/goinfre/ahsalem/Visual Studio Code.app/Contents/Frameworks/Code Helper.app/Contents/MacOS/Code Helper
var[21] = VSCODE_GIT_ASKPASS_EXTRA_ARGS=--ms-enable-electron-run-as-node
var[22] = VSCODE_GIT_ASKPASS_MAIN=/goinfre/ahsalem/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass-main.js
var[23] = VSCODE_GIT_IPC_HANDLE=/var/folders/zz/zyxvpxvq6csfxvn_n000cd04003381/T/vscode-git-48beb9fdc6.sock
var[24] = VSCODE_INJECTION=1
var[25] = ZDOTDIR=/Users/ahsalem
var[26] = USER_ZDOTDIR=/Users/ahsalem
var[27] = TERM=xterm-256color
var[28] = _=/Users/ahsalem/projects/minishell/before_norm_version/minishell_code/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <ech"o" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <ech"o" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <ech"o" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <ech"o" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <ech"o" hi>, f=", st=0, en=0, i= 5
cas 2 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 
end figur out end of quote <ech"o" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"" >,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <"" >, start = 0 i = 1
Mul single and double quote
 cmd = <"" >, flag = ",strt=0,end=0,i=1
figur out end of quote <"" >, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] =   , start = 0, flag = "


Case 2
s=0,e=0,i=1 
fetching end cmd[1 + 1] = < >, flag = "
end figur out end of quote <"" >, f=", st=0, en=3, i= 2
filling node with ~ ~
~ ~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <"" hi>, start = 0 i = 1
Mul single and double quote
 cmd = <"" hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <"" hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] =   , start = 0, flag = "


Case 2
s=0,e=0,i=1 
fetching end cmd[1 + 1] = < >, flag = "
fetching end cmd[1 + 2] = <h>, flag = "
fetching end cmd[1 + 3] = <i>, flag = "
end figur out end of quote <"" hi>, f=", st=0, en=5, i= 4
filling node with ~ hi~
~ hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "
end figur out end of quote <"echo" hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "
fetching end cmd[1 + 5] = < >, flag = "
fetching end cmd[1 + 6] = <h>, flag = "
fetching end cmd[1 + 7] = <i>, flag = "
end figur out end of quote <""echo hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = no_proxy=*.local, 169.254/16
var[1] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[2] = HOSTNAME=a639ca32e83b
var[3] = SHLVL=1
var[4] = LD_LIBRARY_PATH=/usr/lib/debug
var[5] = HOME=/root
var[6] = OLDPWD=/home/vscode/src
var[7] = LESS=-R
var[8] = ZSH=/root/.oh-my-zsh
var[9] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[10] = PAGER=less
var[11] = LOGNAME=root
var[12] = _=/home/vscode/src/./mem_check.sh
var[13] = TERM=xterm
var[14] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[15] = GLIBCPP_FORCE_NEW=1
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = DEBIAN_FRONTEND=dialog
var[18] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[19] = PWD=/home/vscode/src
var[20] = GLIBCXX_FORCE_NEW=1
var[21] = LD_PRELOAD=/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so:/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "
fetching end cmd[1 + 5] = < >, flag = "
fetching end cmd[1 + 6] = <h>, flag = "
fetching end cmd[1 + 7] = <i>, flag = "
end figur out end of quote <""echo hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "
end figur out end of quote <"echo" hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=c,flag=i, s.start = 0, s.end = 0
smasher loop 1=l,flag=s, s.start = 0, s.end = 0
smasher loop 2=e,flag=s, s.start = 0, s.end = 0
smasher loop 3=a,flag=s, s.start = 0, s.end = 0
smasher loop 4=r,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = clear, start = 0, end = 4
~clear~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "
end figur out end of quote <"echo" hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi>, f=", st=0, en=0, i= 5
cas 2 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 
end figur out end of quote <e"cho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 2 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
end figur out end of quote <ech""o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <"ech"o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <"ech"o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <"ech"o hi>, f=", st=0, en=0, i= 4
calling case 2 Doesn't end with quote 
main cmd[4] = "  cmd[5] = o , start = 0, flag = "


Case 2
s=0,e=0,i=4 
fetching end cmd[4 + 1] = <o>, flag = "
fetching end cmd[4 + 2] = < >, flag = "
fetching end cmd[4 + 3] = <h>, flag = "
fetching end cmd[4 + 4] = <i>, flag = "
end figur out end of quote <"ech"o hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "
end figur out end of quote <"echo" hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "
fetching end cmd[1 + 5] = < >, flag = "
fetching end cmd[1 + 6] = <h>, flag = "
fetching end cmd[1 + 7] = <i>, flag = "
end figur out end of quote <""echo hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 2 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 
end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <ech"o" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <ech"o" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <ech"o" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <ech"o" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <ech"o" hi>, f=", st=0, en=0, i= 5
cas 2 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 
end figur out end of quote <ech"o" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"ch"o hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"ch"o hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <e"ch"o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <e"ch"o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <e"ch"o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <e"ch"o hi>, f=", st=0, en=0, i= 4
cas 2 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
end figur out end of quote <e"ch"o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 






smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"ch"o hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"ch"o hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <e"ch"o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <e"ch"o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <e"ch"o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <e"ch"o hi>, f=", st=0, en=0, i= 4
cas 2 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
end figur out end of quote <e"ch"o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 
reached end cmd[4 + 1] = <">, flag = " start = 0
end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0



Case 3
s=0,e=0,i=4 
reached end cmd[3 + 1] = <">, flag = " start = 0
end figur out end of quote <ech""o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 

reached end cmd[3 + 1] = <">, flag = " start = 0

end figur out end of quote <ech""o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 

reached end cmd[3 + 1] = <">, flag = " start = 0

end figur out end of quote <ech""o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 

reached end cmd[3 + 1] = <">, flag = " start = 0

end figur out end of quote <ech""o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 

reached end cmd[3 + 1] = <">, flag = " start = 0, quote_end = 1

end figur out end of quote <ech""o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 

reached end cmd[3 + 1] = <">, flag = " start = 0, quote_end = 1

end figur out end of quote <ech""o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 1] = <">, flag = "
fetching end cmd[3 + 2] = <o>, flag = "
fetching end cmd[3 + 3] = < >, flag = "
fetching end cmd[3 + 4] = <h>, flag = "
fetching end cmd[3 + 5] = <i>, flag = "

reached end cmd[3 + 6] = < >, flag = " start = 0, quote_end = 2

end figur out end of quote <ech""o hi>, f=", st=0, en=9, i= 9
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0, quote_end = 1

end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <ech"o" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <ech"o" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <ech"o" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <ech"o" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <ech"o" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0, quote_end = 0

end figur out end of quote <ech"o" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 1] = <">, flag = "
fetching end cmd[3 + 2] = <o>, flag = "
fetching end cmd[3 + 3] = < >, flag = "
fetching end cmd[3 + 4] = <h>, flag = "
fetching end cmd[3 + 5] = <i>, flag = "

reached end cmd[3 + 6] = < >, flag = " start = 0, quote_end = 2

end figur out end of quote <ech""o hi>, f=", st=0, en=9, i= 9
filling node with ~echo hi~
~echo hi~
joining env 





smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 1] = <">, flag = "
fetching end cmd[3 + 2] = <o>, flag = "
fetching end cmd[3 + 3] = < >, flag = "
fetching end cmd[3 + 4] = <h>, flag = "
fetching end cmd[3 + 5] = <i>, flag = "

reached end cmd[3 + 6] = < >, flag = " start = 0, quote_end = 2

end figur out end of quote <ech""o hi>, f=", st=0, en=9, i= 9
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <"" hi>, start = 0 i = 1
Mul single and double quote
 cmd = <"" hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <"" hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] =   , start = 0, flag = "


Case 2
s=0,e=0,i=1 
fetching end cmd[1 + 1] = < >, flag = "
fetching end cmd[1 + 2] = <h>, flag = "
fetching end cmd[1 + 3] = <i>, flag = "

reached end cmd[1 + 4] = < >, flag = " start = 0

end figur out end of quote <"" hi>, f=", st=0, en=5, i= 4
filling node with ~ hi~
~ hi~
joining env 
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 1] = <">, flag = "

reached end cmd[3 + 2] = <o>, flag = " start = 0, quote_end = 2

end figur out end of quote <ech""o hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=5
filling node with ~ech~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0, quote_end = 1

end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 1] = <">, flag = "
fetching end cmd[3 + 2] = <o>, flag = "
fetching end cmd[3 + 3] = < >, flag = "
fetching end cmd[3 + 4] = <h>, flag = "
fetching end cmd[3 + 5] = <i>, flag = "

reached end cmd[3 + 6] = < >, flag = " start = 0, quote_end = 2

end figur out end of quote <ech""o hi>, f=", st=0, en=9, i= 9
filling node with ~echo hi~
~echo hi~
joining env 
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=a639ca32e83b
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 1] = <">, flag = "
fetching end cmd[3 + 2] = <o>, flag = "

reached end cmd[3 + 3] = < >, flag = " start = 0, quote_end = 2

end figur out end of quote <ech""o hi>, f=", st=0, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 7=h,flag=i, s.start = 0, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0, quote_end = 1

end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0, quote_end = 0

end figur out end of quote <e"cho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
~echo~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = no_proxy=*.local, 169.254/16
var[1] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[2] = HOSTNAME=a639ca32e83b
var[3] = SHLVL=1
var[4] = LD_LIBRARY_PATH=/usr/lib/debug
var[5] = HOME=/root
var[6] = OLDPWD=/home/vscode/src
var[7] = LESS=-R
var[8] = ZSH=/root/.oh-my-zsh
var[9] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[10] = PAGER=less
var[11] = LOGNAME=root
var[12] = _=/home/vscode/src/./mem_check.sh
var[13] = TERM=xterm
var[14] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[15] = GLIBCPP_FORCE_NEW=1
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = DEBIAN_FRONTEND=dialog
var[18] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[19] = PWD=/home/vscode/src
var[20] = GLIBCXX_FORCE_NEW=1
var[21] = LD_PRELOAD=/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so:/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0, quote_end = 0

end figur out end of quote <e"cho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0, quote_end = 1

end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 1] = <">, flag = "
fetching end cmd[3 + 2] = <o>, flag = "

reached end cmd[3 + 3] = < >, flag = " start = 0, quote_end = 2

end figur out end of quote <ech""o hi>, f=", st=0, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 7=h,flag=i, s.start = 0, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
getting env vars
var[0] = no_proxy=*.local, 169.254/16
var[1] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[2] = HOSTNAME=a639ca32e83b
var[3] = SHLVL=1
var[4] = LD_LIBRARY_PATH=/usr/lib/debug
var[5] = HOME=/root
var[6] = OLDPWD=/home/vscode/src
var[7] = LESS=-R
var[8] = ZSH=/root/.oh-my-zsh
var[9] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[10] = PAGER=less
var[11] = LOGNAME=root
var[12] = _=/home/vscode/src/./mem_check.sh
var[13] = TERM=xterm
var[14] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[15] = GLIBCPP_FORCE_NEW=1
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = DEBIAN_FRONTEND=dialog
var[18] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[19] = PWD=/home/vscode/src
var[20] = GLIBCXX_FORCE_NEW=1
var[21] = LD_PRELOAD=/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so:/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <e"cho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 1] = <">, flag = "
fetching end cmd[3 + 2] = <o>, flag = "

reached end cmd[3 + 3] = < >, flag = " start = 0

end figur out end of quote <ech""o hi>, f=", st=0, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 7=h,flag=i, s.start = 0, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=1,flag=s, s.start = 5, s.end = 0
smasher loop 6=",flag=s, s.start = 5, s.end = 0
smasher loop 7=2,flag=", s.start = 5, s.end = 0
" " arg = <echo 1"2"3>,cmd[7] = 2,  start = 5 i = 7, flag = "
smasher loop 8=",flag=", s.start = 5, s.end = 0
" " arg = <echo 1"2"3>,cmd[8] = ",  start = 5 i = 8, flag = "
before cleaning arg = <echo 1"2"3>, start = 5 i = 8
Mul single and double quote
 cmd = <echo 1"2"3>, flag = ",strt=5,end=0,i=8
figur out end of quote <echo 1"2"3>, f=", st=5, en=0, i= 8
cas 3 no quote start,st = 5 en= 0


Case 3
s=5,e=0,i=8 
fetching end cmd[8 + 1] = <3>, flag = "

reached end cmd[8 + 2] = < >, flag = " start = 5

end figur out end of quote <echo 1"2"3>, f=", st=5, en=10, i= 9
filling node with ~123~
~echo~
~123~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=1,flag=s, s.start = 5, s.end = 0
smasher loop 6=",flag=s, s.start = 5, s.end = 0
smasher loop 7=2,flag=", s.start = 5, s.end = 0
" " arg = <echo 1"2"3'4>,cmd[7] = 2,  start = 5 i = 7, flag = "
smasher loop 8=",flag=", s.start = 5, s.end = 0
" " arg = <echo 1"2"3'4>,cmd[8] = ",  start = 5 i = 8, flag = "
before cleaning arg = <echo 1"2"3'4>, start = 5 i = 8
Mul single and double quote
 cmd = <echo 1"2"3'4>, flag = ",strt=5,end=0,i=8
figur out end of quote <echo 1"2"3'4>, f=", st=5, en=0, i= 8
cas 3 no quote start,st = 5 en= 0


Case 3
s=5,e=0,i=8 
fetching end cmd[8 + 1] = <3>, flag = "

reached end cmd[8 + 2] = <'>, flag = " start = 5

end figur out end of quote <echo 1"2"3'4>, f=", st=5, en=10, i= 9
entering the source of all devil loop
Loop single and double quote gen
 cmd = <echo 1"2"3'4>, flag = " s 10 e 10 i 10
figur out end of quote <echo 1"2"3'4>, f=', st=10, en=10, i= 10
calling case 2 Doesn't end with quote 
main cmd[10] = '  cmd[11] = 4 , start = 10, flag = '


Case 2
s=10,e=10,i=10 
fetching end cmd[10 + 1] = <4>, flag = '

reached end cmd[10 + 2] = < >, flag = ' start = 10

splitted_arg = 4
end figur out end of quote <echo 1"2"3'4>, f=', st=10, en=12, i= 11
Exiting Multiple merged_str = <1234>, st=10, en=12
filling node with ~1234~
Will not visualize cmd this is an errored one
~echo~
~1234~
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
" " arg = <echo "2"3'4>,cmd[4] =  ,  start = 5 i = 4, flag = "
smasher loop 5=",flag=", s.start = 5, s.end = 0
" " arg = <echo "2"3'4>,cmd[5] = ",  start = 5 i = 5, flag = "
smasher loop 7=",flag=", s.start = 5, s.end = 0
" " arg = <echo "2"3'4>,cmd[7] = ",  start = 5 i = 7, flag = "
before cleaning arg = <echo "2"3'4>, start = 5 i = 7
Mul single and double quote
 cmd = <echo "2"3'4>, flag = ",strt=5,end=0,i=7
figur out end of quote <echo "2"3'4>, f=", st=5, en=0, i= 7
calling case 2 Doesn't end with quote 
main cmd[7] = "  cmd[8] = 3 , start = 5, flag = "


Case 2
s=5,e=0,i=7 
fetching end cmd[7 + 1] = <3>, flag = "

reached end cmd[7 + 2] = <'>, flag = " start = 5

end figur out end of quote <echo "2"3'4>, f=", st=5, en=9, i= 8
entering the source of all devil loop
Loop single and double quote gen
 cmd = <echo "2"3'4>, flag = " s 9 e 9 i 9
figur out end of quote <echo "2"3'4>, f=', st=9, en=9, i= 9
calling case 2 Doesn't end with quote 
main cmd[9] = '  cmd[10] = 4 , start = 9, flag = '


Case 2
s=9,e=9,i=9 
fetching end cmd[9 + 1] = <4>, flag = '

reached end cmd[9 + 2] = < >, flag = ' start = 9

splitted_arg = 4
end figur out end of quote <echo "2"3'4>, f=', st=9, en=11, i= 10
Exiting Multiple merged_str = <234>, st=9, en=11
filling node with ~234~
Will not visualize cmd this is an errored one
~echo~
~234~
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
" " arg = <echo "2"3'4'>,cmd[4] =  ,  start = 5 i = 4, flag = "
smasher loop 5=",flag=", s.start = 5, s.end = 0
" " arg = <echo "2"3'4'>,cmd[5] = ",  start = 5 i = 5, flag = "
smasher loop 7=",flag=", s.start = 5, s.end = 0
" " arg = <echo "2"3'4'>,cmd[7] = ",  start = 5 i = 7, flag = "
before cleaning arg = <echo "2"3'4'>, start = 5 i = 7
Mul single and double quote
 cmd = <echo "2"3'4'>, flag = ",strt=5,end=0,i=7
figur out end of quote <echo "2"3'4'>, f=", st=5, en=0, i= 7
calling case 2 Doesn't end with quote 
main cmd[7] = "  cmd[8] = 3 , start = 5, flag = "


Case 2
s=5,e=0,i=7 
fetching end cmd[7 + 1] = <3>, flag = "

reached end cmd[7 + 2] = <'>, flag = " start = 5

end figur out end of quote <echo "2"3'4'>, f=", st=5, en=9, i= 8
entering the source of all devil loop
Loop single and double quote gen
 cmd = <echo "2"3'4'>, flag = " s 9 e 9 i 9
figur out end of quote <echo "2"3'4'>, f=', st=9, en=9, i= 9
calling case 2 Doesn't end with quote 
main cmd[9] = '  cmd[10] = 4 , start = 9, flag = '


Case 2
s=9,e=9,i=9 
fetching end cmd[9 + 1] = <4>, flag = '

reached end cmd[9 + 2] = <'>, flag = ' start = 9

splitted_arg = 4
end figur out end of quote <echo "2"3'4'>, f=', st=9, en=11, i= 10
Loop single and double quote gen
 cmd = <echo "2"3'4'>, flag = " s 11 e 11 i 11
figur out end of quote <echo "2"3'4'>, f=', st=11, en=11, i= 11
calling case 1 filling normal quote  main cmd[11] = '  cmd[12] =   , start = 11, flag = '
Case 1 Filling normal quote, cmd = echo "2"3'4', start = 11, end = 11
final_arg before expand = , start = 11, end = 12
final_arg after filling normal case = , start = 11, end = 12
end figur out end of quote <echo "2"3'4'>, f=', st=11, en=12, i= 11
Exiting Multiple merged_str = <234>, st=11, en=12
filling node with ~234~
~echo~
~234~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=",flag=s, s.start = 5, s.end = 0
smasher loop 7=i,flag=", s.start = 5, s.end = 0
" " arg = <echo h"i">,cmd[7] = i,  start = 5 i = 7, flag = "
smasher loop 8=",flag=", s.start = 5, s.end = 0
" " arg = <echo h"i">,cmd[8] = ",  start = 5 i = 8, flag = "
before cleaning arg = <echo h"i">, start = 5 i = 8
Mul single and double quote
 cmd = <echo h"i">, flag = ",strt=5,end=0,i=8
figur out end of quote <echo h"i">, f=", st=5, en=0, i= 8
cas 3 no quote start,st = 5 en= 0


Case 3
s=5,e=0,i=8 

reached end cmd[8 + 1] = < >, flag = " start = 5

end figur out end of quote <echo h"i">, f=", st=5, en=9, i= 8
filling node with ~hi~
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=",flag=s, s.start = 5, s.end = 0
smasher loop 7=",flag=", s.start = 5, s.end = 0
" " arg = <echo h"">,cmd[7] = ",  start = 5 i = 7, flag = "
before cleaning arg = <echo h"">, start = 5 i = 7
Mul single and double quote
 cmd = <echo h"">, flag = ",strt=5,end=0,i=7
figur out end of quote <echo h"">, f=", st=5, en=0, i= 7
cas 3 no quote start,st = 5 en= 0


Case 3
s=5,e=0,i=7 

reached end cmd[7 + 1] = < >, flag = " start = 5

end figur out end of quote <echo h"">, f=", st=5, en=8, i= 7
filling node with ~h~
~echo~
~h~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=",flag=s, s.start = 5, s.end = 0
smasher loop 7=",flag=", s.start = 5, s.end = 0
" " arg = <echo h""i>,cmd[7] = ",  start = 5 i = 7, flag = "
before cleaning arg = <echo h""i>, start = 5 i = 7
Mul single and double quote
 cmd = <echo h""i>, flag = ",strt=5,end=0,i=7
figur out end of quote <echo h""i>, f=", st=5, en=0, i= 7
cas 3 no quote start,st = 5 en= 0


Case 3
s=5,e=0,i=7 
fetching end cmd[7 + 1] = <i>, flag = "

reached end cmd[7 + 2] = < >, flag = " start = 5

end figur out end of quote <echo h""i>, f=", st=5, en=9, i= 8
filling node with ~hi~
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=",flag=s, s.start = 5, s.end = 0
smasher loop 7=",flag=", s.start = 5, s.end = 0
" " arg = <echo h""i''>,cmd[7] = ",  start = 5 i = 7, flag = "
before cleaning arg = <echo h""i''>, start = 5 i = 7
Mul single and double quote
 cmd = <echo h""i''>, flag = ",strt=5,end=0,i=7
figur out end of quote <echo h""i''>, f=", st=5, en=0, i= 7
cas 3 no quote start,st = 5 en= 0


Case 3
s=5,e=0,i=7 
fetching end cmd[7 + 1] = <i>, flag = "

reached end cmd[7 + 2] = <'>, flag = " start = 5

end figur out end of quote <echo h""i''>, f=", st=5, en=9, i= 8
entering the source of all devil loop
Loop single and double quote gen
 cmd = <echo h""i''>, flag = " s 9 e 9 i 9
figur out end of quote <echo h""i''>, f=', st=9, en=9, i= 9
calling case 1 filling normal quote  main cmd[9] = '  cmd[10] = ' , start = 9, flag = '
Case 1 Filling normal quote, cmd = echo h""i'', start = 9, end = 9
final_arg before expand = , start = 9, end = 10
final_arg after filling normal case = , start = 9, end = 10
end figur out end of quote <echo h""i''>, f=', st=9, en=10, i= 9
Loop single and double quote gen
 cmd = <echo h""i''>, flag = " s 10 e 10 i 10
figur out end of quote <echo h""i''>, f=', st=10, en=10, i= 10
calling case 1 filling normal quote  main cmd[10] = '  cmd[11] =   , start = 10, flag = '
Case 1 Filling normal quote, cmd = echo h""i'', start = 10, end = 10
final_arg before expand = , start = 10, end = 11
final_arg after filling normal case = , start = 10, end = 11
end figur out end of quote <echo h""i''>, f=', st=10, en=11, i= 10
Exiting Multiple merged_str = <hi>, st=10, en=11
filling node with ~hi~
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=",flag=s, s.start = 5, s.end = 0
smasher loop 7=",flag=", s.start = 5, s.end = 0
" " arg = <echo h""i'd'>,cmd[7] = ",  start = 5 i = 7, flag = "
before cleaning arg = <echo h""i'd'>, start = 5 i = 7
Mul single and double quote
 cmd = <echo h""i'd'>, flag = ",strt=5,end=0,i=7
figur out end of quote <echo h""i'd'>, f=", st=5, en=0, i= 7
cas 3 no quote start,st = 5 en= 0


Case 3
s=5,e=0,i=7 
fetching end cmd[7 + 1] = <i>, flag = "

reached end cmd[7 + 2] = <'>, flag = " start = 5

end figur out end of quote <echo h""i'd'>, f=", st=5, en=9, i= 8
entering the source of all devil loop
Loop single and double quote gen
 cmd = <echo h""i'd'>, flag = " s 9 e 9 i 9
figur out end of quote <echo h""i'd'>, f=', st=9, en=9, i= 9
calling case 2 Doesn't end with quote 
main cmd[9] = '  cmd[10] = d , start = 9, flag = '


Case 2
s=9,e=9,i=9 
fetching end cmd[9 + 1] = <d>, flag = '

reached end cmd[9 + 2] = <'>, flag = ' start = 9

splitted_arg = d
end figur out end of quote <echo h""i'd'>, f=', st=9, en=11, i= 10
Loop single and double quote gen
 cmd = <echo h""i'd'>, flag = " s 11 e 11 i 11
figur out end of quote <echo h""i'd'>, f=', st=11, en=11, i= 11
calling case 1 filling normal quote  main cmd[11] = '  cmd[12] =   , start = 11, flag = '
Case 1 Filling normal quote, cmd = echo h""i'd', start = 11, end = 11
final_arg before expand = , start = 11, end = 12
final_arg after filling normal case = , start = 11, end = 12
end figur out end of quote <echo h""i'd'>, f=', st=11, en=12, i= 11
Exiting Multiple merged_str = <hid>, st=11, en=12
filling node with ~hid~
~echo~
~hid~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=1a1901a3db3e
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = no_proxy=*.local, 169.254/16
var[1] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[2] = HOSTNAME=1a1901a3db3e
var[3] = SHLVL=1
var[4] = LD_LIBRARY_PATH=/usr/lib/debug
var[5] = HOME=/root
var[6] = OLDPWD=/home/vscode/src/pro_parsing
var[7] = LESS=-R
var[8] = ZSH=/root/.oh-my-zsh
var[9] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[10] = PAGER=less
var[11] = LOGNAME=root
var[12] = _=/home/vscode/src/./mem_check.sh
var[13] = TERM=xterm
var[14] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[15] = GLIBCPP_FORCE_NEW=1
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = DEBIAN_FRONTEND=dialog
var[18] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[19] = PWD=/home/vscode/src
var[20] = GLIBCXX_FORCE_NEW=1
var[21] = LD_PRELOAD=/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so:/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <e"cho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 2] = <o>, flag = "

reached end cmd[3 + 3] = < >, flag = " start = 0

end figur out end of quote <ech""o hi>, f=", st=0, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 7=h,flag=i, s.start = 0, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=1a1901a3db3e
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src/pro_parsing
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 2] = <o>, flag = "

reached end cmd[3 + 3] = < >, flag = " start = 0

end figur out end of quote <ech""o hi>, f=", st=0, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 7=h,flag=i, s.start = 0, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <e"cho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = USER=ahsalem
var[1] = MallocNanoZone=0
var[2] = PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/munki:/Applications/Visual Studio Code.app/Contents/Resources/app/bin:/Applications/Visual Studio Code.app/Contents/Resources/app/bin
var[3] = LOGNAME=ahsalem
var[4] = SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.1OZH8peqyC/Listeners
var[5] = HOME=/Users/ahsalem
var[6] = SHELL=/bin/zsh
var[7] = __CF_USER_TEXT_ENCODING=0x18D01:0x0:0x0
var[8] = TMPDIR=/var/folders/zz/zyxvpxvq6csfxvn_n000cd04003381/T/
var[9] = XPC_SERVICE_NAME=0
var[10] = XPC_FLAGS=0x0
var[11] = ORIGINAL_XDG_CURRENT_DESKTOP=undefined
var[12] = SHLVL=1
var[13] = PWD=/Users/ahsalem/projects/minishell/before_norm_version/minishell_code
var[14] = OLDPWD=/Users/ahsalem/projects/minishell/before_norm_version/minishell_code/pro_parsing
var[15] = TERM_PROGRAM=vscode
var[16] = TERM_PROGRAM_VERSION=1.72.2
var[17] = LANG=en_US.UTF-8
var[18] = COLORTERM=truecolor
var[19] = GIT_ASKPASS=/goinfre/ahsalem/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass.sh
var[20] = VSCODE_GIT_ASKPASS_NODE=/goinfre/ahsalem/Visual Studio Code.app/Contents/Frameworks/Code Helper.app/Contents/MacOS/Code Helper
var[21] = VSCODE_GIT_ASKPASS_EXTRA_ARGS=--ms-enable-electron-run-as-node
var[22] = VSCODE_GIT_ASKPASS_MAIN=/goinfre/ahsalem/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass-main.js
var[23] = VSCODE_GIT_IPC_HANDLE=/var/folders/zz/zyxvpxvq6csfxvn_n000cd04003381/T/vscode-git-48beb9fdc6.sock
var[24] = VSCODE_INJECTION=1
var[25] = ZDOTDIR=/Users/ahsalem
var[26] = USER_ZDOTDIR=/Users/ahsalem
var[27] = TERM=xterm-256color
var[28] = _=/Users/ahsalem/projects/minishell/before_norm_version/minishell_code/./minishell
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=2e2d00576103
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "

reached end cmd[5 + 4] = < >, flag = " start = 0

end figur out end of quote <"echo" hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
getting env vars
var[0] = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
var[1] = HOSTNAME=2e2d00576103
var[2] = TERM=xterm
var[3] = no_proxy=*.local, 169.254/16
var[4] = APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
var[5] = DEBIAN_FRONTEND=dialog
var[6] = PROMPT_COMMAND=RET=$?; echo -n "[$RET] "
var[7] = HOME=/root
var[8] = LOGNAME=root
var[9] = SHLVL=1
var[10] = PWD=/home/vscode/src
var[11] = OLDPWD=/home/vscode/src
var[12] = ZSH=/root/.oh-my-zsh
var[13] = PAGER=less
var[14] = LESS=-R
var[15] = LSCOLORS=Gxfxcxdxbxegedabagacad
var[16] = LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
var[17] = _=/home/vscode/src/./minishell
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 4
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" hi>, flag = " s 5 e 5 i 5
figur out end of quote <"echo" hi>, f=", st=5, en=5, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 5, flag = "


Case 2
s=5,e=5,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "

reached end cmd[5 + 4] = < >, flag = " start = 5

end figur out end of quote <"echo" hi>, f=", st=5, en=9, i= 8
Exiting Multiple merged_str = <echo hi>, st=5, en=9
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 4
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" hi>, flag = " s 5 e 5 i 5
figur out end of quote <"echo" hi>, f=", st=5, en=5, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 5, flag = "


Case 2
s=5,e=5,i=5 
after decrement s=5,e=5,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "

reached end cmd[5 + 4] = < >, flag = " start = 5

end figur out end of quote <"echo" hi>, f=", st=5, en=9, i= 8
Exiting Multiple merged_str = <echo hi>, st=5, en=9
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 4
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" hi>, flag = " s 5 e 5 i 5
figur out end of quote <"echo" hi>, f=", st=5, en=5, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 5, flag = "


Case 2
s=5,e=5,i=5 
after decrement s=5,e=5,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "

reached end cmd[5 + 4] = < >, flag = " start = 5

end figur out end of quote <"echo" hi>, f=", st=5, en=9, i= 8
Exiting Multiple merged_str = <echo hi>, st=5, en=9
filling node with ~echo hi~
~echo hi~
joining env 



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0

Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 4
final_arg before expand = ech, start = 0, end = 4
final_arg after filling normal case = ech, start = 0, end = 4
end figur out end of quote <"echo" hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" hi>, flag = " s 5 e 4 i 5
figur out end of quote <"echo" hi>, f=", st=5, en=4, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 5, flag = "


Case 2
s=5,e=4,i=5 
after decrement s=5,e=4,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "

reached end cmd[5 + 4] = < >, flag = " start = 5

end figur out end of quote <"echo" hi>, f=", st=5, en=9, i= 8
Exiting Multiple merged_str = <ech hi>, st=5, en=9
filling node with ~ech hi~
~ech hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0

Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 4
final_arg before expand = ech, start = 0, end = 4
final_arg after filling normal case = ech, start = 0, end = 4
end figur out end of quote <"echo" hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" hi>, flag = " s 5 e 4 i 5
figur out end of quote <"echo" hi>, f=", st=5, en=4, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 5, flag = "


Case 2
s=5,e=4,i=5 
after decrement s=5,e=4,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "

reached end cmd[5 + 4] = < >, flag = " start = 5

end figur out end of quote <"echo" hi>, f=", st=5, en=9, i= 8
Exiting Multiple merged_str = <ech hi>, st=5, en=9
filling node with ~ech hi~
~ech hi~
joining env 



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 4
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" hi>, flag = " s 5 e 5 i 5
figur out end of quote <"echo" hi>, f=", st=5, en=5, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 5, flag = "


Case 2
s=5,e=5,i=5 
after decrement s=5,e=5,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "

reached end cmd[5 + 4] = < >, flag = " start = 5

end figur out end of quote <"echo" hi>, f=", st=5, en=9, i= 8
Exiting Multiple merged_str = <echo hi>, st=5, en=9
filling node with ~echo hi~
~echo hi~
joining env 









smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 4
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" hi>, flag = " s 5 e 5 i 5
figur out end of quote <"echo" hi>, f=", st=5, en=5, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 5, flag = "


Case 2
s=5,e=5,i=5 
after decrement s=5,e=5,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "

reached end cmd[5 + 4] = < >, flag = " start = 5

end figur out end of quote <"echo" hi>, f=", st=5, en=9, i= 8
Exiting Multiple merged_str = <echo hi>, st=5, en=9
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0

forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 4
final_arg before expand = ech, start = 0, end = 4
final_arg after filling normal case = ech, start = 0, end = 4
end figur out end of quote <"echo" hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Loop single double quote gen
 cmd = <"echo" hi>, flag = " s 5 e 4 i 5
figur out end of quote <"echo" hi>, f=", st=5, en=4, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 5, flag = "


Case 2
s=5,e=4,i=5 
after decrement s=5,e=4,i=5 
fetching end cmd[5 + 1] = < >, flag = "
fetching end cmd[5 + 2] = <h>, flag = "
fetching end cmd[5 + 3] = <i>, flag = "

reached end cmd[5 + 4] = < >, flag = " start = 5

end figur out end of quote <"echo" hi>, f=", st=5, en=9, i= 8
Exiting Multiple merged_str = <ech hi>, st=5, en=9
filling node with ~ech hi~
~ech hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0

forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"">,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <"">, start = 0 i = 1
Mul single and double quote
 cmd = <"">, flag = ",strt=0,end=0,i=1
figur out end of quote <"">, f=", st=0, en=0, i= 1
calling case 1 filling normal quote  main cmd[1] = "  cmd[2] =   , start = 0, flag = "
Case 1 Filling normal quote, cmd = "", start = 0, end = 1
final_arg before expand = , start = 0, end = 1
final_arg after filling normal case = , start = 0, end = 1
end figur out end of quote <"">, f=", st=0, en=1, i= 1
filling node with ~~
~~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <" ">,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=",flag=", s.start = 0, s.end = 0
" " arg = <" ">,cmd[2] = ",  start = 0 i = 2, flag = "
before cleaning arg = <" ">, start = 0 i = 2
Mul single and double quote
 cmd = <" ">, flag = ",strt=0,end=0,i=2
figur out end of quote <" ">, f=", st=0, en=0, i= 2
calling case 1 filling normal quote  main cmd[2] = "  cmd[3] =   , start = 0, flag = "
Case 1 Filling normal quote, cmd = " ", start = 0, end = 2
final_arg before expand =  , start = 0, end = 2
final_arg after filling normal case =  , start = 0, end = 2
end figur out end of quote <" ">, f=", st=0, en=2, i= 2
filling node with ~ ~
~ ~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <" " >,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=",flag=", s.start = 0, s.end = 0
" " arg = <" " >,cmd[2] = ",  start = 0 i = 2, flag = "
before cleaning arg = <" " >, start = 0 i = 2
Mul single and double quote
 cmd = <" " >, flag = ",strt=0,end=0,i=2
figur out end of quote <" " >, f=", st=0, en=0, i= 2
calling case 2 Doesn't end with quote 
main cmd[2] = "  cmd[3] =   , start = 0, flag = "


Case 2
s=0,e=0,i=2 
after decrement s=0,e=0,i=1 

reached end cmd[1 + 1] = <">, flag = " start = 0

forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = " " , start = 0, end = 2
final_arg before expand =  , start = 0, end = 2
final_arg after filling normal case =  , start = 0, end = 2
end figur out end of quote <" " >, f=", st=0, en=2, i= 2
entering the source of all devil loop
Exiting Multiple merged_str = < >, st=0, en=2
filling node with ~ ~
smasher loop 3= ,flag=i, s.start = 0, s.end = 0
~ ~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi >,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi >,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi >,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi >,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi >,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi >, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi >, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi >, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0

forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "echo" hi , start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi >, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 0
~echo~
~hi~
joining env 
smasher loop 0= ,flag=i, s.start = 0, s.end = 0
" " arg = < "">,cmd[0] =  ,  start = 1 i = 0, flag = "
smasher loop 1=",flag=", s.start = 1, s.end = 0
" " arg = < "">,cmd[1] = ",  start = 1 i = 1, flag = "
before cleaning arg = < "">, start = 1 i = 2
Mul single and double quote
 cmd = < "">, flag = ",strt=1,end=0,i=2
figur out end of quote < "">, f=", st=1, en=0, i= 2
calling case 1 filling normal quote  main cmd[2] = "  cmd[3] =   , start = 1, flag = "
Case 1 Filling normal quote, cmd =  "", start = 1, end = 2
final_arg before expand = , start = 1, end = 2
final_arg after filling normal case = , start = 1, end = 2
end figur out end of quote < "">, f=", st=1, en=2, i= 2
filling node with ~~
~~
joining env 
smasher loop 0= ,flag=i, s.start = 0, s.end = 0
" " arg = < " ">,cmd[0] =  ,  start = 1 i = 0, flag = "
smasher loop 1=",flag=", s.start = 1, s.end = 0
" " arg = < " ">,cmd[1] = ",  start = 1 i = 1, flag = "
smasher loop 3=",flag=", s.start = 1, s.end = 0
" " arg = < " ">,cmd[3] = ",  start = 1 i = 3, flag = "
before cleaning arg = < " ">, start = 1 i = 3
Mul single and double quote
 cmd = < " ">, flag = ",strt=1,end=0,i=3
figur out end of quote < " ">, f=", st=1, en=0, i= 3
calling case 1 filling normal quote  main cmd[3] = "  cmd[4] =   , start = 1, flag = "
Case 1 Filling normal quote, cmd =  " ", start = 1, end = 3
final_arg before expand =  , start = 1, end = 3
final_arg after filling normal case =  , start = 1, end = 3
end figur out end of quote < " ">, f=", st=1, en=3, i= 3
filling node with ~ ~
~ ~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ec"ho hi >,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi >,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=",flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi >,cmd[3] = ",  start = 0 i = 3, flag = "
before cleaning arg = <"ec"ho hi >, start = 0 i = 3
Mul single and double quote
 cmd = <"ec"ho hi >, flag = ",strt=0,end=0,i=3
figur out end of quote <"ec"ho hi >, f=", st=0, en=0, i= 3
calling case 2 Doesn't end with quote 
main cmd[3] = "  cmd[4] = h , start = 0, flag = "


Case 2
s=0,e=0,i=3 
after decrement s=0,e=0,i=2 

reached end cmd[2 + 1] = <">, flag = " start = 0

forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "ec"ho hi , start = 0, end = 3
final_arg before expand = ec, start = 0, end = 3
final_arg after filling normal case = ec, start = 0, end = 3
end figur out end of quote <"ec"ho hi >, f=", st=0, en=3, i= 3
entering the source of all devil loop
Exiting Multiple merged_str = <ec>, st=0, en=3
filling node with ~ec~
smasher loop 4=h,flag=i, s.start = 0, s.end = 0
smasher loop 5=o,flag=s, s.start = 4, s.end = 0
space_smash, smashed_arg = ho, start = 4, end = 5
smasher loop 6= ,flag=i, s.start = 4, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
smasher loop 9= ,flag=i, s.start = 7, s.end = 0
~ec~
~ho~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
smasher loop 3=i,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exti, start = 0, end = 3
~exti~
joining env 
smasher loop 0=m,flag=i, s.start = 0, s.end = 0
smasher loop 1=a,flag=s, s.start = 0, s.end = 0
smasher loop 2=k,flag=s, s.start = 0, s.end = 0
smasher loop 3=e,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = make, start = 0, end = 3
~make~
joining env 
smasher loop 0=.,flag=i, s.start = 0, s.end = 0
smasher loop 1=/,flag=s, s.start = 0, s.end = 0
smasher loop 2=m,flag=s, s.start = 0, s.end = 0
smasher loop 3=i,flag=s, s.start = 0, s.end = 0
smasher loop 4=n,flag=s, s.start = 0, s.end = 0
smasher loop 5=i,flag=s, s.start = 0, s.end = 0
smasher loop 6=s,flag=s, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 0, s.end = 0
smasher loop 8=e,flag=s, s.start = 0, s.end = 0
smasher loop 9=l,flag=s, s.start = 0, s.end = 0
smasher loop 10=l,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ./minishell, start = 0, end = 10
~./minishell~
joining env 



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <"ech"o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <"ech"o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <"ech"o hi>, f=", st=0, en=0, i= 4
calling case 2 Doesn't end with quote 
main cmd[4] = "  cmd[5] = o , start = 0, flag = "


Case 2
s=0,e=0,i=4 
after decrement s=0,e=0,i=3 

reached end cmd[3 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "ech"o hi, start = 0, end = 4
final_arg before expand = ech, start = 0, end = 4
final_arg after filling normal case = ech, start = 0, end = 4
end figur out end of quote <"ech"o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 







smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <"ech"o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <"ech"o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <"ech"o hi>, f=", st=0, en=0, i= 4
calling case 2 Doesn't end with quote 
main cmd[4] = "  cmd[5] = o , start = 0, flag = "


Case 2
s=0,e=0,i=4 
after decrement s=0,e=0,i=3 

reached end cmd[3 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "ech"o hi, start = 0, end = 4
final_arg before expand = ech, start = 0, end = 4
final_arg after filling normal case = ech, start = 0, end = 4
end figur out end of quote <"ech"o hi>, f=", st=0, en=4, i= 4
entering the source of all devil loop
Exiting Multiple merged_str = <ech>, st=0, en=4
filling node with ~ech~
smasher loop 5=o,flag=i, s.start = 0, s.end = 0
space_smash, smashed_arg = o, start = 5, end = 5
smasher loop 6= ,flag=i, s.start = 5, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ech~
~o~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=",flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[3] = ",  start = 0 i = 3, flag = "
before cleaning arg = <"ec"ho hi>, start = 0 i = 3
Mul single and double quote
 cmd = <"ec"ho hi>, flag = ",strt=0,end=0,i=3
figur out end of quote <"ec"ho hi>, f=", st=0, en=0, i= 3
calling case 2 Doesn't end with quote 
main cmd[3] = "  cmd[4] = h , start = 0, flag = "


Case 2
s=0,e=0,i=3 
after decrement s=0,e=0,i=2 

reached end cmd[2 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "ec"ho hi, start = 0, end = 3
final_arg before expand = ec, start = 0, end = 3
final_arg after filling normal case = ec, start = 0, end = 3
end figur out end of quote <"ec"ho hi>, f=", st=0, en=3, i= 3
entering the source of all devil loop
Exiting Multiple merged_str = <ec>, st=0, en=3
filling node with ~ec~
smasher loop 4=h,flag=i, s.start = 0, s.end = 0
smasher loop 5=o,flag=s, s.start = 4, s.end = 0
space_smash, smashed_arg = ho, start = 4, end = 5
smasher loop 6= ,flag=i, s.start = 4, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ec~
~ho~
~hi~
joining env 









smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=",flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[3] = ",  start = 0 i = 3, flag = "
before cleaning arg = <"ec"ho hi>, start = 0 i = 3
Mul single and double quote
 cmd = <"ec"ho hi>, flag = ",strt=0,end=0,i=3
figur out end of quote <"ec"ho hi>, f=", st=0, en=0, i= 3
calling case 2 Doesn't end with quote 
main cmd[3] = "  cmd[4] = h , start = 0, flag = "


Case 2
s=0,e=0,i=3 
after decrement s=0,e=0,i=2 

reached end cmd[2 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "ec"ho hi, start = 0, end = 3
final_arg before expand = ec, start = 0, end = 3
final_arg after filling normal case = ec, start = 0, end = 3
end figur out end of quote <"ec"ho hi>, f=", st=0, en=3, i= 3
entering the source of all devil loop
Exiting Multiple merged_str = <ec>, st=0, en=3
filling node with ~ec~
smasher loop 4=h,flag=i, s.start = 0, s.end = 0
smasher loop 5=o,flag=s, s.start = 4, s.end = 0
space_smash, smashed_arg = ho, start = 4, end = 5
smasher loop 6= ,flag=i, s.start = 4, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ec~
~ho~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~





smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=",flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[3] = ",  start = 0 i = 3, flag = "
before cleaning arg = <"ec"ho hi>, start = 0 i = 3
Mul single and double quote
 cmd = <"ec"ho hi>, flag = ",strt=0,end=0,i=3
figur out end of quote <"ec"ho hi>, f=", st=0, en=0, i= 3
calling case 2 Doesn't end with quote 
main cmd[3] = "  cmd[4] = h , start = 0, flag = "


Case 2
s=0,e=0,i=3 
after decrement s=0,e=0,i=2 

reached end cmd[2 + 1] = <">, flag = " start = 0

end figur out end of quote <"ec"ho hi>, f=", st=0, en=3, i= 2
entering the source of all devil loop
Loop single double quote gen
 cmd = <"ec"ho hi>, flag = " s 3 e 3 i 3
figur out end of quote <"ec"ho hi>, f=", st=3, en=3, i= 3
calling case 2 Doesn't end with quote 
main cmd[3] = "  cmd[4] = h , start = 3, flag = "


Case 2
s=3,e=3,i=3 
after decrement s=3,e=3,i=3 
fetching end cmd[3 + 1] = <h>, flag = "
fetching end cmd[3 + 2] = <o>, flag = "
fetching end cmd[3 + 3] = < >, flag = "
fetching end cmd[3 + 4] = <h>, flag = "
fetching end cmd[3 + 5] = <i>, flag = "

reached end cmd[3 + 6] = < >, flag = " start = 3

end figur out end of quote <"ec"ho hi>, f=", st=3, en=9, i= 8
Exiting Multiple merged_str = <echo hi>, st=3, en=9
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~





smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = ""echo, start = 0, end = 1
final_arg before expand = , start = 0, end = 1
final_arg after filling normal case = , start = 0, end = 1
end figur out end of quote <""echo>, f=", st=0, en=1, i= 1
entering the source of all devil loop
Exiting Multiple merged_str = <>, st=0, en=1
filling node with ~~
smasher loop 2=e,flag=i, s.start = 0, s.end = 0
smasher loop 3=c,flag=s, s.start = 2, s.end = 0
smasher loop 4=h,flag=s, s.start = 2, s.end = 0
smasher loop 5=o,flag=s, s.start = 2, s.end = 0
space_smash, smashed_arg = echo, start = 2, end = 5
~~
~echo~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=",flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[3] = ",  start = 0 i = 3, flag = "
before cleaning arg = <"ec"ho hi>, start = 0 i = 3
Mul single and double quote
 cmd = <"ec"ho hi>, flag = ",strt=0,end=0,i=3
figur out end of quote <"ec"ho hi>, f=", st=0, en=0, i= 3
calling case 2 Doesn't end with quote 
main cmd[3] = "  cmd[4] = h , start = 0, flag = "


Case 2
s=0,e=0,i=3 
after decrement s=0,e=0,i=2 

reached end cmd[2 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "ec"ho hi, start = 0, end = 3
final_arg before expand = ec, start = 0, end = 3
final_arg after filling normal case = ec, start = 0, end = 3
end figur out end of quote <"ec"ho hi>, f=", st=0, en=3, i= 3
entering the source of all devil loop
Exiting Multiple merged_str = <ec>, st=0, en=3
filling node with ~ec~
smasher loop 4=h,flag=i, s.start = 0, s.end = 0
smasher loop 5=o,flag=s, s.start = 4, s.end = 0
space_smash, smashed_arg = ho, start = 4, end = 5
smasher loop 6= ,flag=i, s.start = 4, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~ec~
~ho~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = ""echo hi, start = 0, end = 1
final_arg before expand = , start = 0, end = 1
final_arg after filling normal case = , start = 0, end = 1
end figur out end of quote <""echo hi>, f=", st=0, en=1, i= 1
entering the source of all devil loop
Exiting Multiple merged_str = <>, st=0, en=1
filling node with ~~
smasher loop 2=e,flag=i, s.start = 0, s.end = 0
smasher loop 3=c,flag=s, s.start = 2, s.end = 0
smasher loop 4=h,flag=s, s.start = 2, s.end = 0
smasher loop 5=o,flag=s, s.start = 2, s.end = 0
space_smash, smashed_arg = echo, start = 2, end = 5
smasher loop 6= ,flag=i, s.start = 2, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~~
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing calling case 1 in case 2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <"ech"o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <"ech"o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <"ech"o hi>, f=", st=0, en=0, i= 4
calling case 2 Doesn't end with quote 
main cmd[4] = "  cmd[5] = o , start = 0, flag = "


Case 2
s=0,e=0,i=4 
after decrement s=0,e=0,i=3 

reached end cmd[3 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[4 + 1] = <o>, flag = "
fetching end cmd[4 + 2] = < >, flag = "
fetching end cmd[4 + 3] = <h>, flag = "
fetching end cmd[4 + 4] = <i>, flag = "

reached end cmd[4 + 5] = < >, flag = " start = 0


special_special_case 2
s=0,e=9,i=8 
end figur out end of quote <"ech"o hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "
fetching end cmd[1 + 5] = < >, flag = "
fetching end cmd[1 + 6] = <h>, flag = "
fetching end cmd[1 + 7] = <i>, flag = "

reached end cmd[1 + 8] = < >, flag = " start = 0


special_special_case 2
s=0,e=9,i=8 
end figur out end of quote <""echo hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "
fetching end cmd[1 + 5] = < >, flag = "
fetching end cmd[1 + 6] = <h>, flag = "
fetching end cmd[1 + 7] = <i>, flag = "

reached end cmd[1 + 8] = < >, flag = " start = 0


special_special_case 2
s=0,e=9,i=8 
end figur out end of quote <""echo hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "
fetching end cmd[1 + 5] = < >, flag = "
fetching end cmd[1 + 6] = <h>, flag = "
fetching end cmd[1 + 7] = <i>, flag = "

reached end cmd[1 + 8] = < >, flag = " start = 0


special_special_case 2
s=0,e=9,i=8 
end figur out end of quote <""echo hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "
fetching end cmd[1 + 5] = < >, flag = "
fetching end cmd[1 + 6] = <h>, flag = "
fetching end cmd[1 + 7] = <i>, flag = "

reached end cmd[1 + 8] = < >, flag = " start = 0


special_special_case 2
s=0,e=9,i=8 
end figur out end of quote <""echo hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=E,flag=i, s.start = 0, s.end = 0
smasher loop 1=C,flag=s, s.start = 0, s.end = 0
smasher loop 2=H,flag=s, s.start = 0, s.end = 0
smasher loop 3=O,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ECHO, start = 0, end = 3
~ECHO~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"">,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <"">, start = 0 i = 1
Mul single and double quote
 cmd = <"">, flag = ",strt=0,end=0,i=1
figur out end of quote <"">, f=", st=0, en=0, i= 1
calling case 1 filling normal quote  main cmd[1] = "  cmd[2] =   , start = 0, flag = "
Case 1 Filling normal quote, cmd = "", start = 0, end = 1
final_arg before expand = , start = 0, end = 1
final_arg after filling normal case = , start = 0, end = 1
end figur out end of quote <"">, f=", st=0, en=1, i= 1
filling node with ~~
~~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"" >,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <"" >, start = 0 i = 1
Mul single and double quote
 cmd = <"" >, flag = ",strt=0,end=0,i=1
figur out end of quote <"" >, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] =   , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "" , start = 0, end = 1
final_arg before expand = , start = 0, end = 1
final_arg after filling normal case = , start = 0, end = 1
end figur out end of quote <"" >, f=", st=0, en=1, i= 1
entering the source of all devil loop
Exiting Multiple merged_str = <>, st=0, en=1
filling node with ~~
smasher loop 2= ,flag=i, s.start = 0, s.end = 0
~~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <"" hi>, start = 0 i = 1
Mul single and double quote
 cmd = <"" hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <"" hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] =   , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "" hi, start = 0, end = 1
final_arg before expand = , start = 0, end = 1
final_arg after filling normal case = , start = 0, end = 1
end figur out end of quote <"" hi>, f=", st=0, en=1, i= 1
entering the source of all devil loop
Exiting Multiple merged_str = <>, st=0, en=1
filling node with ~~
smasher loop 2= ,flag=i, s.start = 0, s.end = 0
smasher loop 3=h,flag=s, s.start = 3, s.end = 0
smasher loop 4=i,flag=s, s.start = 3, s.end = 0
space_smash, smashed_arg = hi, start = 3, end = 4
~~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "
fetching end cmd[1 + 5] = < >, flag = "
fetching end cmd[1 + 6] = <h>, flag = "
fetching end cmd[1 + 7] = <i>, flag = "

reached end cmd[1 + 8] = < >, flag = " start = 0


special_special_case 2
s=0,e=9,i=8 
end figur out end of quote <""echo hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <"ech"o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <"ech"o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <"ech"o hi>, f=", st=0, en=0, i= 4
calling case 2 Doesn't end with quote 
main cmd[4] = "  cmd[5] = o , start = 0, flag = "


Case 2
s=0,e=0,i=4 
after decrement s=0,e=0,i=3 

reached end cmd[3 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[4 + 1] = <o>, flag = "
fetching end cmd[4 + 2] = < >, flag = "
fetching end cmd[4 + 3] = <h>, flag = "
fetching end cmd[4 + 4] = <i>, flag = "

reached end cmd[4 + 5] = < >, flag = " start = 0


special_special_case 2
s=0,e=9,i=8 
end figur out end of quote <"ech"o hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 







""smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 




smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <"ech"o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <"ech"o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <"ech"o hi>, f=", st=0, en=0, i= 4
calling case 2 Doesn't end with quote 
main cmd[4] = "  cmd[5] = o , start = 0, flag = "


Case 2
s=0,e=0,i=4 
after decrement s=0,e=0,i=3 

reached end cmd[3 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[4 + 1] = <o>, flag = "
fetching end cmd[4 + 2] = < >, flag = "
fetching end cmd[4 + 3] = <h>, flag = "
fetching end cmd[4 + 4] = <i>, flag = "

reached end cmd[4 + 5] = < >, flag = " start = 0


special_special_case 2
s=0,e=9,i=8 
end figur out end of quote <"ech"o hi>, f=", st=0, en=9, i= 8
filling node with ~echo hi~
~echo hi~
joining env 




smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"12"4 hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=2,flag=", s.start = 0, s.end = 0
" " arg = <"12"4 hi>,cmd[2] = 2,  start = 0 i = 2, flag = "
smasher loop 3=",flag=", s.start = 0, s.end = 0
" " arg = <"12"4 hi>,cmd[3] = ",  start = 0 i = 3, flag = "
before cleaning arg = <"12"4 hi>, start = 0 i = 3
Mul single and double quote
 cmd = <"12"4 hi>, flag = ",strt=0,end=0,i=3
figur out end of quote <"12"4 hi>, f=", st=0, en=0, i= 3
calling case 2 Doesn't end with quote 
main cmd[3] = "  cmd[4] = 4 , start = 0, flag = "


Case 2
s=0,e=0,i=3 
after decrement s=0,e=0,i=2 

reached end cmd[2 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[3 + 1] = <4>, flag = "
fetching end cmd[3 + 2] = < >, flag = "
fetching end cmd[3 + 3] = <h>, flag = "
fetching end cmd[3 + 4] = <i>, flag = "

reached end cmd[3 + 5] = < >, flag = " start = 0


special_special_case 2
s=0,e=8,i=7 
end figur out end of quote <"12"4 hi>, f=", st=0, en=8, i= 7
filling node with ~124 hi~
~124 hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 


smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "

reached end cmd[1 + 5] = < >, flag = " start = 0


special_special_case 2
s=0,e=6,i=5 
end figur out end of quote <""echo hi>, f=", st=0, en=6, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=",flag=", s.start = 0, s.end = 0
" " arg = <"ec"ho hi>,cmd[3] = ",  start = 0 i = 3, flag = "
before cleaning arg = <"ec"ho hi>, start = 0 i = 3
Mul single and double quote
 cmd = <"ec"ho hi>, flag = ",strt=0,end=0,i=3
figur out end of quote <"ec"ho hi>, f=", st=0, en=0, i= 3
calling case 2 Doesn't end with quote 
main cmd[3] = "  cmd[4] = h , start = 0, flag = "


Case 2
s=0,e=0,i=3 
after decrement s=0,e=0,i=2 

reached end cmd[2 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[3 + 1] = <h>, flag = "
fetching end cmd[3 + 2] = <o>, flag = "

reached end cmd[3 + 3] = < >, flag = " start = 0


special_special_case 2
s=0,e=6,i=5 
end figur out end of quote <"ec"ho hi>, f=", st=0, en=6, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <"echo" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <"echo" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <"echo" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <"echo" hi>, f=", st=0, en=0, i= 5
calling case 2 Doesn't end with quote 
main cmd[5] = "  cmd[6] =   , start = 0, flag = "


Case 2
s=0,e=0,i=5 
after decrement s=0,e=0,i=4 

reached end cmd[4 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
Case 1 Filling normal quote, cmd = "echo" hi, start = 0, end = 5
final_arg before expand = echo, start = 0, end = 5
final_arg after filling normal case = echo, start = 0, end = 5
end figur out end of quote <"echo" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[0] = ",  start = 0 i = 0, flag = "
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <"ech"o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <"ech"o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <"ech"o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <"ech"o hi>, f=", st=0, en=0, i= 4
calling case 2 Doesn't end with quote 
main cmd[4] = "  cmd[5] = o , start = 0, flag = "


Case 2
s=0,e=0,i=4 
after decrement s=0,e=0,i=3 

reached end cmd[3 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[4 + 1] = <o>, flag = "

reached end cmd[4 + 2] = < >, flag = " start = 0


special_special_case 2
s=0,e=6,i=5 
end figur out end of quote <"ech"o hi>, f=", st=0, en=6, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=",flag=i, s.start = 0, s.end = 0
" " arg = <""echo hi>,cmd[0] = ",  start = 0 i = 0, flag = "
before cleaning arg = <""echo hi>, start = 0 i = 1
Mul single and double quote
 cmd = <""echo hi>, flag = ",strt=0,end=0,i=1
figur out end of quote <""echo hi>, f=", st=0, en=0, i= 1
calling case 2 Doesn't end with quote 
main cmd[1] = "  cmd[2] = e , start = 0, flag = "


Case 2
s=0,e=0,i=1 
after decrement s=0,e=0,i=0 

reached end cmd[0 + 1] = <">, flag = " start = 0



forcing fixing_edge_quote_start_case_2
fetching end cmd[1 + 1] = <e>, flag = "
fetching end cmd[1 + 2] = <c>, flag = "
fetching end cmd[1 + 3] = <h>, flag = "
fetching end cmd[1 + 4] = <o>, flag = "

reached end cmd[1 + 5] = < >, flag = " start = 0


special_special_case 2
s=0,e=6,i=5 
end figur out end of quote <""echo hi>, f=", st=0, en=6, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=e,flag=", s.start = 0, s.end = 0
" " arg = <e"echo" hi>,cmd[2] = e,  start = 0 i = 2, flag = "
smasher loop 3=c,flag=", s.start = 0, s.end = 0
" " arg = <e"echo" hi>,cmd[3] = c,  start = 0 i = 3, flag = "
smasher loop 4=h,flag=", s.start = 0, s.end = 0
" " arg = <e"echo" hi>,cmd[4] = h,  start = 0 i = 4, flag = "
smasher loop 5=o,flag=", s.start = 0, s.end = 0
" " arg = <e"echo" hi>,cmd[5] = o,  start = 0 i = 5, flag = "
smasher loop 6=",flag=", s.start = 0, s.end = 0
" " arg = <e"echo" hi>,cmd[6] = ",  start = 0 i = 6, flag = "
before cleaning arg = <e"echo" hi>, start = 0 i = 6
Mul single and double quote
 cmd = <e"echo" hi>, flag = ",strt=0,end=0,i=6
figur out end of quote <e"echo" hi>, f=", st=0, en=0, i= 6
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=6 

reached end cmd[5 + 1] = <">, flag = " start = 0

end figur out end of quote <e"echo" hi>, f=", st=0, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <eecho>, st=0, en=6
filling node with ~eecho~
smasher loop 7= ,flag=i, s.start = 0, s.end = 0
smasher loop 8=h,flag=s, s.start = 8, s.end = 0
smasher loop 9=i,flag=s, s.start = 8, s.end = 0
space_smash, smashed_arg = hi, start = 8, end = 9
~eecho~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=",flag=s, s.start = 0, s.end = 0
smasher loop 2=c,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[2] = c,  start = 0 i = 2, flag = "
smasher loop 3=h,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[3] = h,  start = 0 i = 3, flag = "
smasher loop 4=o,flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[4] = o,  start = 0 i = 4, flag = "
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <e"cho" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <e"cho" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <e"cho" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <e"cho" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <e"cho" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=s, s.start = 0, s.end = 0
smasher loop 5=",flag=", s.start = 0, s.end = 0
" " arg = <echo"" hi>,cmd[5] = ",  start = 0 i = 5, flag = "
before cleaning arg = <echo"" hi>, start = 0 i = 5
Mul single and double quote
 cmd = <echo"" hi>, flag = ",strt=0,end=0,i=5
figur out end of quote <echo"" hi>, f=", st=0, en=0, i= 5
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=5 

reached end cmd[4 + 1] = <">, flag = " start = 0

end figur out end of quote <echo"" hi>, f=", st=0, en=5, i= 5
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=5
filling node with ~echo~
smasher loop 6= ,flag=i, s.start = 0, s.end = 0
smasher loop 7=h,flag=s, s.start = 7, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=",flag=s, s.start = 0, s.end = 0
smasher loop 4=",flag=", s.start = 0, s.end = 0
" " arg = <ech""o hi>,cmd[4] = ",  start = 0 i = 4, flag = "
before cleaning arg = <ech""o hi>, start = 0 i = 4
Mul single and double quote
 cmd = <ech""o hi>, flag = ",strt=0,end=0,i=4
figur out end of quote <ech""o hi>, f=", st=0, en=0, i= 4
cas 3 no quote start,st = 0 en= 0


Case 3
s=0,e=0,i=4 
fetching end cmd[3 + 2] = <o>, flag = "

reached end cmd[3 + 3] = < >, flag = " start = 0

end figur out end of quote <ech""o hi>, f=", st=0, en=6, i= 6
entering the source of all devil loop
Exiting Multiple merged_str = <echo>, st=0, en=6
filling node with ~echo~
smasher loop 7=h,flag=i, s.start = 0, s.end = 0
smasher loop 8=i,flag=s, s.start = 7, s.end = 0
space_smash, smashed_arg = hi, start = 7, end = 8
~echo~
~hi~
joining env 
smasher loop 0=l,flag=i, s.start = 0, s.end = 0
smasher loop 1=s,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = ls, start = 0, end = 1
smasher loop 2=<,flag=i, s.start = 0, s.end = 0
smasher loop 4=l,flag=i, s.start = 2, s.end = 0
space_smash, smashed_arg = l, start = 4, end = 4
smasher loop 5=|,flag=i, s.start = 4, s.end = 0
smasher loop 6=<,flag=i, s.start = 5, s.end = 0
smasher loop 8=k,flag=i, s.start = 6, s.end = 0
space_smash, smashed_arg = k, start = 8, end = 8
smasher loop 9= ,flag=i, s.start = 8, s.end = 0
smasher loop 10=p,flag=s, s.start = 10, s.end = 0
smasher loop 11=w,flag=s, s.start = 10, s.end = 0
smasher loop 12=d,flag=s, s.start = 10, s.end = 0
space_smash, smashed_arg = pwd, start = 10, end = 12
~ls~
~<<~
~l~
~|~
~<<~
~k~
~pwd~
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
smasher loop 7= ,flag=i, s.start = 5, s.end = 0
smasher loop 8=|,flag=i, s.start = 8, s.end = 0
smasher loop 9=>,flag=i, s.start = 8, s.end = 0
smasher loop 11= ,flag=i, s.start = 9, s.end = 0
smasher loop 12=f,flag=s, s.start = 12, s.end = 0
space_smash, smashed_arg = f, start = 12, end = 12
~echo~
~hi~
~|~
~>>~
~f~
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
smasher loop 7= ,flag=i, s.start = 5, s.end = 0
smasher loop 8=|,flag=i, s.start = 8, s.end = 0
smasher loop 9=>,flag=i, s.start = 8, s.end = 0
smasher loop 10= ,flag=i, s.start = 9, s.end = 0
smasher loop 11=f,flag=s, s.start = 11, s.end = 0
space_smash, smashed_arg = f, start = 11, end = 11
smasher loop 12= ,flag=i, s.start = 11, s.end = 0
~echo~
~hi~
~|~
~>~
~f~
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~



smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=c,flag=s, s.start = 0, s.end = 0
smasher loop 2=h,flag=s, s.start = 0, s.end = 0
smasher loop 3=o,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = echo, start = 0, end = 3
smasher loop 4= ,flag=i, s.start = 0, s.end = 0
smasher loop 5=h,flag=s, s.start = 5, s.end = 0
smasher loop 6=i,flag=s, s.start = 5, s.end = 0
space_smash, smashed_arg = hi, start = 5, end = 6
~echo~
~hi~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=t,flag=s, s.start = 0, s.end = 0
smasher loop 3=i,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exti, start = 0, end = 3
~exti~
joining env 
smasher loop 0=e,flag=i, s.start = 0, s.end = 0
smasher loop 1=x,flag=s, s.start = 0, s.end = 0
smasher loop 2=i,flag=s, s.start = 0, s.end = 0
smasher loop 3=t,flag=s, s.start = 0, s.end = 0
space_smash, smashed_arg = exit, start = 0, end = 3
~exit~
